from django.shortcuts import render,Http404
from django.views.decorators.cache import cache_control
from .models import *
from django.shortcuts import redirect, reverse
from datetime import datetime
from django.conf import settings
from django.contrib import messages
import secrets
import string
from django.contrib.auth.hashers import make_password, check_password
from django.template.loader import render_to_string
from django.core.mail import EmailMessage
from .forms import imgForm
import openpyxl

from django.http import JsonResponse
from django.forms.models import model_to_dict
from django.db.models import Q, Max
from rest_framework.decorators import api_view
from rest_framework.response import Response
import openpyxl
import json
from django.core.serializers.json import DjangoJSONEncoder
from django.db.models import F,Case, When, Value, CharField
from django.http import JsonResponse
from django.http import HttpResponse
from django.core.paginator import Paginator
from django.contrib import messages
from .common_variable import *
from django.db.models import Sum, IntegerField
from django.core.exceptions import ObjectDoesNotExist
from django.db.models.functions import Concat
from django.db.models import Q







def download(session_query):
        
        wb      = openpyxl.Workbook()
        ws      = wb.active
        data1   = json.loads(session_query)[0]
        keys=list(data1.keys())    
        ws.append(keys)
        
        for obj in json.loads(session_query):
            valuelist=[]
            for i in keys:
                valuelist=valuelist+[obj[i]]
            ws.append(valuelist)



        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter  # Get the column name
            for cell in col:
                try:  # Necessary to avoid error on empty cells
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except:
                    pass
            adjusted_width = (max_length + 2) * 1.2  # Adjusting width
            ws.column_dimensions[column].width = adjusted_width

        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = 'attachment; filename=data.xlsx'
        wb.save(response)
        return response

state_list=[
      {"name": "Kerala", "id": "32"},
      {"name": "Andhra Pradesh", "id": "37"},
      {"name": "Arunachal Pradesh", "id": "12"},
      {"name": "Assam", "id": "18"},
      {"name": "Bihar", "id": "10"},
      {"name": "Chhattisgarh", "id": "22"},
      {"name": "Goa", "id": "30"},
      {"name": "Gujarat", "id": "24"},
      {"name": "Haryana", "id": "06"},
      {"name": "Himachal Pradesh", "id": "02"},
      {"name": "Jharkhand", "id": "20"},
      {"name": "Karnataka", "id": "29"},
      {"name": "Madhya Pradesh", "id": "23"},
      {"name": "Maharashtra", "id": "27"},
      {"name": "Manipur", "id": "14"},
      {"name": "Meghalaya", "id": "17"},
      {"name": "Mizoram", "id": "15"},
      {"name": "Nagaland", "id": "13"},
      {"name": "Odisha", "id": "21"},
      {"name": "Punjab", "id": "03"},
      {"name": "Rajasthan", "id": "08"},
      {"name": "Sikkim", "id": "11"},
      {"name": "Tamil Nadu", "id": "33"},
      {"name": "Telangana", "id": "36"},
      {"name": "Tripura", "id": "16"},
      {"name": "Uttar Pradesh", "id": "09"},
      {"name": "Uttarakhand", "id": "05"},
      {"name": "West Bengal", "id": "19"},
      {"name": "Andaman and Nicobar Islands", "id": "35"},
      {"name": "Chandigarh", "id": "04"},
      {"name": "Dadra and Nagar Haveli and Daman and Diu", "id": "26"},
      {"name": "Lakshadweep", "id": "31"},
      {"name": "Delhi", "id": "07"},
      {"name": "Puducherry", "id": "34"}
    ]

# Create your views here.
@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def userLogin(request): ##admin users
    if  request.method=='POST':
        email       = request.POST['email']
        password    = request.POST['password']
        
        
        get_user_data   = user_data.objects.all().filter(email=email)
        
        if get_user_data:
            for x in get_user_data:
                if(check_password(password,x.password) == True):
                    if x.active:
                        user_id         = x.id  
                        request.session['userId']   = x.id
                        return redirect('user-dashboard')
                    else:
                        messages.error(request, 'Your account has been deactivated. Please contact the administrator for further assistance.')
                        return redirect('user-login')

                else:
                    messages.error(request, 'Invalid password')
                    return redirect('user-login')
        else:
            messages.error(request, 'Invalid username')
            return redirect('user-login')
        
    else:
        if  request.session.has_key('userId'):
            return redirect('user-dashboard')
        else:
            return render(request,'users/pages/login.html')



# Create your views here.
@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def userforgot_password(request): ##admin users
    if  request.method=='POST':
        email       = request.POST['email']
       
        get_user_data   = user_data.objects.all().filter(email=email)
        
        if get_user_data:
            get_user_data       = user_data.objects.filter(email=email)
            characters          = string.ascii_letters + string.digits
            random_string       = ''.join(secrets.choice(characters) for _ in range(8))

            password            = random_string

            hash_password       = make_password(password)
            now                 = datetime.now()
            print(get_user_data)
            get_user_data.update(password=hash_password,updated_at=now)
            

            ### send email
            template            = 'email/password.html'
            send_email          = sendEmail(email,template,random_string)

            messages.success(request, 'Check Your Mail for new password to login .')
            return redirect('user-login')
        else:
            messages.error(request, 'Invalid username')
            return redirect('userforgot-password')
        
    else:
        if  request.session.has_key('userId'):
            return redirect('user-dashboard')
        else:
            return render(request,'users/pages/forgot_password.html')


# Create your views here.
@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def userreset_password(request): ##admin users
    if  request.method=='POST':
        current_password        = request.POST['pre_password']
        new_password            = request.POST['password']
        user_id                 = request.session.get('userId')
        get_user_data           = user_data.objects.all().filter(pk=user_id)
        now                     = datetime.now()       
 
        print(get_user_data[0].password)
        if(check_password(current_password,get_user_data[0].password) == True):
            hash_password       = make_password(new_password)
            get_user_data.update(password=hash_password,updated_at=now)
            messages.success(request, 'Successfully Updated')
            return redirect('user-reset-password')
        else:
            messages.error(request, 'Invalid Current Password')
            return redirect('user-reset-password')
        
    else:
       
        return render(request,'users/pages/reset_password.html')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def userLogout(request):
    if request.session.has_key('userId'):
        del request.session['userId']

        userLogout(request)
    return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def userDashboard(request):
    return render(request,'users/pages/dashboard.html')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listEntityType(request):
    

    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_read'] or role_permission['entity_write']):
            
            entity_type_list    = entity_type.objects.all().order_by('-id')
            searched_name       = ''

            if 'search' in request.GET: 
                searched_name   = request.GET.get('searched_name')
                 
                if searched_name:      
                    entity_type_list= entity_type_list.filter(type__istartswith=searched_name).order_by('-id')
                     

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce        = download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data'] = json.dumps(list(entity_type_list.values('type','description')), cls=DjangoJSONEncoder)
            write=0
            if role_permission['entity_write']:
                write=1

            return render(request,'users/pages/list_entity_type.html',{'write':write,'entity_type_list' : entity_type_list,'searched_name':searched_name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewEntityType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            if request.method=="POST":
                type            = request.POST['type']
                description     = request.POST['description']
                now             = datetime.now()

                insert_data     = entity_type(type=type,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-entity-type')
            else:
                return render(request,'users/pages/add_entity_type.html')

        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateEntityType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            if request.method=="POST":
                type_id         = request.POST['id']
                type            = request.POST['type']
                description     = request.POST['description']
                now             = datetime.now()

                entity_type.objects.all().filter(id=type_id).update(type=type,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-entity-type')
            else:
                type_id         = request.GET['id']
                type_data       = entity_type.objects.get(id=type_id)
                
                return render(request,'users/pages/update_entity_type.html',{'type_data' : type_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def viewEntityType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_read']):
            type_id         = request.GET['id']
            type_data       = entity_type.objects.get(id=type_id)
            
            return render(request,'users/pages/view_entity_type.html',{'type_data' : type_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')








@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteEntityType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            type_id     = request.POST['id']
            fromReg     = entity_type.objects.all().filter(id=type_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-entity-type')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-entity-type')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listEntityCategory(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']
        if (role_permission['entity_read'] or role_permission['entity_write']):
      
            entity_category_list    = entity_category.objects.all().order_by('-id')
            searched_name   =''

            if 'search' in request.GET: 
                searched_name    = request.GET.get('searched_name')
                
                if searched_name:      
                    entity_category_list             = entity_category_list.filter(category__istartswith=searched_name).order_by('-id')
                    

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(entity_category_list.values('category','description')), cls=DjangoJSONEncoder)

            write=0
            if role_permission['entity_write']:
                write=1


            return render(request,'users/pages/list_entity_category.html',{'write':write,'entity_category_list' : entity_category_list,'searched_name':searched_name})

        else:
            raise Http404("Access to this is not permitted")    

    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewEntityCategory(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            if request.method=="POST":
                category        = request.POST['category']
                description     = request.POST['description']
                now             = datetime.now()

                insert_data     = entity_category(category=category,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-entity-category')
            else:
                return render(request,'users/pages/add_entity_category.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateEntityCategory(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            if request.method=="POST":
                type_id         = request.POST['id']
                category        = request.POST['category']
                description     = request.POST['description']
                now             = datetime.now()

                entity_category.objects.all().filter(id=type_id).update(category=category,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-entity-category')
            else:
                category_id     = request.GET['id']
                category_data   = entity_category.objects.get(id=category_id)
                return render(request,'users/pages/update_entity_category.html',{'category_data'    : category_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def viewEntityCategory(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_read']):    
            category_id     = request.GET['id']
            category_data   = entity_category.objects.get(id=category_id)
            return render(request,'users/pages/view_entity_category.html',{'category_data'    : category_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteEntityCategory(request):
    if request.session.has_key('userId'):

        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            category_id = request.POST['id']
            fromReg     = entity_category.objects.all().filter(id=category_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-entity-category')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-entity-category')
        else:
            raise Http404("Access to this is not permitted")

    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listEntity(request):
         
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']
        
        if (role_permission['entity_read'] or role_permission['entity_write']):
    
        
            entity_types            = entity_type.objects.all()      
            entity_list             = entity_data.objects.all().order_by('-id')
            # for html filter dispaly
            selected_entity_type    = 0
            search_enitity_name     = ''   
            # search filtering
        
            if 'search' in request.POST:
                selected_entity_type     = int(request.POST.get('entity_type')) if request.POST.get('entity_type') else None
                search_enitity_name      = request.POST.get('entity')    
                if selected_entity_type or search_enitity_name:    
                        # we got pk from html post we need to get name to diaplay on popups
                                
                    if selected_entity_type and search_enitity_name:     
                        
                        entity_list             = entity_list.filter(entity_type_id=selected_entity_type,name__istartswith=search_enitity_name).order_by('-id')
                        
                    elif  selected_entity_type:   
                        entity_list             = entity_list.filter(entity_type_id=selected_entity_type).order_by('-id')
                            
                    else:      
                        entity_list             = entity_list.filter(name__istartswith=search_enitity_name).order_by('-id')
                    
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['entity_list']):
                    responce=download(request.session['entity_list'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['entity_list']=json.dumps(list(entity_list.values('name','description',entity_type=F('entity_type_id_id__type'))), cls=DjangoJSONEncoder)
            # page_number = request.GET.get("page",1)

            # paginator = Paginator(entity_list, 10)

            # entity_list = paginator.get_page(page_number)

            write=0
            if role_permission['entity_write']:
                write=1
            return render(request,'users/pages/list_entity.html',{'write':write,'entity_list' : entity_list,'entity_type':entity_types,'selected_entity_name':search_enitity_name,'selected_entity_type':selected_entity_type})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewEntity(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            if request.method=="POST":
                name            = request.POST['name']
                type_id         = request.POST['type_id']
                description     = request.POST['description']
                location_id     = request.POST['location_id']
                gst             = request.POST['gst']
                location_id     = location_data.objects.get(pk=location_id)
                now             = datetime.now()

                get_entity_type = entity_type.objects.get(id=type_id)

                insert_data     = entity_data(name=name,entity_type_id=get_entity_type,description=description,created_at=now,updated_at=now,location=location_id,gst=gst)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-entity')
            else:
                entity_types    = entity_type.objects.all()
                location_list   = location_data.objects.all()
                return render(request,'users/pages/add_entity.html',{'entity_types' : entity_types,'location_list':location_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateEntity(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            if request.method=="POST":
                entity_id       = request.POST['id']
                name            = request.POST['name']
                type_id         = request.POST['type_id']
                description     = request.POST['description']
                now             = datetime.now()
                gst             = request.POST['gst']

                # additional
                location_id     = request.POST['location_id']
                location_id     = location_data.objects.get(pk=location_id)

                get_entity_type = entity_type.objects.get(id=type_id)

                entity_data.objects.all().filter(id=entity_id).update(name=name,entity_type_id=get_entity_type,description=description,updated_at=now,location_id=location_id,gst=gst)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-entity')
            else:
                entity_id       = request.GET['id']
                get_entity_data = entity_data.objects.get(id=entity_id)
                entity_types    = entity_type.objects.all()
                location_list   = location_data.objects.all()

                
                return render(request,'users/pages/update_entity.html',{'entity_data' : get_entity_data,'entity_types':entity_types,'location_list':location_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def viewEntity(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_read']):
                entity_id       = request.GET['id']
                get_entity_data = entity_data.objects.get(id=entity_id)
                entity_types    = entity_type.objects.all()
                
                return render(request,'users/pages/view_entity.html',{'entity_data' : get_entity_data,'entity_types':entity_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteEntity(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['entity_write']):
            entity_id   = request.POST['id']
            fromReg     = entity_data.objects.all().filter(id=entity_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-entity')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-entity')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listBanch(request):
    if request.session.has_key('userId'):
        

        branch_list             = branch_data.objects.all().order_by('-id')

        listEntity              = entity_data.objects.all().order_by('-id')
        selected_enitity        = 0
        search_branch_name      = ''
        

        if 'search' in request.POST: 
            
            selected_enitity        = int(request.POST.get('select_entity'))
            search_branch_name      = request.POST.get('branch','') 
        else:
            selected_enitity        = int(request.GET.get('select_entity',0))
            search_branch_name      = request.GET.get('branch','')    

        if selected_enitity or search_branch_name:    
                # we got pk from html post we need to get name to diaplay on popups
                        
            if selected_enitity and search_branch_name:     
                branch_list             = branch_list.filter(entity_id=selected_enitity,name__istartswith=search_branch_name).order_by('-id')
                    
            elif  selected_enitity:   
                branch_list             = branch_list.filter(entity_id_id=selected_enitity).order_by('-id')
                        
            else:      
                branch_list             = branch_list.filter(name__istartswith=search_branch_name).order_by('-id')
                            
        #Download Section 
        if 'download' in request.POST:
            
            if json.loads(request.session['branch_list']):
                responce=download(request.session['branch_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['branch_list']=json.dumps(list(branch_list.values('name','branch_code','address','city','state','country','pincode',entity=F('entity_id_id__name'))), cls=DjangoJSONEncoder)
        page_number = request.GET.get("page",1)

        paginator = Paginator(branch_list, 10)

        branch_list = paginator.get_page(page_number)
        return render(request,'users/pages/list_branch.html',{'branch_list' : branch_list,'list_entity':listEntity,'selected_enitity':selected_enitity,'search_branch_name':search_branch_name})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def get_entity_gst(request):
    entity_id    = request.POST['entity_id']
    
    entity     = entity_data.objects.get(pk=entity_id)

    gst        = entity.gst
    

    return JsonResponse({'gst': gst})




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def get_branch_details(request):
    branch_id    = request.POST['branch_id']
    
    branch     = branch_data.objects.get(pk=branch_id)

    address=''
    address =str(branch.address)+' '+str(branch.city)

    return JsonResponse({'address': address})



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewBranch(request):
    if request.session.has_key('userId'):
        if request.method=="POST":
            name            = request.POST['name']
            entity_id       = request.POST['entity_id']
            branch_code     = request.POST['branch_code']
            address         = request.POST['address']
            city            = request.POST['city']
            state           = request.POST['states']
            country         = request.POST['country']
            pincode         = request.POST['pincode']
            gst             = request.POST['gst']

            now             = datetime.now()

            get_entity      = entity_data.objects.get(id=entity_id)
            gst_treatment       = request.POST.get('gst_treatment')

                
            gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)

            insert_data     = branch_data(name=name,branch_code=branch_code,entity_id=get_entity,address=address,city=city,state=state,country=country,pincode=pincode,created_at=now,updated_at=now,gst_treatment=gst_treatment,gst=gst)
            insert_data.save()

            messages.success(request, 'Successfully added.')
            return redirect('list-branch')
        else:
            get_entity      = entity_data.objects.all()

            latest_id       = 1 if not branch_data.objects.all().exists() else int(branch_data.objects.latest('id').id) + 1
            get_series      = series_data.objects.get(type="Branch")

            branch_code     = get_series.pre_text+str(latest_id)+get_series.post_text
            gst_treatment_list  = gst_treatment_data.objects.all()

            return render(request,'users/pages/add_branch.html',{'get_entity' : get_entity,'gst_treatment_list':gst_treatment_list,'branch_code':branch_code,'state_list':state_list})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateBranch(request):
    if request.session.has_key('userId'):
        if request.method=="POST":
            branch_id       = request.POST['id']
            entity_id       = request.POST['entity_id']
            name            = request.POST['name']
            branch_code     = request.POST['branch_code']
            address         = request.POST['address']
            city            = request.POST['city']
            state           = request.POST['states']
            country         = request.POST['country']
            pincode         = request.POST['pincode']
            gst             = request.POST['gst']
            now             = datetime.now()
            gst_treatment   = request.POST.get('gst_treatment')
    
            gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)

            get_entity      = entity_data.objects.get(id=entity_id)

            branch_data.objects.all().filter(id=branch_id).update(name=name,branch_code=branch_code,entity_id=get_entity,address=address,city=city,state=state,country=country,pincode=pincode,updated_at=now,gst_treatment=gst_treatment,gst=gst)

            messages.success(request, 'Changes successfully updated.')
            return redirect('list-branch')
        else:
            entity_id       = request.GET['id']
            get_branch_data = branch_data.objects.get(id=entity_id)
            get_entity_data = entity_data.objects.all()
            gst_treatment_list  = gst_treatment_data.objects.all()
            
            return render(request,'users/pages/update_branch.html',{'gst_treatment_list':gst_treatment_list,'entity_data' : get_entity_data,'get_branch_data':get_branch_data,'state_list':state_list})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteBranch(request):
    if request.session.has_key('userId'):
        branch_id   = request.POST['id']
        fromReg     = branch_data.objects.all().filter(id=branch_id)
        fromReg.delete()

        if fromReg.delete():
            messages.success(request, 'Successfully Deleted.')
            return redirect('list-branch')
        else:
            messages.error(request, 'Something went to wrong')
            return redirect('list-branch')
    else:
        return redirect('user-login')




@api_view(['POST'])
def getVoucherSeriesUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        entity_id           = data.get('entity_id')
        branch_id           = data.get('branch_id')
        voucher_type        = data.get('voucher_type')

        list_voucher_series = voucher_series_data.objects.all().filter(voucher_type_id__name=voucher_type,entity_id=entity_id,branch_id=branch_id)
        
        voucher_series      = []
        for series in list_voucher_series:
            voucher_series.append({
                                'name'              : series.name,
                                'voucher_type_id'   : series.voucher_type_id.id,
                                'voucher_type'      : series.voucher_type_id.name,
                                'branch_id'         : series.branch_id.id,
                                'branch_name'       : series.branch_id.name,
                                'financial_year_id' : series.financial_year_id.id,
                                'prefix'            : series.prefix,
                                'postfix'           : series.postfix,
                                'starting_number'   : series.starting_number
                            })
        
        response            =   {
                                    "success"           : True,
                                    "voucher_series"    : voucher_series
                                }
        
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listUserRole(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read'] or role_permission['users_write']):
            get_user_roles  = user_roles.objects.all().exclude(role="Super Admin").order_by('-id')
            searched_role   =''
            if 'search' in request.POST: 
                searched_role    = request.POST.get('role')
                
                if searched_role:      
                    get_user_roles             = get_user_roles.filter(role__istartswith=searched_role).exclude(role="Super Admin").order_by('-id')           

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_user_roles']):
                    responce    = download(request.session['get_user_roles'])
                    return responce
                
            #Session set for query result for excel based on last search    
            request.session['get_user_roles']=json.dumps(list(get_user_roles.values('role','description')), cls=DjangoJSONEncoder)
            write=0
            if role_permission['entity_write']:
                write=1

            return render(request,'users/pages/list_user_roles.html',{'write':write,'get_user_roles' : get_user_roles,'searched_role':searched_role})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewUserRole(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            if request.method=="POST":
                role            = request.POST['role']
                description     = request.POST['description']
                now             = datetime.now()

                insert_data     = user_roles(role=role,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-user-roles')
            else:
                return render(request,'users/pages/add_user_role.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateUserRole(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            if request.method=="POST":
                role_id         = request.POST['id']
                role            = request.POST['role']
                description     = request.POST['description']
                now             = datetime.now()

                user_roles.objects.all().filter(id=role_id).update(role=role,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-user-roles')
            else:
                role_id         = request.GET['id']
                role_data       = user_roles.objects.get(id=role_id)
                
                return render(request,'users/pages/update_user_role.html',{'role_data' : role_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteUserRole(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            role_id     = request.POST['id']
            fromReg     = user_roles.objects.all().filter(id=role_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-user-roles')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-user-roles')
        else:
            raise Http404("Access to this is not permitted")

    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listUserRolePermissions(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read'] or role_permission['users_write']):
                user_id         = request.session.get('userId')
                get_user_data   = user_data.objects.get(id=user_id)
                print(get_user_data.id)
                if not get_user_data.user_role_id:
                    get_user_roles  = user_roles.objects.all().exclude(role="Super Admin").order_by('-id')
                elif get_user_data.user_role_id.client_access:
                    get_user_roles  = user_roles.objects.all().exclude(role="Super Admin").order_by('-id')
                else:
                    get_user_roles  = user_roles.objects.all().filter(client_access=True).order_by('-id')
                
                write=0
                if role_permission['users_write']:
                    write=1
                
                return render(request,'users/pages/list_user_roles_permissions.html',{'write':write,'get_user_roles' : get_user_roles})
        else:
             
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateUserRolePermission(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            if request.method=="POST":
                user_id             = request.session.get('userId')
                user_id             = user_data.objects.get(id=user_id)

                role_id             = request.POST['id']
                user_role_id        = request.POST['role_id']
                user_role_id        = user_roles.objects.get(id=user_role_id)
                
                now                 = datetime.now()

                entity_active       = True if request.POST.get('entity_active') == 'true' else False
                entity_read         = True if request.POST.get('entity_read') == 'true' else False
                entity_write        = True if request.POST.get('entity_write') == 'true' else False
                
                users_active        = True if request.POST.get('users_active') == 'true' else False
                users_read          = True if request.POST.get('users_read') == 'true' else False
                users_write         = True if request.POST.get('users_write') == 'true' else False
                
                customer_active     = True if request.POST.get('customer_active') == 'true' else False
                customers_read      = True if request.POST.get('customers_read') == 'true' else False
                customers_write     = True if request.POST.get('customers_write') == 'true' else False
                
                supplier_active     = True if request.POST.get('supplier_active') == 'true' else False
                supplier_read       = True if request.POST.get('supplier_read') == 'true' else False
                supplier_write      = True if request.POST.get('supplier_write') == 'true' else False

                accounting_active   = True if request.POST.get('accounting_active') == 'true' else False
                accounting_read     = True if request.POST.get('accounting_read') == 'true' else False
                accounting_write    = True if request.POST.get('accounting_write') == 'true' else False

                invendory_active    = True if request.POST.get('invendory_active') == 'true' else False
                invendory_read      = True if request.POST.get('invendory_read') == 'true' else False
                invendory_write     = True if request.POST.get('invendory_write') == 'true' else False

                general_active      = True if request.POST.get('general_active') == 'true' else False
                general_read        = True if request.POST.get('general_read') == 'true' else False
                general_write       = True if request.POST.get('general_write') == 'true' else False

                purchase_active     = True if request.POST.get('purchase_active') == 'true' else False
                purchase_read       = True if request.POST.get('purchase_read') == 'true' else False
                purchase_write      = True if request.POST.get('purchase_write') == 'true' else False

                sales_active        = True if request.POST.get('sales_active') == 'true' else False
                sales_read          = True if request.POST.get('sales_read') == 'true' else False
                sales_write         = True if request.POST.get('sales_write') == 'true' else False

                transactions_active = True if request.POST.get('transactions_active') == 'true' else False
                transactions_read   = True if request.POST.get('transactions_read') == 'true' else False
                transactions_write  = True if request.POST.get('transactions_write') == 'true' else False

                if not role_id:
                    insert_data     = user_role_permission(
                                        user_id                 = user_id,
                                        user_role_id            = user_role_id,
                                        entity_active           = entity_active,
                                        entity_read             = entity_read,
                                        entity_write            = entity_write,
                                        users_active            = users_active,
                                        users_read              = users_read,
                                        users_write             = users_write,
                                        customer_active         = customer_active,
                                        customers_read          = customers_read,
                                        customers_write         = customers_write,
                                        supplier_active         = supplier_active,
                                        supplier_read           = supplier_read,
                                        supplier_write          = supplier_write,
                                        accounting_active       = accounting_active,
                                        accounting_read         = accounting_read,
                                        accounting_write        = accounting_write,
                                        invendory_active        = invendory_active,
                                        invendory_read          = invendory_read,
                                        invendory_write         = invendory_write,
                                        general_active          = general_active,
                                        general_read            = general_read,
                                        general_write           = general_write,
                                        purchase_active         = purchase_active,
                                        purchase_read           = purchase_read,
                                        purchase_write          = purchase_write,
                                        sales_active            = sales_active,
                                        sales_read              = sales_read,
                                        sales_write             = sales_write,
                                        transactions_active     = transactions_active,
                                        transactions_read       = transactions_read,
                                        transactions_write      = transactions_write,
                                        created_at              = now,
                                        updated_at              = now)
                    insert_data.save()

                else:
                    user_role_permission.objects.all().filter(id=role_id).update(
                                            entity_active           = entity_active,
                                            entity_read             = entity_read,
                                            entity_write            = entity_write,
                                            users_active            = users_active,
                                            users_read              = users_read,
                                            users_write             = users_write,
                                            customer_active         = customer_active,
                                            customers_read          = customers_read,
                                            customers_write         = customers_write,
                                            supplier_active         = supplier_active,
                                            supplier_read           = supplier_read,
                                            supplier_write          = supplier_write,
                                            accounting_active       = accounting_active,
                                            accounting_read         = accounting_read,
                                            accounting_write        = accounting_write,
                                            invendory_active        = invendory_active,
                                            invendory_read          = invendory_read,
                                            invendory_write         = invendory_write,
                                            general_active          = general_active,
                                            general_read            = general_read,
                                            general_write           = general_write,
                                            purchase_active         = purchase_active,
                                            purchase_read           = purchase_read,
                                            purchase_write          = purchase_write,
                                            sales_active            = sales_active,
                                            sales_read              = sales_read,
                                            sales_write             = sales_write,
                                            transactions_active     = transactions_active,
                                            transactions_read       = transactions_read,
                                            transactions_write      = transactions_write,
                                            updated_at              = now
                                        )

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-user-role-permissions')
            else:
                role_id         = request.GET['id']
                user_id         = request.session.get('userId')
                role_data       = []
                check_exist     = user_role_permission.objects.filter(user_role_id=role_id,user_id=user_id).exists()

                if check_exist:
                    role_data   = user_role_permission.objects.get(user_role_id=role_id,user_id=user_id)
                
                return render(request,'users/pages/update_user_role_permission.html',{'role_data' : role_data,'role_id':role_id})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listUsers(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read'] or role_permission['users_write']):
            user_id             = request.session.get('userId')
            
            user_list           = user_data.objects.all().exclude(id=user_id).order_by('-id')
            listEntity          = entity_data.objects.all()
            list_role           = user_roles.objects.all()
            branch_list         = branch_data.objects.all()
            selected_branch     = 0
            selected_role       = 0
            selected_enitity    = 0
            search_user         = ''
            
            

            if 'search' in request.POST: 
                selected_enitity        = int(request.POST.get('select_entity'))
                search_user             = request.POST.get('search_user') 
                selected_role           = int(request.POST.get('selected_role')) 
                selected_branch         = int(request.POST.get('selected_branch'))
            else:
                selected_enitity        = int(request.GET.get('select_entity',0))
                search_user             = request.GET.get('search_user','') 
                selected_role           = int(request.GET.get('selected_role',0)) 
                selected_branch         = int(request.GET.get('selected_branch',0))


                
            if selected_enitity or search_user or selected_role or selected_branch:    
                
                        
                if selected_enitity and search_user:     
                    user_list             = user_list.filter(entity_id=selected_enitity,name__istartswith=search_user).order_by('-id')
                        
                elif  selected_enitity:   
                    user_list             = user_list.filter(entity_id=selected_enitity).order_by('-id')
                        
                else:      
                    user_list             = user_list.filter(name__istartswith=search_user).order_by('-id')

                
                if selected_role:
                    user_list               =user_list.filter(user_role_id__id=selected_role)

                if selected_branch:
                    user_list               =user_list.filter(branch_id=selected_branch)

                

                    
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['user_list']):
                    responce    = download(request.session['user_list'])
                    return responce
                
                
            page_number = request.GET.get("page",1)

            paginator = Paginator(user_list, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['entity_write']:
                write=1
            
            return render(request,'users/pages/list_user.html',{'write':write,'user_list' : get_data,'branch_list':branch_list,'selected_branch':selected_branch,'list_entity':listEntity,'selected_enitity':selected_enitity,'search_user':search_user,'list_role':list_role,'selected_role':selected_role})  
        else:
            raise Http404("Access to this is not permitted")
    
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewUser(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            if request.method=="POST":
                
                name                = request.POST['name']
                email               = request.POST['email']
                user_role_id        = request.POST['user_role_id']
                get_entity_ids      = request.POST.getlist('entity_ids[]')
                entity_ids          = ','.join(get_entity_ids)
                get_branch_ids      = request.POST.getlist('branch_ids[]')
                branch_ids          = ','.join(get_branch_ids)
                image_file          = imgForm(request.POST,request.FILES)
                now                 = datetime.now()

                get_user            = user_data.objects.all().filter(email=email)
                if get_user:
                    messages.error(request, 'Email already exist')
                    return redirect('list-user')

                # get_branch          = branch_data.objects.get(id=branch_id)
                # get_entity          = get_branch.entity_id
                get_user_role       = user_roles.objects.get(id=user_role_id)

                characters          = string.ascii_letters + string.digits
                random_string       = ''.join(secrets.choice(characters) for _ in range(8))

                password            = random_string

                hash_password       = make_password(password)
                profile_image       = None

                if image_file.is_valid():
                    profile_image   = image_file.cleaned_data['image']

                insert_data         = user_data(name=name,email=email,branch_id=branch_ids,entity_id=entity_ids,user_role_id=get_user_role,password=hash_password,profile_image=profile_image,created_at=now,updated_at=now)
                insert_data.save()

                ### send email
                template            = 'email/password.html'
                send_email          = sendEmail(email,template,random_string)

                messages.success(request, 'Successfully added.')
                return redirect('list-user')
            else:
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all()
                get_user_roles      = user_roles.objects.all().exclude(role="Super Admin")
                return render(request,'users/pages/add_user.html',{'list_branch' : list_branch,'get_user_roles':get_user_roles,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def getEntityBranch(request):
    entity_ids      = request.POST.getlist('entity_id[]')

    all_branches    = []
    for entity_id in entity_ids:
        get_branchs = branch_data.objects.filter(entity_id=entity_id)

        for branch in get_branchs:
            all_branches.append({
                    'id'    : branch.id,
                    'name'  : branch.name
                })

    print('-----------------')
    print(all_branches)
    return JsonResponse({'branches': all_branches})



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def getSingleEntityBranch(request):
    entity_id       = request.POST['entity_id']
    print("############")
    
    get_branchs     = branch_data.objects.filter(entity_id=entity_id)

    all_branches    = []

    for branch in get_branchs:
        all_branches.append({
                'id'    : branch.id,
                'name'  : branch.name
            })
    print("heyyy")
    print(all_branches)
    
    return JsonResponse({'branches': all_branches})



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateUser(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            if request.method=="POST":
                user_id             = request.POST['id']
                name                = request.POST['name']
                email               = request.POST['email']
                user_role_id        = request.POST['user_role_id']
                get_entity_ids      = request.POST.getlist('entity_ids[]')
                entity_ids          = ','.join(get_entity_ids)
                get_branch_ids      = request.POST.getlist('branch_ids[]')
                branch_ids          = ','.join(get_branch_ids)

                active              = True if request.POST.get('active') == 'true' else False
                image_file          = imgForm(request.POST,request.FILES)
                now                 = datetime.now()

                # get_branch          = branch_data.objects.get(id=branch_id)
                # get_entity          = get_branch.entity_id
                get_user_role       = user_roles.objects.get(id=user_role_id)

                if image_file.is_valid():
                    image                   = image_file.cleaned_data['image']
                    mymodel                 = user_data.objects.get(id=user_id)
                    mymodel.profile_image   = image
                    mymodel.save()

                user_data.objects.all().filter(id=user_id).update(name=name,email=email,branch_id=branch_ids,entity_id=entity_ids,user_role_id=get_user_role,active=active,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-user')
            else:
                user_id             = request.GET['id']
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all()
                get_user_roles      = user_roles.objects.all().exclude(role="Super Admin")

                get_user_data       = user_data.objects.get(id=user_id)

                get_entity_ids      = get_user_data.entity_id.split(',')
                get_branch_ids      = get_user_data.branch_id.split(',')

                all_entities        = []
                for entity in list_entity:
                    selected        = ''
                    if  str(entity.id) in get_entity_ids:
                        selected    = 'selected'
                    
                    all_entities.append({
                        'id'        : entity.id,
                        'name'      : entity.name,
                        'selected'  : selected
                    })


                all_branches        = []
                for branch in list_branch:
                    selected        = ''
                    if  str(branch.id) in get_branch_ids:
                        selected    = 'selected'
                    
                    all_branches.append({
                        'id'        : branch.id,
                        'name'      : branch.name,
                        'selected'  : selected
                    })

                return render(request,'users/pages/update_user.html',{'list_branch' : all_branches,'get_user_roles':get_user_roles,'get_user_data':get_user_data,'list_entity':all_entities})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteUser(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            user_id     = request.POST['id']
            fromReg     = user_data.objects.all().filter(id=user_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-user')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-user')
        else:
            raise Http404("Access to this is not permitted")
   
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def setDefaultUserEntity(request):
    entity_id   = request.POST['entity_id']
    entity_id   = entity_data.objects.get(id=entity_id)
    user_id     = request.session.get('userId')

    update      = user_data.objects.filter(id=user_id).update(default_entity_id=entity_id)

    return JsonResponse({'success': True})



def sendEmail(email,template,password):
    html_template   = template
    html_message    = render_to_string(html_template,  {'password': password})
    subject         = 'Welcome to Spree'
    email_from      = settings.EMAIL_HOST_USER
    recipient_list  = [email]
    message         = EmailMessage(subject, html_message, email_from, recipient_list)
    message.content_subtype = 'html'
    message.send()

    return



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listAccountingGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_read'] or role_permission['accounting_write']):    
            
            get_groups              = accounting_group_data.objects.all().order_by('-id')
            list_branch             = branch_data.objects.all().order_by('-id')
            accounts_list           = accounting_group_data.objects.all().order_by('id')
            selected_branch         = 0
            search_name             = ''
            selected_group          = 0

            if 'search' in request.POST:
                selected_branch         = int(request.POST.get('select_branch'))
                search_name             = request.POST.get('name')
                selected_group          = int(request.POST.get('select_group'))  
            else:
                selected_branch         = int(request.GET.get('select_branch',0))
                search_name             = request.GET.get('name','')
                selected_group          = int(request.GET.get('select_group',0))

            if selected_branch or selected_group or search_name:    

                if selected_branch and search_name and selected_group:     
                    accounts_list             = accounts_list.filter(branch_id=selected_branch,name__istartswith=search_name,under_group=selected_group).order_by('-id')
                        
                elif  selected_branch and search_name:   
                    accounts_list             = accounts_list.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                    
                elif  selected_branch and selected_group:   
                    accounts_list             = accounts_list.filter(branch_id=selected_branch,under_group=selected_group).order_by('-id')
                        
                elif  search_name and selected_group:   
                    accounts_list             = accounts_list.filter(name__istartswith=search_name,under_group=selected_group).order_by('-id')
                    
                elif  search_name:   
                    accounts_list             = accounts_list.filter(name__istartswith=search_name).order_by('-id')
                    
                elif  selected_group:   
                    accounts_list             = accounts_list.filter(under_group=selected_group).order_by('-id')
                    
                else:      
                    accounts_list             = accounts_list.filter(branch_id=selected_branch).order_by('-id')
                                
                #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['accounts_list']):
                    responce=download(request.session['accounts_list'])
                    return responce
                    
                #Session set for query result for excel based on last search   
                # 
                
            request.session['accounts_list']=json.dumps(list(accounts_list.annotate(
                under_group_id_name=Case(
                    When(under_group__isnull=True, then=Value(None)),
                    default=F('under_group__name'),
                    output_field=CharField()  # Adjust the field type accordingly
                )
            ).values('name', 'description', 'nature', 'affect_gross_profit', 'under_group_id_name')), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(accounts_list, 10)

            accounts_list = paginator.get_page(page_number)
            write=0
            if role_permission['accounting_write']:
                write=1

            return render(request,'users/pages/list_accounting_group.html',{'write':write,'get_groups' : get_groups,'accounts_list':accounts_list,'list_branch':list_branch,'selected_branch':selected_branch,'search_name':search_name,'selected_group':selected_group})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')





@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewAccountingGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):

            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST.get('branch_id')
                name                = request.POST['name']
                under_group         = None if not request.POST.get('group_id') else accounting_group_data.objects.get(id=request.POST.get('group_id'))
                nature              = request.POST.get('nature')
                description         = request.POST.get('description')
                affect_gross_profit = request.POST.get('affect_gross_profit')
                now                 = datetime.now()

                branch_id           = None if not branch_id else branch_data.objects.get(id=branch_id)
                

                insert_data         = accounting_group_data(entity_id=entity_id,branch_id=branch_id,name=name,under_group=under_group,nature=nature,description=description,affect_gross_profit=affect_gross_profit,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-accounting-group')
            else:
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                list_all_group  = accounting_group_data.objects.all()

                return render(request,'users/pages/add_accounting_group.html',{'list_entity':list_entity,'list_branch':list_branch,'list_all_group':list_all_group})
        else:
            raise Http404("Access to this is not permitted") 
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateAccountingGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                group_id            = request.POST['id']
                branch_id           = request.POST['branch_id']
                branch_id           =   branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                under_group         = None if not request.POST.get('group_id') else accounting_group_data.objects.get(id=request.POST.get('group_id'))
                nature              = request.POST.get('nature')
                description         = request.POST.get('description')
                affect_gross_profit = request.POST.get('affect_gross_profit')
                now                 = datetime.now()
            
                accounting_group_data.objects.filter(id=group_id).update(entity_id=entity_id,branch_id=branch_id,name=name,under_group=under_group,nature=nature,description=description,affect_gross_profit=affect_gross_profit,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-accounting-group')
            else:
                group_id            = request.GET['id']
                group_data          = accounting_group_data.objects.get(id=group_id)
                print(group_data.entity_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=group_data.entity_id)
                list_all_group      = accounting_group_data.objects.all().exclude(id=group_id)
                
                return render(request,'users/pages/update_accounting_group.html',{'group_data' : group_data,'list_entity':list_entity,'list_branch':list_branch,'list_all_group':list_all_group})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteAccountingGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):    
            group_id    = request.POST['id']
            fromReg     = accounting_group_data.objects.all().filter(id=group_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-accounting-group')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-accounting-group')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listAccountingLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_read'] or role_permission['accounting_write']):    
            listledger              = accounting_ledger_data.objects.all().order_by('-id')       
            list_account_group      = accounting_group_data.objects.all().order_by('-id')
            selected_acc_group      = 0
            search_name             = ''
            start_date              = ''
            end_date                = ''
            

            if 'search' in request.POST: 
                selected_acc_group      = int(request.POST.get('select_acc_group'))
                search_name             = request.POST.get('name') 
                end_date                = request.POST.get('end')
                start_date              = request.POST.get('start') 
            else:
                
                selected_acc_group      = int(request.GET.get('select_acc_group',0))
                search_name             = request.GET.get('name','') 
                end_date                = request.GET.get('end','')
                start_date              = request.GET.get('start','')  

            if selected_acc_group or search_name or start_date or end_date:    
                    # we got pk from html post we need to get name to diaplay on popups
                            
                if selected_acc_group and search_name:     
                    listledger             = listledger.filter(accounting_group_id=selected_acc_group,name__istartswith=search_name).order_by('-id')
                        
                elif  selected_acc_group:   
                    listledger             = listledger.filter(accounting_group_id=selected_acc_group).order_by('-id')
                    
                else:      
                    listledger             = listledger.filter(name__istartswith=search_name).order_by('-id')

                if  start_date and end_date:   
                    listledger                = listledger.filter(created_at__range=(start_date,end_date))
                        
                elif start_date:   
                    listledger                = listledger.filter(created_at__gte=start_date)

                elif end_date:
                    listledger                = listledger.filter(created_at__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['listledger']):
                    responce    = download(request.session['listledger'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['listledger']   = json.dumps(list(listledger.values('name','accounting_group_id','opening_balance','entry_type','bill_by_bill',entity=F('accounting_group_id_id__name'))), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(listledger, 10)

            listledger = paginator.get_page(page_number)
            write=0
            if role_permission['accounting_write']:
                write=1

            return render(request,'users/pages/list_accounting_ledger.html',{'write':write,'listledger' : listledger,'list_account_group':list_account_group,'search_name':search_name,'selected_acc_group':selected_acc_group,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")

    else:
        return redirect('user-login')




# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
# def addNewAccountingLedger(request):
#     if request.session.has_key('userId'):
#         if request.method=="POST":
#             name                = request.POST['name']
#             accounting_group_id = accounting_group_data.objects.get(id=request.POST.get('accounting_group_id'))
#             opening_balance     = 0.00 if not request.POST.get('opening_balance') else request.POST.get('opening_balance')
#             entry_type          = request.POST.get('entry_type')
#             bill_by_bill        = request.POST.get('bill_by_bill')
#             now                 = datetime.now()

#             insert_data         = accounting_ledger_data(name=name,accounting_group_id=accounting_group_id,opening_balance=opening_balance,entry_type=entry_type,bill_by_bill=bill_by_bill,created_at=now,updated_at=now)
#             insert_data.save()

#             messages.success(request, 'Successfully added.')
#             return redirect('list-accounting-ledger')
#         else:
#             list_all_group  = accounting_group_data.objects.all()

#             return render(request,'users/pages/add_accounting_ledger.html',{'list_all_group':list_all_group})
#     else:
#         return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
# def updateAccountingLedger(request):
#     if request.session.has_key('userId'):
#         if request.method=="POST":
#             get_id              = request.POST['id']
#             name                = request.POST['name']
#             accounting_group_id = accounting_group_data.objects.get(id=request.POST.get('accounting_group_id'))
#             opening_balance     = request.POST.get('opening_balance')
#             entry_type          = request.POST.get('entry_type')
#             bill_by_bill        = request.POST.get('bill_by_bill')
#             now                 = datetime.now()

#             accounting_ledger_data.objects.all().filter(id=get_id).update(name=name,accounting_group_id=accounting_group_id,opening_balance=opening_balance,entry_type=entry_type,bill_by_bill=bill_by_bill,updated_at=now)

#             messages.success(request, 'Changes successfully updated.')
#             return redirect('list-accounting-ledger')
#         else:
#             get_id          = request.GET['id']
#             get_data        = accounting_ledger_data.objects.get(id=get_id)

#             list_all_group  = accounting_group_data.objects.all()
            
#             return render(request,'users/pages/update_accounting_ledger.html',{'get_data' : get_data,'list_all_group':list_all_group})
#     else:
#         return redirect('user-login')

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewAccountingLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):    
            if request.method=="POST":
                
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                customer_type_id    = request.POST.get('customer_type_id')
                if customer_type_id:
                    customer_type_id    = customer_type.objects.get(id=customer_type_id)
                supplier_type_id    = request.POST.get('supplier_type_id')
                if supplier_type_id:
                    supplier_type_id    = supplier_type.objects.get(id=supplier_type_id)

                name                = request.POST['name']
                phone               = request.POST.get('phone')
                email               = request.POST.get('email')
                location_id         = request.POST.get('location_id')
                if location_id:
                    location_id         = location_data.objects.get(id=location_id)
                opening_balance     = request.POST.get('opening_balance')
                entry_type          = request.POST.get('entry_type')
                bill_by_bill        = request.POST.get('bill_by_bill')
                credit_period       = request.POST.get('credit_period')
                credit_limit        = request.POST.get('credit_limit')
                address             = request.POST.get('address')
                city                = request.POST.get('city')
                state               = request.POST.get('state')
                country             = request.POST.get('country')
                pincode             = request.POST.get('pincode')
                account_number      = request.POST.get('account_number')
                branch_name         = request.POST.get('branch_name')
                branch_code         = request.POST.get('branch_code')
                cin                 = request.POST.get('cin')
                pan                 = request.POST.get('pan')
                gst                 = request.POST.get('gst')
                active              = True if request.POST.get('active') == 'true' else False
                accounting_group_id = accounting_group_data.objects.get(id=request.POST.get('accounting_group_id'))
                accounting_group    = request.POST.get('accounting_group')
                print(accounting_group)
                insert_customer_data= None
                now                 = datetime.now()
                print(accounting_group)
                # accounting_group    = "Sundry Debtors"
                # additional
                states              = request.POST.get('states')
                pricing_level       = request.POST.get('pricing_level')
                if pricing_level:
                    pricing_level   = pricing_level_data.objects.get(pk=pricing_level)
                gst_treatment       = request.POST.get('gst_treatment')
                is_default          =  request.POST.get('default')
                if is_default:
                    is_default      = 1

                else:
                    is_default              = 0
                additional_expense          = request.POST.get('additional')
                if additional_expense:
                    additional_expense      = 1
                else:
                    additional_expense      = 0

                

                
                gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)

                if(accounting_group == 'Sundry Debtors'):
                    latest_id           = 1 if not customer_data.objects.all().exists() else customer_data.objects.latest('id').id
                    get_series          = series_data.objects.get(type="Customer")

                    customer_code       = get_series.pre_text+str(latest_id+1)+get_series.post_text

                    

                    insert_customer_data    = customer_data(
                                                entity_id           = entity_id,
                                                branch_id           = branch_id,
                                                customer_type_id    = customer_type_id,
                                                name                = name,
                                                phone               = phone,
                                                email               = email,
                                                customer_code       = customer_code,
                                                location_id         = location_id,
                                                opening_balance     = opening_balance,
                                                entry_type          = entry_type,
                                                bill_by_bill        = bill_by_bill,
                                                credit_period       = credit_period,
                                                credit_limit        = credit_limit,
                                                address             = address,
                                                city                = city,
                                                state               = state,
                                                country             = country,
                                                pincode             = pincode,
                                                account_number      = account_number,
                                                branch_name         = branch_name,
                                                branch_code         = branch_code,
                                                cin                 = cin,
                                                pan                 = pan,
                                                gst                 = gst,
                                                active              = active,
                                                created_at          = now,
                                                updated_at          = now,
                                                # additional
                                                state_code          = states,
                                                gst_treatment       =gst_treatment,
                                            )
                    insert_customer_data.save()
                    insert_data         = accounting_ledger_data(entity_id = entity_id,additional_expense=additional_expense,is_default= is_default,branch_id= branch_id,pricing_level=pricing_level,credit_limit=credit_limit,credit_period=credit_period,name=name,customer_id=insert_customer_data,accounting_group_id=accounting_group_id,opening_balance=opening_balance,entry_type='Dr',created_at=now,updated_at=now)
                    insert_data.save()
                if(accounting_group == 'Sundry Creditors'):
                    latest_id           = 1 if not supplier_data.objects.all().exists() else supplier_data.objects.latest('id').id
                    get_series          = series_data.objects.get(type="Supplier")

                    supplier_code       = get_series.pre_text+str(latest_id+1)+get_series.post_text

                    insert_supplier_data    = supplier_data(
                                                entity_id           = entity_id,
                                                branch_id           = branch_id,
                                                supplier_type_id    = supplier_type_id,
                                                name                = name,
                                                phone               = phone,
                                                email               = email,
                                                supplier_code       = supplier_code,
                                                opening_balance     = opening_balance,
                                                entry_type          = entry_type,
                                                bill_by_bill        = bill_by_bill,
                                                credit_period       = credit_period,
                                                credit_limit        = credit_limit,
                                                address             = address,
                                                city                = city,
                                                state               = state,
                                                country             = country,
                                                pincode             = pincode,
                                                account_number      = account_number,
                                                branch_name         = branch_name,
                                                branch_code         = branch_code,
                                                tin                 = cin,
                                                pan                 = pan,
                                                cst                 = gst,
                                                active              = active,
                                                created_at          = now,
                                                updated_at          = now,
                                                # additional
                                                state_code          = states,
                                                gst_treatment       =gst_treatment,

                                            )
                    insert_supplier_data.save()

                    # accounting_group_id = accounting_group_data.objects.get(name="Sundry Deptor")
                    insert_data         = accounting_ledger_data(entity_id = entity_id,additional_expense=additional_expense,is_default= is_default,pricing_level=pricing_level,branch_id= branch_id,credit_limit=credit_limit,credit_period=credit_period,name=name,supplier_id=insert_supplier_data,accounting_group_id=accounting_group_id,opening_balance=opening_balance,entry_type='Cr',created_at=now,updated_at=now)
                    insert_data.save()
                else:
                    insert_data         = accounting_ledger_data(entity_id = entity_id,additional_expense=additional_expense,is_default= is_default,branch_id= branch_id,pricing_level=pricing_level,name=name,accounting_group_id=accounting_group_id,created_at=now,updated_at=now)
                    insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-accounting-ledger')
            else:
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    if list_branch:
                        list_branch_ids     = list_branch.values_list('id', flat=True)
                        list_pricing_level  =  pricing_level_data.objects.filter(branch_id__in=list_branch_ids)
                else:
                    list_branch         = branch_data.objects.all()
                    list_pricing_level  = pricing_level_data.objects.all()


                list_customer_type  = customer_type.objects.all()
                list_location       = location_data.objects.all()

                # latest_id           = 1 if not customer_data.objects.all().exists() else customer_data.objects.latest('id').id
                # get_series          = series_data.objects.get(type="Customer")

                # customer_code       = get_series.pre_text+str(latest_id)+get_series.post_text

                list_all_group      = accounting_group_data.objects.all()

                # additional
                list_supplier_type  = supplier_type.objects.all()

                # latest_id           = 1 if not supplier_data.objects.all().exists() else supplier_data.objects.latest('id').id
                # get_series          = series_data.objects.get(type="Supplier")
                gst_treatment_list  = gst_treatment_data.objects.all()

                return render(request,'users/pages/add_accounting_ledger.html',{'gst_treatment_list':gst_treatment_list,'list_pricing_level':list_pricing_level,'list_all_group':list_all_group,'list_entity':list_entity,'list_branch':list_branch,'list_customer_type':list_customer_type,'list_location':list_location,'state_list':state_list,'list_supplier_type':list_supplier_type})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateAccountingLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                customer_type_id    = request.POST.get('customer_type_id')
                if customer_type_id:
                    customer_type_id    = customer_type.objects.get(id=customer_type_id)

                supplier_type_id    = request.POST.get('supplier_type_id')
                if supplier_type_id:
                    supplier_type_id    = supplier_type.objects.get(id=supplier_type_id)
                    print(supplier_type_id)
                
                name                = request.POST['name']
                phone               = request.POST.get('phone')
                email               = request.POST.get('email')
                customer_code       = request.POST.get('customer_code')
                location_id         = request.POST.get('location_id')
                if location_id:
                    location_id         = location_data.objects.get(id=location_id)
                opening_balance     = request.POST.get('opening_balance')
                entry_type          = request.POST.get('entry_type')
                bill_by_bill        = request.POST.get('bill_by_bill')
                credit_period       = request.POST.get('credit_period')
                credit_limit        = request.POST.get('credit_limit')
                address             = request.POST.get('address')
                city                = request.POST.get('city')
                state               = request.POST.get('state')
                country             = request.POST.get('country')
                pincode             = request.POST.get('pincode')
                account_number      = request.POST.get('account_number')
                branch_name         = request.POST.get('branch_name')
                branch_code         = request.POST.get('branch_code')
                cin                 = request.POST.get('cin')
                pan                 = request.POST.get('pan')
                gst                 = request.POST.get('gst')
                active              = True if request.POST.get('active') == 'true' else False
                accounting_group_id = accounting_group_data.objects.get(id=request.POST.get('accounting_group_id'))
                accounting_ledger   = accounting_ledger_data.objects.get(id=get_id)
                customer_id         = None
                supplier_id         = None
                
                if accounting_ledger.customer_id:
                    customer_id         = accounting_ledger.customer_id.id
                elif accounting_ledger.supplier_id:
                    supplier_id         = accounting_ledger.supplier_id.id
                

                now                 = datetime.now()
                # additional
                states              = request.POST.get('states')
                pricing_level       = request.POST.get('pricing_level')
                if pricing_level:
                    pricing_level   = pricing_level_data.objects.get(pk=pricing_level)
                
                gst_treatment       = request.POST.get('gst_treatment')
                gst_treatment       = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)
                is_default          =  request.POST.get('default')
                if is_default:
                    is_default      = 1
                else:
                    is_default      =   0

                additional_expense          = request.POST.get('additional')
                if additional_expense:
                    additional_expense      = 1
                else:
                    additional_expense      = 0
                
                if(customer_id):
                    update_data     = customer_data.objects.all().filter(id=customer_id).update(
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        customer_type_id    = customer_type_id,
                                        name                = name,
                                        phone               = phone,
                                        email               = email,
                                        customer_code       = customer_code,
                                        location_id         = location_id,
                                        opening_balance     = opening_balance,
                                        entry_type          = entry_type,
                                        bill_by_bill        = bill_by_bill,
                                        credit_period       = credit_period,
                                        credit_limit        = credit_limit,
                                        address             = address,
                                        city                = city,
                                        state               = state,
                                        country             = country,
                                        pincode             = pincode,
                                        account_number      = account_number,
                                        branch_name         = branch_name,
                                        branch_code         = branch_code,
                                        cin                 = cin,
                                        pan                 = pan,
                                        gst                 = gst,
                                        active              = active,
                                        created_at          = now,
                                        updated_at          = now,
                                        # additional
                                        state_code          = states,
                                        gst_treatment       =gst_treatment
                                    )

                elif supplier_id:
                    update_data     = supplier_data.objects.all().filter(id=supplier_id).update(
                                                entity_id           = entity_id,
                                                branch_id           = branch_id,
                                                supplier_type_id    = supplier_type_id,
                                                name                = name,
                                                phone               = phone,
                                                email               = email,
                                                opening_balance     = opening_balance,
                                                entry_type          = entry_type,
                                                bill_by_bill        = bill_by_bill,
                                                credit_period       = credit_period,
                                                credit_limit        = credit_limit,
                                                address             = address,
                                                city                = city,
                                                state               = state,
                                                country             = country,
                                                pincode             = pincode,
                                                account_number      = account_number,
                                                branch_name         = branch_name,
                                                branch_code         = branch_code,
                                                tin                 = cin,
                                                pan                 = pan,
                                                cst                 = gst,
                                                active              = active,
                                                created_at          = now,
                                                updated_at          = now,
                                                # additional
                                                state_code          = states,
                                                gst_treatment       =gst_treatment
                                            )

                accounting_ledger_data.objects.all().filter(id=get_id).update(entity_id = entity_id,additional_expense=additional_expense,is_default= is_default,pricing_level=pricing_level,branch_id= branch_id,credit_limit=credit_limit,credit_period=credit_period,name=name,accounting_group_id=accounting_group_id,opening_balance=opening_balance,entry_type=entry_type,bill_by_bill=bill_by_bill,updated_at=now)


                messages.success(request, 'Changes successfully updated.')
                return redirect('list-accounting-ledger')
            else:
                get_id              = request.GET['id']
                get_data            = accounting_ledger_data.objects.get(id=get_id)
                customer_get_data   = None
                supplier_get_data   = None
                list_branch         = branch_data.objects.all()
                commondata          = None
                if get_data.customer_id:
                    customer_get_data   = customer_data.objects.get(id=get_data.customer_id.id)
                    list_branch         = branch_data.objects.filter(entity_id=get_data.customer_id.entity_id)
                    commondata          = customer_get_data
                
                if get_data.supplier_id:
                    supplier_get_data   = supplier_data.objects.get(id=get_data.supplier_id.id)
                    list_branch         = branch_data.objects.filter(entity_id=get_data.supplier_id.entity_id)
                    commondata          = supplier_get_data
                


                list_entity         = entity_data.objects.all()
                list_customer_type      = customer_type.objects.all()
                list_supplier_type      = supplier_type.objects.all()

                list_location           = location_data.objects.all()

                list_all_group          = accounting_group_data.objects.all()

                # additional
                if list_branch:
                    list_pricing_level  =  pricing_level_data.objects.filter(branch_id=get_data.branch_id)
                
                gst_treatment_list  = gst_treatment_data.objects.all()

                return render(request,'users/pages/update_accounting_ledger.html',{'list_pricing_level':list_pricing_level,'gst_treatment_list':gst_treatment_list,'commondata':commondata,'supplier_get_data':supplier_get_data,'customer_get_data':customer_get_data,'list_supplier_type':list_supplier_type,'list_entity':list_entity,'list_all_group':list_all_group,'get_data' : get_data,'list_branch':list_branch,'list_customer_type':list_customer_type,'list_location':list_location,'state_list':state_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteAccountingLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):
            get_id      = request.POST['id']
            fromReg     = accounting_ledger_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-accounting-ledger')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-accounting-ledger')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listFinancialYear(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_read'] or role_permission['accounting_write']):
            get_data    = financial_year_data.objects.filter(active=1).order_by('-id')
            branch_list = branch_data.objects.all().order_by('-id')

            selected_branch =0
            selected_status =1
            

            if 'search' in request.POST: 
                selected_branch    = int(request.POST.get('selected_branch'))
                selected_status      = int(request.POST.get('selected_status'))
                
                                
                if selected_branch:     
                    get_data             = financial_year_data.objects.filter(branch_id=selected_branch,active=selected_status).order_by('-id')
                                
                else:      
                    get_data             = financial_year_data.objects.filter(active=selected_status).order_by('-id')
                                    
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('branch_id_id__name','from_date','to_date','active')), cls=DjangoJSONEncoder)
            write=0
            if role_permission['accounting_write']:
                write=1
            
            return render(request,'users/pages/list_financial_year.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'selected_status':selected_status,'branch_list':branch_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewFinancialYear(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                from_date           = request.POST['from_date']
                to_date             = request.POST['to_date']
                now                 = datetime.now()

                branch_id           = branch_data.objects.get(id=branch_id)
                

                insert_data         = financial_year_data(entity_id= entity_id,branch_id=branch_id,from_date=from_date,to_date=to_date,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-financial-year')
            else:
                list_branch     = branch_data.objects.all()
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()
                return render(request,'users/pages/add_financial_year.html',{'list_entity':list_entity,'list_branch':list_branch})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateFinancialYear(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):    
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                get_id              = request.POST['id']
                branch_id           = request.POST['branch_id']
                from_date           = request.POST['from_date']
                to_date             = request.POST['to_date']
                active              = True if request.POST.get('active') == 'true' else False
                now                 = datetime.now()

                branch_id           = branch_data.objects.get(id=branch_id)
                financial_year_data.objects.all().filter(id=get_id).update(entity_id=entity_id,branch_id=branch_id,from_date=from_date,to_date=to_date,active=active,updated_at=now)

                if active:
                    financial_year_data.objects.all().filter(branch_id=branch_id.id).exclude(id=get_id).update(active=False,updated_at=now)
            
                messages.success(request, 'Changes successfully updated.')
                return redirect('list-financial-year')
            else:
                get_id          = request.GET['id']
                get_data        = financial_year_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                print(list_branch)
                
                return render(request,'users/pages/update_financial_year.html',{'get_data' : get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteFinancialYear(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_write']):
            get_id      = request.POST['id']
            fromReg     = financial_year_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-financial-year')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-financial-year')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read'] or role_permission['users_write']):    
            get_data            = series_data.objects.all().order_by('-id')
            searched_series     =''
            if 'search' in request.POST: 
                searched_series    = request.POST.get('series')
                
                if searched_series:      
                    get_data             = get_data.filter(type__istartswith=searched_series).order_by('-id')           

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('type','pre_text','post_text')), cls=DjangoJSONEncoder)
            write=0
            if role_permission['entity_write']:
                write=1

            return render(request,'users/pages/list_series.html',{'write':write,'get_data' : get_data,'searched_series':searched_series})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):    
            if request.method=="POST":
                type                = request.POST['type']
                pre_text            = request.POST['pre_text']
                post_text           = request.POST['post_text']
                now                 = datetime.now()

                insert_data         = series_data(type=type,pre_text=pre_text,post_text=post_text,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-series')
            else:
                return render(request,'users/pages/add_series.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):    
            if request.method=="POST":
                get_id              = request.POST['id']
                pre_text            = request.POST['pre_text']
                post_text           = request.POST['post_text']
                now                 = datetime.now()

                series_data.objects.all().filter(id=get_id).update(pre_text=pre_text,post_text=post_text,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-series')
            else:
                get_id          = request.GET['id']
                get_data        = series_data.objects.get(id=get_id)

                return render(request,'users/pages/update_series.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_write']):
            get_id      = request.POST['id']
            fromReg     = series_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-series')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-series')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listCustomerType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_read'] or role_permission['customers_write']):
            customer_type_list  = customer_type.objects.all().order_by('-id')
            searched_name   = ''
            

            if 'search' in request.POST: 
                searched_name    = request.POST.get('searched_name')
                
                
                if searched_name:   

                    if searched_name:

                        customer_type_list             = customer_type_list.filter(type__istartswith=searched_name).order_by('-id')

                    
                    

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
            write=0
            if role_permission['customers_write']:
                write=1
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(customer_type_list.values('type','description')), cls=DjangoJSONEncoder)

            return render(request,'users/pages/list_customer_type.html',{'write':write,'customer_type_list' : customer_type_list,'searched_name':searched_name})
    
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewCustomerType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_write']):
            if request.method=="POST":
                type            = request.POST['type']
                description     = request.POST['description']
                now             = datetime.now()

                insert_data     = customer_type(type=type,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-customer-type')
            else:
                return render(request,'users/pages/add_customer_type.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateCustomerType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_write']):
            if request.method=="POST":
                type_id         = request.POST['id']
                type            = request.POST['type']
                description     = request.POST['description']
                now             = datetime.now()

                customer_type.objects.all().filter(id=type_id).update(type=type,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-customer-type')
            else:
                type_id         = request.GET['id']
                type_data       = customer_type.objects.get(id=type_id)
                
                return render(request,'users/pages/update_customer_type.html',{'type_data' : type_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteCustomerType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_write']):
        
            type_id     = request.POST['id']
            fromReg     = customer_type.objects.all().filter(id=type_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-customer-type')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-customer-type')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listLocation(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read'] or role_permission['general_write']):
            get_data    = location_data.objects.all().order_by('-id')
            searched_name   =''
            if 'search' in request.POST: 
                searched_name    = request.POST.get('name')
                
                if searched_name:      
                    get_data             = get_data.filter(location__istartswith=searched_name).order_by('-id')           

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('location','created_at')), cls=DjangoJSONEncoder)
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['general_write']:
                write=1

            return render(request,'users/pages/list_location.html',{'write':write,'get_data' : get_data,'searched_name':searched_name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')





@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewLocation(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                location        = request.POST['location']
                now             = datetime.now()

                insert_data     = location_data(location=location,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-location')
            else:
                return render(request,'users/pages/add_location.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateLocation(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                get_id          = request.POST['id']
                location        = request.POST['location']
                now             = datetime.now()

                location_data.objects.all().filter(id=get_id).update(location=location,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-location')
            else:
                get_id          = request.GET['id']
                get_data        = location_data.objects.get(id=get_id)
                
                return render(request,'users/pages/update_location.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteLocation(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            get_id      = request.POST['id']
            fromReg     = location_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-location')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-location')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listCustomer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_read'] or role_permission['customers_write']):
        
            customer_list           = customer_data.objects.all().order_by('-id')
            
            customer_type_list      =customer_type.objects.all().order_by('id')
            
            selected_type           =0
            search_name             =''
            start_date              =''
            end_date                =''

            
                    

            if 'search' in request.POST: 
                selected_type       = int(request.POST.get('selected_type'))
                search_name         = request.POST.get('name') 
                start_date          = request.POST.get('start')
                end_date            =request.POST.get('end')
                
                
                        
            else:
                selected_type       = int(request.GET.get('selected_type',0))
                print(selected_type)
                print("############")
                search_name         = request.GET.get('name','') 
                start_date          = request.GET.get('start','')
                end_date            = request.GET.get('end','')


            if selected_type or search_name or start_date or end_date:    
                if selected_type and search_name:     
                    customer_list             = customer_list.filter(customer_type_id=selected_type,name__istartswith=search_name).order_by('-id')
                    
                elif  selected_type:   
                    customer_list             = customer_list.filter(customer_type_id=selected_type).order_by('-id')
                    
                elif  search_name:   
                    customer_list             = customer_list.filter(name__istartswith=search_name).order_by('-id')

                if  start_date and end_date: 
                    customer_list             = customer_list.filter(created_at__range=(start_date,end_date))
                            
                elif start_date:   
                    customer_list             = customer_list.filter(created_at__gte=start_date)

                elif end_date:
                    customer_list             = customer_list.filter(created_at__lte=end_date)     
                            
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['customer_list']):
                    responce=download(request.session['customer_list'])
                    return responce
                    
            #Session set for query result for excel based on last search    
            request.session['customer_list']=json.dumps(list(customer_list.values('name','phone','email','customer_code','address','opening_balance','entry_type','bill_by_bill','credit_period','credit_limit','city','state','country','pincode','account_number','branch_name','branch_code')), cls=DjangoJSONEncoder)
            page_number = request.GET.get("page",1)

            paginator = Paginator(customer_list, 10)

            customer_list = paginator.get_page(page_number)
            write=0
            if role_permission['customers_write']:
                write=1

            return render(request,'users/pages/list_customer.html',{'write':write,'customer_list' : customer_list,'customer_type_list':customer_type_list,'selected_type':selected_type,'search_name':search_name,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewCustomer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                customer_type_id    = request.POST['customer_type_id']
                customer_type_id    = customer_type.objects.get(id=customer_type_id)
                name                = request.POST['name']
                phone               = request.POST.get('phone')
                email               = request.POST.get('email')
                customer_code       = request.POST.get('customer_code')
                location_id         = request.POST['location_id']
                location_id         = location_data.objects.get(id=location_id)
                opening_balance     = request.POST.get('opening_balance')
                entry_type          = request.POST.get('entry_type')
                bill_by_bill        = request.POST.get('bill_by_bill')
                credit_period       = request.POST.get('credit_period')
                credit_limit        = request.POST.get('credit_limit')
                address             = request.POST.get('address')
                city                = request.POST.get('city')
                state               = request.POST.get('state')
                country             = request.POST.get('country')
                pincode             = request.POST.get('pincode')
                account_number      = request.POST.get('account_number')
                branch_name         = request.POST.get('branch_name')
                branch_code         = request.POST.get('branch_code')
                cin                 = request.POST.get('cin')
                pan                 = request.POST.get('pan')
                gst                 = request.POST.get('gst')
                active              = True if request.POST.get('active') == 'true' else False
                now                 = datetime.now()
                # additional
                states              = request.POST.get('states')
                pricing_level       = request.POST.get('pricing_level')
                if pricing_level:
                    pricing_level   = pricing_level_data.objects.get(pk=pricing_level)
                gst_treatment       = request.POST.get('gst_treatment')

                
                gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)


                insert_data         = customer_data(
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            customer_type_id    = customer_type_id,
                                            name                = name,
                                            phone               = phone,
                                            email               = email,
                                            customer_code       = customer_code,
                                            location_id         = location_id,
                                            opening_balance     = opening_balance,
                                            entry_type          = entry_type,
                                            bill_by_bill        = bill_by_bill,
                                            credit_period       = credit_period,
                                            credit_limit        = credit_limit,
                                            address             = address,
                                            city                = city,
                                            state               = state,
                                            country             = country,
                                            pincode             = pincode,
                                            account_number      = account_number,
                                            branch_name         = branch_name,
                                            branch_code         = branch_code,
                                            cin                 = cin,
                                            pan                 = pan,
                                            gst                 = gst,
                                            active              = active,
                                            created_at          = now,
                                            updated_at          = now,
                                            # additional
                                            state_code          =states,
                                            gst_treatment       =gst_treatment,
                                        )
                insert_data.save()
                
                accounting_group_id = accounting_group_data.objects.get(name="Sundry Debtors")
                insert_data         = accounting_ledger_data(entity_id = entity_id,branch_id= branch_id,credit_limit=credit_limit,credit_period=credit_period,opening_balance=opening_balance,pricing_level=pricing_level,name=name,accounting_group_id=accounting_group_id,entry_type='Dr',created_at=now,updated_at=now,customer_id=insert_data,bill_by_bill=bill_by_bill)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-customer')
            else:
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    if list_branch:
                        list_branch_ids     = list_branch.values_list('id', flat=True)
                        list_pricing_level  =  pricing_level_data.objects.filter(branch_id__in=list_branch_ids)

                else:
                    list_branch     = branch_data.objects.all()
                    list_pricing_level  = pricing_level_data.objects.all()

                list_customer_type  = customer_type.objects.all()
                list_location       = location_data.objects.all()

                latest_id           = 1 if not customer_data.objects.all().exists() else customer_data.objects.latest('id').id
                get_series          = series_data.objects.get(type="Customer")

                customer_code       = get_series.pre_text+str(latest_id)+get_series.post_text

                gst_treatment_list  = gst_treatment_data.objects.all()

                return render(request,'users/pages/add_customer.html',{'gst_treatment_list':gst_treatment_list,'list_pricing_level':list_pricing_level,'list_entity':list_entity,'list_branch':list_branch,'list_customer_type':list_customer_type,'list_location':list_location,'customer_code':customer_code,'state_list':state_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateCustomer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                customer_type_id    = request.POST['customer_type_id']
                customer_type_id    = customer_type.objects.get(id=customer_type_id)
                name                = request.POST['name']
                phone               = request.POST.get('phone')
                email               = request.POST.get('email')
                customer_code       = request.POST.get('customer_code')
                location_id         = request.POST['location_id']
                location_id         = location_data.objects.get(id=location_id)
                opening_balance     = request.POST.get('opening_balance')
                entry_type          = request.POST.get('entry_type')
                bill_by_bill        = request.POST.get('bill_by_bill')
                credit_period       = request.POST.get('credit_period')
                credit_limit        = request.POST.get('credit_limit')
                address             = request.POST.get('address')
                city                = request.POST.get('city')
                state               = request.POST.get('state')
                country             = request.POST.get('country')
                pincode             = request.POST.get('pincode')
                account_number      = request.POST.get('account_number')
                branch_name         = request.POST.get('branch_name')
                branch_code         = request.POST.get('branch_code')
                cin                 = request.POST.get('cin')
                pan                 = request.POST.get('pan')
                gst                 = request.POST.get('gst')
                active              = True if request.POST.get('active') == 'true' else False
                now                 = datetime.now()
                # additional
                states              = request.POST.get('states')
                pricing_level       = request.POST.get('pricing_level')
                if pricing_level:
                    pricing_level   = pricing_level_data.objects.get(pk=pricing_level)
                
                gst_treatment       = request.POST.get('gst_treatment')

                
                gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)
                print("&&&&&&&&&&")
                print(gst_treatment)

                update_data         = customer_data.objects.all().filter(id=get_id).update(
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            customer_type_id    = customer_type_id,
                                            name                = name,
                                            phone               = phone,
                                            email               = email,
                                            customer_code       = customer_code,
                                            location_id         = location_id,
                                            opening_balance     = opening_balance,
                                            entry_type          = entry_type,
                                            bill_by_bill        = bill_by_bill,
                                            credit_period       = credit_period,
                                            credit_limit        = credit_limit,
                                            address             = address,
                                            city                = city,
                                            state               = state,
                                            country             = country,
                                            pincode             = pincode,
                                            account_number      = account_number,
                                            branch_name         = branch_name,
                                            branch_code         = branch_code,
                                            cin                 = cin,
                                            pan                 = pan,
                                            gst                 = gst,
                                            active              = active,
                                            created_at          = now,
                                            updated_at          = now,
                                            # additional
                                            state_code          = states,
                                            gst_treatment       =gst_treatment
                                        )
                if accounting_ledger_data.objects.filter(customer_id=get_id):
                    accounting_ledger_data.objects.filter(customer_id=get_id).update(entity_id = entity_id,branch_id= branch_id,pricing_level=pricing_level,credit_limit=credit_limit,credit_period=credit_period,name=name,opening_balance=opening_balance,entry_type=entry_type,bill_by_bill=bill_by_bill,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-customer')
            else:
                get_id              = request.GET['id']
                get_data            = customer_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                list_customer_type  = customer_type.objects.all()
                list_location       = location_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                
                # additional
                if list_branch:
                    list_pricing_level  =  pricing_level_data.objects.filter(branch_id=get_data.branch_id)
                
                account_ledger          = None
                account_ledger          = accounting_ledger_data.objects.filter(customer_id=get_id)
                if account_ledger:
                    account_ledger      = accounting_ledger_data.objects.get(customer_id=get_id)
                

                gst_treatment_list  = gst_treatment_data.objects.all()

                return render(request,'users/pages/update_customer.html',{'gst_treatment_list':gst_treatment_list,'account_ledger':account_ledger,'list_pricing_level':list_pricing_level,'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_customer_type':list_customer_type,'list_location':list_location,'state_list':state_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteCustomer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_write']):
            get_id      = request.POST['id']
            fromReg     = customer_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-customer')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-customer')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSupplierType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_read'] or role_permission['supplier_write']):
            supplier_type_list  = supplier_type.objects.all().order_by('-id')
            name            = ''

            if 'search' in request.POST: 
                name                        = request.POST.get('name')
                
                if  name:    

                    supplier_type_list             = supplier_type_list.filter(type__istartswith=name).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(supplier_type_list.values('type','description')), cls=DjangoJSONEncoder)
            write=0
            if role_permission['supplier_write']:
                write=1
            return render(request,'users/pages/list_supplier_type.html',{'write':write,'supplier_type_list' : supplier_type_list,'name':name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def get_supplier_details(request):
    supplier_id     = request.POST['supplier_id']
    
    supplier     = supplier_data.objects.get(pk=supplier_id)

    address=''
    address =str(supplier.address)+' '+str(supplier.city)


    return JsonResponse({'address': address,'cst':supplier.cst})


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def get_customer_details(request):
    customer_id     = request.POST['customer_id']
    
    customer     = customer_data.objects.get(pk=customer_id)

    address=''
    address =str(customer.address)+' '+str(customer.city)

    return JsonResponse({'address': address,'gst':customer.gst})


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewSupplierType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_write']):
            if request.method=="POST":
                type            = request.POST['type']
                description     = request.POST['description']
                now             = datetime.now()

                insert_data     = supplier_type(type=type,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-supplier-type')
            else:
                return render(request,'users/pages/add_supplier_type.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateSupplierType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_write']):
            if request.method=="POST":
                type_id         = request.POST['id']
                type            = request.POST['type']
                description     = request.POST['description']
                now             = datetime.now()

                supplier_type.objects.all().filter(id=type_id).update(type=type,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-supplier-type')
            else:
                type_id         = request.GET['id']
                type_data       = supplier_type.objects.get(id=type_id)
                
                return render(request,'users/pages/update_supplier_type.html',{'type_data' : type_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSupplierType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_write']):
            type_id     = request.POST['id']
            fromReg     = supplier_type.objects.all().filter(id=type_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-supplier-type')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-supplier-type')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSupplier(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_read'] or role_permission['supplier_write']):
            supplier_list       = supplier_data.objects.all().order_by('-id')
            supplier_types      = supplier_type.objects.all().order_by('-id')

            selected_type       =0
            name                =''
            start_date          =''
            end_date            =''
            

            if 'search' in request.POST: 
                selected_type    = int(request.POST.get('selected_type'))
                name             = request.POST.get('name') 
                start_date       = request.POST.get('start') 
                end_date         = request.POST.get('end')
            else:
                selected_type    = int(request.GET.get('selected_type',0))
                name             = request.GET.get('name','') 
                start_date       = request.GET.get('start','') 
                end_date         = request.GET.get('end','')

            if selected_type or name or start_date or end_date:    
                                
                if selected_type and name:     
                    supplier_list             = supplier_list.filter(supplier_type_id=selected_type,name__istartswith=name).order_by('-id')
                    
                elif  selected_type:   
                    
                    supplier_list             = supplier_list.filter(supplier_type_id=selected_type).order_by('-id')
                    
                else:      
                    supplier_list             = supplier_list.filter(name__istartswith=name).order_by('-id')

                if  start_date and end_date:
                    supplier_list             = supplier_list.filter(created_at__range=(start_date,end_date))
                            
                elif start_date:   
                    supplier_list             = supplier_list.filter(created_at__gte=start_date)

                elif end_date:
                    supplier_list             = supplier_list.filter(created_at__lte=end_date)
                                    
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['supplier_list']):
                    responce=download(request.session['supplier_list'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['supplier_list']=json.dumps(list(supplier_list.values('name','phone','email','address','city','state','country','pincode','account_number','supplier_code','opening_balance','entry_type','bill_by_bill','credit_period','credit_limit',)), cls=DjangoJSONEncoder)
        
            page_number = request.GET.get("page",1)

            paginator = Paginator(supplier_list, 10)

            supplier_list = paginator.get_page(page_number)
            write=0
            if role_permission['supplier_write']:
                write=1
            return render(request,'users/pages/list_supplier.html',{'write':write,'supplier_list' : supplier_list,'supplier_types':supplier_types,'selected_type':selected_type,'name':name,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewSupplier(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                supplier_type_id    = request.POST['supplier_type_id']
                supplier_type_id    = supplier_type.objects.get(id=supplier_type_id)
                name                = request.POST['name']
                phone               = request.POST.get('phone')
                email               = request.POST.get('email')
                supplier_code       = request.POST.get('supplier_code')
                opening_balance     = request.POST.get('opening_balance')
                entry_type          = request.POST.get('entry_type')
                bill_by_bill        = request.POST.get('bill_by_bill')
                credit_period       = request.POST.get('credit_period')
                credit_limit        = request.POST.get('credit_limit')
                address             = request.POST.get('address')
                city                = request.POST.get('city')
                state               = request.POST.get('state')
                country             = request.POST.get('country')
                pincode             = request.POST.get('pincode')
                account_number      = request.POST.get('account_number')
                branch_name         = request.POST.get('branch_name')
                branch_code         = request.POST.get('branch_code')
                tin                 = request.POST.get('tin')
                pan                 = request.POST.get('pan')
                cst                 = request.POST.get('cst')
                active              = True if request.POST.get('active') == 'true' else False
                now                 = datetime.now()
                # additional
                states              = request.POST.get('states')
                pricing_level       = request.POST.get('pricing_level')
                if pricing_level:
                    pricing_level   = pricing_level_data.objects.get(pk=pricing_level)
                gst_treatment       = request.POST.get('gst_treatment')

                
                gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)


                insert_data         = supplier_data(
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            supplier_type_id    = supplier_type_id,
                                            name                = name,
                                            phone               = phone,
                                            email               = email,
                                            supplier_code       = supplier_code,
                                            opening_balance     = opening_balance,
                                            entry_type          = entry_type,
                                            bill_by_bill        = bill_by_bill,
                                            credit_period       = credit_period,
                                            credit_limit        = credit_limit,
                                            address             = address,
                                            city                = city,
                                            state               = state,
                                            country             = country,
                                            pincode             = pincode,
                                            account_number      = account_number,
                                            branch_name         = branch_name,
                                            branch_code         = branch_code,
                                            tin                 = tin,
                                            pan                 = pan,
                                            cst                 = cst,
                                            active              = active,
                                            created_at          = now,
                                            updated_at          = now,
                                            # additional
                                            state_code          =states,
                                            gst_treatment       =gst_treatment,

                                        )   
                insert_data.save()

                accounting_group_id = accounting_group_data.objects.get(name="Sundry Creditors")
                insert_data         = accounting_ledger_data(entity_id = entity_id,branch_id= branch_id,credit_limit=credit_limit,credit_period=credit_period,name=name,opening_balance=opening_balance,entry_type='Cr',bill_by_bill=bill_by_bill,created_at=now,updated_at=now,supplier_id=insert_data,accounting_group_id=accounting_group_id,pricing_level=pricing_level)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-supplier')
            else:
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    if list_branch:
                        list_branch_ids     = list_branch.values_list('id', flat=True)
                        list_pricing_level  =  pricing_level_data.objects.filter(branch_id__in=list_branch_ids)

                else:
                    list_branch     = branch_data.objects.all()
                    list_pricing_level  = pricing_level_data.objects.all()

                list_supplier_type  = supplier_type.objects.all()
                list_location       = location_data.objects.all()

                latest_id           = 1 if not supplier_data.objects.all().exists() else supplier_data.objects.latest('id').id
                get_series          = series_data.objects.get(type="Supplier")

                supplier_code       = get_series.pre_text+str(latest_id)+get_series.post_text

                gst_treatment_list  = gst_treatment_data.objects.all()

                return render(request,'users/pages/add_supplier.html',{'gst_treatment_list':gst_treatment_list,'list_pricing_level':list_pricing_level,'list_branch':list_branch,'list_entity':list_entity,'list_supplier_type':list_supplier_type,'list_location':list_location,'supplier_code':supplier_code,'state_list':state_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateSupplier(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                supplier_type_id    = request.POST['supplier_type_id']
                supplier_type_id    = supplier_type.objects.get(id=supplier_type_id)
                name                = request.POST['name']
                phone               = request.POST.get('phone')
                email               = request.POST.get('email')
                supplier_code       = request.POST.get('supplier_code')
                opening_balance     = request.POST.get('opening_balance')
                entry_type          = request.POST.get('entry_type')
                bill_by_bill        = request.POST.get('bill_by_bill')
                credit_period       = request.POST.get('credit_period')
                credit_limit        = request.POST.get('credit_limit')
                address             = request.POST.get('address')
                city                = request.POST.get('city')
                state               = request.POST.get('state')
                country             = request.POST.get('country')
                pincode             = request.POST.get('pincode')
                account_number      = request.POST.get('account_number')
                branch_name         = request.POST.get('branch_name')
                branch_code         = request.POST.get('branch_code')
                tin                 = request.POST.get('tin')
                pan                 = request.POST.get('pan')
                cst                 = request.POST.get('cst')
                active              = True if request.POST.get('active') == 'true' else False
                now                 = datetime.now()
                # additional
                states              = request.POST.get('states')
                pricing_level       = request.POST.get('pricing_level')
                if pricing_level:
                    pricing_level   = pricing_level_data.objects.get(pk=pricing_level)
                
                gst_treatment       = request.POST.get('gst_treatment')

                
                gst_treatment   = None if not gst_treatment else gst_treatment_data.objects.get(id=gst_treatment)

                update_data         = supplier_data.objects.all().filter(id=get_id).update(
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            supplier_type_id    = supplier_type_id,
                                            name                = name,
                                            phone               = phone,
                                            email               = email,
                                            supplier_code       = supplier_code,
                                            opening_balance     = opening_balance,
                                            entry_type          = entry_type,
                                            bill_by_bill        = bill_by_bill,
                                            credit_period       = credit_period,
                                            credit_limit        = credit_limit,
                                            address             = address,
                                            city                = city,
                                            state               = state,
                                            country             = country,
                                            pincode             = pincode,
                                            account_number      = account_number,
                                            branch_name         = branch_name,
                                            branch_code         = branch_code,
                                            tin                 = tin,
                                            pan                 = pan,
                                            cst                 = cst,
                                            active              = active,
                                            created_at          = now,
                                            updated_at          = now,
                                            # additional
                                            state_code          = states,
                                            gst_treatment       =gst_treatment

                                        )
                
                print(get_id)

                if accounting_ledger_data.objects.filter(supplier_id=get_id):
                    print("workinggg")
                    account_ledger  = accounting_ledger_data.objects.filter(supplier_id=get_id).update(entity_id = entity_id,branch_id= branch_id,credit_limit=credit_limit,credit_period=credit_period,name=name,opening_balance=opening_balance,entry_type=entry_type,bill_by_bill=bill_by_bill,updated_at=now,pricing_level=pricing_level)
                messages.success(request, 'Changes successfully updated.')
                return redirect('list-supplier')
            else:
                get_id              = request.GET['id']
                get_data            = supplier_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id_id)
                list_supplier_type  = supplier_type.objects.all()
                list_location       = location_data.objects.all()

                # additional
                if list_branch:
                    list_pricing_level  =  pricing_level_data.objects.filter(branch_id=get_data.branch_id)
                
                account_ledger          = None
                account_ledger          = accounting_ledger_data.objects.filter(supplier_id=get_id)
                if account_ledger:
                    account_ledger      = accounting_ledger_data.objects.get(supplier_id=get_id)
                

                gst_treatment_list  = gst_treatment_data.objects.all()

                return render(request,'users/pages/update_supplier.html',{'gst_treatment_list':gst_treatment_list,'account_ledger':account_ledger,'list_pricing_level':list_pricing_level,'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_supplier_type':list_supplier_type,'list_location':list_location,'state_list':state_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSupplier(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_write']):
            get_id      = request.POST['id']
            fromReg     = supplier_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-supplier')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-supplier')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listUnit(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data    = unit_data.objects.all().order_by('-id')
            searched_name   =''
            if 'search' in request.POST: 
                searched_name    = request.POST.get('name')
            else:
                searched_name    = request.GET.get('name','')
                
            if searched_name:      
                get_data             = get_data.filter(unit__istartswith=searched_name).order_by('-id')           

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('unit','description','formal_name','no_of_decimal_place')), cls=DjangoJSONEncoder)

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            
            return render(request,'users/pages/list_unit.html',{'write':write,'get_data' : get_data,'searched_name':searched_name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewUnit(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                unit                = request.POST['unit']
                description         = request.POST['description']
                formal_name         = request.POST['formal_name']
                no_of_decimal_place = request.POST['no_of_decimal_place']
                now                 = datetime.now()

                insert_data         = unit_data(unit=unit,description=description,formal_name=formal_name,no_of_decimal_place=no_of_decimal_place,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-unit')
            else:
                return render(request,'users/pages/add_unit.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateUnit(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                unit                = request.POST['unit']
                description         = request.POST['description']
                formal_name         = request.POST['formal_name']
                no_of_decimal_place = request.POST['no_of_decimal_place']
                now                 = datetime.now()

                unit_data.objects.all().filter(id=get_id).update(unit=unit,description=description,formal_name=formal_name,no_of_decimal_place=no_of_decimal_place,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-unit')
            else:
                get_id      = request.GET['id']
                get_data    = unit_data.objects.get(id=get_id)
                
                return render(request,'users/pages/update_unit.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteUnit(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = unit_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-unit')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-unit')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSize(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data    = size_data.objects.all().order_by('-id')
            searched_name   =''
            if 'search' in request.POST: 
                searched_name    = request.POST.get('name')
            else:
                searched_name    = request.GET.get('name','')
                
            if searched_name:      
                get_data             = get_data.filter(size__istartswith=searched_name).order_by('-id')           

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('size','description')), cls=DjangoJSONEncoder)

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1


            return render(request,'users/pages/list_size.html',{'write':write,'get_data' : get_data,'searched_name':searched_name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewSize(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                size                = request.POST['size']
                description         = request.POST['description']
                now                 = datetime.now()

                insert_data         = size_data(size=size,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-size')
            else:
                return render(request,'users/pages/add_size.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateSize(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                size                = request.POST['size']
                description         = request.POST['description']
                now                 = datetime.now()

                size_data.objects.all().filter(id=get_id).update(size=size,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-size')
            else:
                get_id      = request.GET['id']
                get_data    = size_data.objects.get(id=get_id)
                
                return render(request,'users/pages/update_size.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSize(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = size_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-size')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-size')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listBrand(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data        = brand_data.objects.all().order_by('-id')
            searched_name   =''
            if 'search' in request.POST: 
                searched_name    = request.POST.get('name')   
            else:
                searched_name    = request.GET.get('name','')   
            if searched_name:      
                get_data             = get_data.filter(name__istartswith=searched_name).order_by('-id')
            #Download Section 
            if 'download' in request.POST:    
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce      
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('name','manufacture','description')), cls=DjangoJSONEncoder)

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1

            return render(request,'users/pages/list_brand.html',{'write':write,'get_data' : get_data,'search_name':searched_name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewBrand(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                name                = request.POST['name']
                description         = request.POST['description']
                manufacture         = request.POST['manufacture']
                now                 = datetime.now()

                insert_data         = brand_data(name=name,description=description,manufacture=manufacture,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-brand')
            else:
                return render(request,'users/pages/add_brand.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateBrand(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                name                = request.POST['name']
                description         = request.POST['description']
                manufacture         = request.POST['manufacture']
                now                 = datetime.now()

                brand_data.objects.all().filter(id=get_id).update(name=name,description=description,manufacture=manufacture,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-brand')
            else:
                get_id      = request.GET['id']
                get_data    = brand_data.objects.get(id=get_id)
                
                return render(request,'users/pages/update_brand.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteBrand(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = brand_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-brand')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-brand')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listModelNumber(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data        = model_number_data.objects.all().order_by('-id')
            searched_name   =''

            if 'search' in request.POST: 
                searched_name    = request.POST.get('name')
            else:
                searched_name    = request.GET.get('name','')
                
            if searched_name:      
                get_data             = get_data.filter(model_number__istartswith=searched_name).order_by('-id')
                

            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce    = download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('model_number','description')), cls=DjangoJSONEncoder)
            

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)

            write=0
            if role_permission['invendory_write']:
                write=1
        

            return render(request,'users/pages/list_model_number.html',{'write':write,'get_data' : get_data,'search_name':searched_name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewModelNumber(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                model_number        = request.POST['model_number']
                description         = request.POST['description']
                now                 = datetime.now()

                insert_data         = model_number_data(model_number=model_number,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-model-number')
            else:
                return render(request,'users/pages/add_model_number.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateModelNumber(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                model_number        = request.POST['model_number']
                description         = request.POST['description']
                now                 = datetime.now()

                model_number_data.objects.all().filter(id=get_id).update(model_number=model_number,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-model-number')
            else:
                get_id      = request.GET['id']
                get_data    = model_number_data.objects.get(id=get_id)
                
                return render(request,'users/pages/update_model_number.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteModelNumber(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = model_number_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-model-number')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-model-number')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listGodown(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data            = godown_data.objects.all().order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            
            if 'search' in request.POST: 
                name                        = request.POST.get('name')
                selected_branch             = int(request.POST.get('selected_branch')) 
            else:
                name                        = request.GET.get('name','')
                selected_branch             = int(request.GET.get('selected_branch',0)) 
                
                
            if selected_branch or name:    
                                
                if selected_branch and name:     
                    get_data             = get_data.filter(name__istartswith=name,branch_id=selected_branch).order_by('-id')
                        
                elif  selected_branch:
                    
                    get_data             = get_data.filter(branch_id=selected_branch).order_by('-id')
                        
                else:      
                    get_data             = get_data.filter(name__istartswith=name).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('name','description','branch_id__name')), cls=DjangoJSONEncoder)
        
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            
            return render(request,'users/pages/list_godown.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewGodown(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                name                = request.POST['name']
                description         = request.POST['description']
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                now                 = datetime.now()

                insert_data         = godown_data(name=name,entity_id=entity_id,description=description,branch_id=branch_id,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-godown')
            else:
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_godown.html',{'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateGodown(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                get_id              = request.POST['id']
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                now                 = datetime.now()

                godown_data.objects.all().filter(id=get_id).update(entity_id=entity_id,name=name,description=description,branch_id=branch_id,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-godown')
            else:
                get_id      = request.GET['id']
                get_data    = godown_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                list_branch = branch_data.objects.all()
                return render(request,'users/pages/update_godown.html',{'get_data' : get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteGodown(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = godown_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-godown')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-godown')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listRack(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data                = rack_data.objects.all().order_by('-id')
            branch_list             = branch_data.objects.all().order_by('-id')
            godown_list             = godown_data.objects.all().order_by('-id') 
            search_name             =''
            selected_branch         =0
            selected_godown         =0

            if 'search' in request.POST: 
                selected_branch     = int(request.POST.get('selected_branch'))
                search_name         = request.POST.get('name') 
                selected_godown    = int(request.POST.get('selected_godown'))  
            else:
                selected_branch     = int(request.GET.get('selected_branch',0))
                search_name         = request.GET.get('name','') 
                selected_godown    = int(request.GET.get('selected_godown',0))  
                
            if selected_branch or selected_godown or search_name:    
                    # we got pk from html post we need to get name to diaplay on popups
                
                if selected_branch and search_name and selected_godown:     
                    get_data             = get_data.filter(branch_id=selected_branch,name__istartswith=search_name,godown_id=selected_godown).order_by('-id')
                    
                elif  selected_branch and search_name:   
                    get_data             = get_data.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                    
                elif  selected_branch and selected_godown:   
                    get_data             = get_data.filter(branch_id=selected_branch,godown_id=selected_godown).order_by('-id')
                        
                elif  search_name and selected_godown:   
                    get_data             = get_data.filter(name__istartswith=search_name,godown_id=selected_godown).order_by('-id')
                    
                elif  search_name:   
                    get_data             = get_data.filter(name__istartswith=search_name).order_by('-id')
                    
                elif  selected_godown:   
                    get_data             = get_data.filter(godown_id=selected_godown).order_by('-id')     

                else:   
                    get_data             = get_data.filter(branch_id=selected_branch).order_by('-id')
                            
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                    
            #Session set for query result for excel based on last search   
            # 
            
            request.session['get_data']=json.dumps(list(get_data.values('name','description','godown_id__name')), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            
            
            return render(request,'users/pages/list_rack.html',{'write':write,'get_data' : get_data,'godown_list':godown_list,'branch_list':branch_list,'search_name':search_name,'selected_branch':selected_branch,'selected_godown':selected_godown})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


from django.http import JsonResponse
def get_godowns(request):
    
    branch_id = request.GET.get('branch_id')
    godowns = godown_data.objects.filter(branch_id=branch_id).order_by('name')
    data = {'0': 'Select Godown'}
    for godown in godowns:
        data[godown.id] = godown.name
    
    return JsonResponse(data)


def get_acc_nature(request):
    
    accgroup = request.POST.get('accgroup')
    print(accgroup)
    accgroup    = accounting_group_data.objects.get(pk=accgroup)
    print(accgroup.nature)
    data={}
    if accgroup.nature == "Expenses":
        data['expense']=1
    else:
        data['expense']=0
    return JsonResponse(data)


def get_pricing_level(request):
    branch_id = request.POST.get('branch')
    print(branch_id)
    print("*********")
    pricing_level_list = pricing_level_data.objects.filter(branch_id=branch_id).order_by('name')
    data = []
    
    for pricing_level in pricing_level_list:
        data.append({
            "id":pricing_level.id,
            "name":pricing_level.name
            })
            
            
    
    return JsonResponse({'data':data})


def get_branchs(request):
    
    entity_id = request.GET.get('enitity_id')
    print(entity_id)
    branchs = branch_data.objects.filter(entity_id=entity_id).order_by('name')
    data = {'0': 'Select Branch'}
    for branch in branchs:
        data[branch.id] = branch.name
    
    return JsonResponse(data)

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewRack(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                godown_id           = request.POST['godown_id']
                godown_id           = godown_data.objects.get(id=godown_id)
                now                 = datetime.now()

                insert_data         = rack_data(entity_id=entity_id,branch_id=branch_id,name=name,description=description,godown_id=godown_id,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-rack')
            else:
                list_branch     = branch_data.objects.all()
                godown_list     = godown_data.objects.all()
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                

                return render(request,'users/pages/add_rack.html',{'list_branch':list_branch,'godown_list':godown_list,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateRack(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                godown_id           = request.POST['godown_id']
                godown_id           = godown_data.objects.get(id=godown_id)
                now                 = datetime.now()

                rack_data.objects.all().filter(id=get_id).update(entity_id=entity_id,branch_id=branch_id,name=name,description=description,godown_id=godown_id,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-rack')
            else:
                get_id      = request.GET['id']
                get_data    = rack_data.objects.get(id=get_id)
                
                list_godown = godown_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/update_rack.html',{'get_data' : get_data,'list_branch':list_branch,'list_godown':list_godown,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteRack(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = rack_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-rack')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-rack')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listProductGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_groups              =product_group_data.objects.all().order_by('id') 
            product_groups           =product_group_data.objects.filter(under_group=None).order_by('id') 
            
            search_name             =''
            selected_product_grp    =0

            if 'search' in request.POST: 
                selected_product_grp        = int(request.POST.get('selected_product_grp'))
                search_name                 = request.POST.get('name') 
            else:
                selected_product_grp        = int(request.GET.get('selected_product_grp',0))
                search_name                 = request.GET.get('name','') 
                    
            if selected_product_grp or search_name:    
                    # we got pk from html post we need to get name to diaplay on popups
                
                if selected_product_grp and search_name:     
                    get_groups             = get_groups.filter(name__istartswith=search_name,under_group=selected_product_grp).order_by('-id')
                    
                elif  search_name:   
                    get_groups             = get_groups.filter(name__istartswith=search_name).order_by('-id')   

                else:      
                    get_groups             = get_groups.filter(under_group=selected_product_grp).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_groups']):
                    responce=download(request.session['get_groups'])
                    return responce
                    
            #Session set for query result for excel based on last search   
            # 
            
            request.session['get_groups']=json.dumps(list(get_groups.annotate(
                under_group_name=Case(
                    When(under_group__isnull=True, then=Value(None)),
                    default=F('under_group__name'),
                    output_field=CharField()  # Adjust the field type accordingly
                )
            ).values('name', 'description', 'under_group_name')), cls=DjangoJSONEncoder)
        

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_groups, 10)

            get_groups = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            
            return render(request,'users/pages/list_product_group.html',{'write':write,'get_groups' : get_groups,'selected_product_grp':selected_product_grp,'search_name':search_name,'product_groups':product_groups})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewProductGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                name                = request.POST['name']
                under_group         = None if not request.POST.get('group_id') else product_group_data.objects.get(id=request.POST.get('group_id'))
                description         = request.POST.get('description')
                now                 = datetime.now()

                insert_data         = product_group_data(name=name,under_group=under_group,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-product-group')
            else:
                list_all_group      = product_group_data.objects.all()

                return render(request,'users/pages/add_product_group.html',{'list_all_group':list_all_group})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateProductGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                group_id            = request.POST['id']
                name                = request.POST['name']
                under_group         = None if not request.POST.get('group_id') else product_group_data.objects.get(id=request.POST.get('group_id'))
                description         = request.POST.get('description')
                now                 = datetime.now()

                product_group_data.objects.all().filter(id=group_id).update(name=name,under_group=under_group,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-product-group')
            else:
                group_id        = request.GET['id']
                group_data      = product_group_data.objects.get(id=group_id)

                list_all_group  = product_group_data.objects.all().exclude(id=group_id)
                
                return render(request,'users/pages/update_product_group.html',{'group_data' : group_data,'list_all_group':list_all_group})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteProductGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            group_id    = request.POST['id']
            fromReg     = product_group_data.objects.all().filter(id=group_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-product-group')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-product-group')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listPricingLevel(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data            = pricing_level_data.objects.all().order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                =''
            selected_branch     =0
            

            if 'search' in request.POST: 
                name                        = request.POST.get('name')
                selected_branch             = int(request.POST.get('selected_branch')) 
            else:
                name                        = request.GET.get('name','')
                selected_branch             = int(request.GET.get('selected_branch',0)) 
                
            if selected_branch or name:    
                                
                if selected_branch and name:     
                    get_data             = get_data.filter(name__istartswith=name,branch_id=selected_branch).order_by('-id')
                        
                elif  selected_branch:   
                    get_data             = get_data.filter(branch_id=selected_branch).order_by('-id')
                        
                else:      
                    get_data             = get_data.filter(name__istartswith=name).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('name','description','branch_id__name')), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            
            return render(request,'users/pages/list_pricing_level.html',{'write':write,'get_data' : get_data,'name':name,'branch_list':branch_list,'selected_branch':selected_branch})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewPricingLevel(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                now                 = datetime.now()

                # additional
                percentage          = request.POST['percentage']

                insert_data         = pricing_level_data(entity_id=entity_id,branch_id=branch_id,name=name,description=description,created_at=now,percentage=percentage,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-pricing-level')
            else:
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_pricing_level.html',{'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updatePricingLevel(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                now                 = datetime.now()

                # additional
                percentage          = request.POST['percentage']

                pricing_level_data.objects.all().filter(id=get_id).update(entity_id=entity_id,branch_id=branch_id,name=name,description=description,updated_at=now,percentage=percentage)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-pricing-level')
            else:
                get_id              = request.GET['id']
                get_data            = pricing_level_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/update_pricing_level.html',{'get_data' : get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletePricingLevel(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = pricing_level_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-pricing-level')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-pricing-level')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listProducts(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data            =  product_data.objects.all().order_by('-id')
            group_list          =  product_group_data.objects.all().order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                =''
            selected_group      =0
            start_date          =''
            end_date            =''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                selected_group              = int(request.POST.get('selected_group'))
            else:
                start_date                  =request.GET.get('start','')
                end_date                    =request.GET.get('end','')
                name                        = request.GET.get('name','')
                selected_group              = int(request.GET.get('selected_group',0))

                
            if selected_group or name or start_date or end_date:                         
                if selected_group:     
                    get_data             = get_data.filter(product_group_id=selected_group)
                
                if name:
                    get_data             = get_data.filter(name__istartswith=name)

                if  start_date and end_date:   

                    get_data             = get_data.filter(created_at__range=(start_date,end_date))
                        
                elif start_date:    
                    get_data             = get_data.filter(created_at__gte=start_date)

                elif end_date:
                    get_data             = get_data.filter(created_at__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
            request.session['get_data']=json.dumps(list(get_data.values('pk','name', 'branch_id__id', 'product_code','product_group_id','product_group_id__name','purchase_rate','mrp','sales_rate','reorder_level','minimum_stock','maximum_stock','bom','bar_code','unit_id','created_at','rack_id','godown_id')), cls=DjangoJSONEncoder)
                 
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
             
            return render(request,'users/pages/list_product.html',{'write':write,'get_data' : get_data,'group_list':group_list,'branch_list':branch_list,'selected_group':selected_group,'name':name,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
        
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                branch_id           = request.POST['branch_id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                product_code        = request.POST['product_code']
                product_group_id    = request.POST['product_group_id']
                product_group_id    = product_group_data.objects.get(id=product_group_id)
                brand_id            = request.POST.get('brand_id')
                brand_id            = None if not brand_id else brand_data.objects.get(id=brand_id)
                unit_id             = request.POST.get('unit_id')
                unit_id             = None if not unit_id else unit_data.objects.get(id=unit_id)
                size_id             = request.POST.get('size_id')
                size_id             = None if not size_id else size_data.objects.get(id=size_id)
                model_number_id     = request.POST.get('model_number_id')
                model_number_id     = None if not model_number_id else model_number_data.objects.get(id=model_number_id)

                godown_id           = request.POST.getlist('godown_id[]')
                godown_id           = ','.join(godown_id)
                rack_id             = request.POST.getlist('rack_id[]')
                rack_id             = ','.join(rack_id)
                discount_type       = request.POST.get('discount_type')
                discount            = request.POST.get('discount')

                # godown_id           = request.POST.get('godown_id')
                # godown_id           = None if not godown_id else godown_data.objects.get(id=godown_id)
                # rack_id             = request.POST.get('rack_id')
                # rack_id             = None if not rack_id else rack_data.objects.get(id=rack_id)
                warehouse_id        = request.POST.get('warehouse_id')
                warehouse_id        = None if not warehouse_id else warehouse_data.objects.get(id=warehouse_id)
                purchase_rate       = request.POST.get('purchase_rate')
                mrp                 = request.POST.get('mrp')
                sales_rate          = request.POST.get('sales_rate')
                reorder_level       = request.POST.get('reorder_level')
                minimum_stock       = request.POST.get('minimum_stock')
                maximum_stock       = request.POST.get('maximum_stock')
                tax_id              = request.POST.get('tax_id')
                tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)
                bom                 = request.POST.get('bom')
                bar_code            = request.POST.get('bar_code')
                now                 = datetime.now()
                # additional

                product_type        = request.POST.get('product_type')
                hsn                 = request.POST.get('hsn')
                sac                 = request.POST.get('sac')
                print("#####################")
                print(hsn)
                print(sac)
                insert_data         = product_data(
                                        entity_id       =entity_id,
                                        branch_id       = branch_id,
                                        name            = name,
                                        product_code    = product_code,
                                        product_group_id= product_group_id,
                                        brand_id        = brand_id,
                                        unit_id         = unit_id,
                                        size_id         = size_id,
                                        model_number_id = model_number_id,
                                        godown_id       = godown_id,
                                        rack_id         = rack_id,
                                        warehouse_id    = warehouse_id,
                                        purchase_rate   = purchase_rate,
                                        mrp             = mrp,
                                        sales_rate      = sales_rate,
                                        reorder_level   = reorder_level,
                                        minimum_stock   = minimum_stock,
                                        maximum_stock   = maximum_stock,
                                        tax_id          = tax_id,
                                        bom             = bom,
                                        bar_code        = bar_code,
                                        discount_type   = discount_type,
                                        discount        = discount,
                                        created_at      = now,
                                        updated_at      = now,
                                        # additional
                                        sac             = sac,
                                        hsn             = hsn,
                                        product_type    =product_type
                                    )
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-product')
            else:
                list_branch         = branch_data.objects.all()
                list_product_group  = product_group_data.objects.all()
                list_brand          = brand_data.objects.all()
                list_unit           = unit_data.objects.all()
                list_size           = size_data.objects.all()
                list_model_numbers  = model_number_data.objects.all()
                list_godown         = godown_data.objects.all()
                list_rack           = rack_data.objects.all()
                list_warehouse      = warehouse_data.objects.all()
                list_tax            = tax_data.objects.all()

                latest_id           = 1 if not product_data.objects.all().exists() else int(product_data.objects.latest('id').id)+1
                get_series          = series_data.objects.get(type="Product")

                product_code        = get_series.pre_text+str(latest_id)+get_series.post_text
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)
                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                

                return render(request,'users/pages/add_product.html',{'list_entity':list_entity,'list_branch':list_branch,'list_brand':list_brand,'list_product_group':list_product_group,'list_unit':list_unit,'list_size':list_size,'list_model_numbers':list_model_numbers,'list_godown':list_godown,'list_rack':list_rack,'list_warehouse':list_warehouse,'product_code':product_code,'list_tax':list_tax})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                product_code        = request.POST['product_code']
                product_group_id    = request.POST['product_group_id']
                product_group_id    = product_group_data.objects.get(id=product_group_id)
                brand_id            = request.POST.get('brand_id')
                brand_id            = None if not brand_id else brand_data.objects.get(id=brand_id)
                unit_id             = request.POST.get('unit_id')
                unit_id             = None if not unit_id else unit_data.objects.get(id=unit_id)
                size_id             = request.POST.get('size_id')
                size_id             = None if not size_id else size_data.objects.get(id=size_id)
                model_number_id     = request.POST.get('model_number_id')
                model_number_id     = None if not model_number_id else model_number_data.objects.get(id=model_number_id)
                # godown_id           = request.POST.get('godown_id')
                # godown_id           = None if not godown_id else godown_data.objects.get(id=godown_id)
                # rack_id             = request.POST.get('rack_id')
                # rack_id             = None if not rack_id else rack_data.objects.get(id=rack_id)

                godown_id           = request.POST.getlist('godown_id[]')
                godown_id           = ','.join(godown_id)
                rack_id             = request.POST.getlist('rack_id[]')
                rack_id             = ','.join(rack_id)
                discount_type       = request.POST.get('discount_type')
                discount            = request.POST.get('discount')

                warehouse_id        = request.POST.get('warehouse_id')
                warehouse_id        = None if not warehouse_id else warehouse_data.objects.get(id=warehouse_id)
                purchase_rate       = request.POST.get('purchase_rate')
                mrp                 = request.POST.get('mrp')
                sales_rate          = request.POST.get('sales_rate')
                reorder_level       = request.POST.get('reorder_level')
                minimum_stock       = request.POST.get('minimum_stock')
                maximum_stock       = request.POST.get('maximum_stock')
                tax_id              = request.POST.get('tax_id')
                tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)
                bom                 = request.POST.get('bom')
                bar_code            = request.POST.get('bar_code')
                now                 = datetime.now()

                # additional

                product_type        = request.POST.get('product_type')
                hsn                 = request.POST.get('hsn')
                sac                 = request.POST.get('sac')
                print(hsn)
                print(sac)
                print("*******")

                update_data         = product_data.objects.all().filter(id=get_id).update(
                                        entity_id       = entity_id,
                                        branch_id       = branch_id,
                                        name            = name,
                                        product_code    = product_code,
                                        product_group_id= product_group_id,
                                        brand_id        = brand_id,
                                        unit_id         = unit_id,
                                        size_id         = size_id,
                                        model_number_id = model_number_id,
                                        godown_id       = godown_id,
                                        rack_id         = rack_id,
                                        warehouse_id    = warehouse_id,
                                        purchase_rate   = purchase_rate,
                                        mrp             = mrp,
                                        sales_rate      = sales_rate,
                                        reorder_level   = reorder_level,
                                        minimum_stock   = minimum_stock,
                                        maximum_stock   = maximum_stock,
                                        tax_id          = tax_id,
                                        bom             = bom,
                                        bar_code        = bar_code,
                                        discount_type   = discount_type,
                                        discount        = discount,
                                        updated_at      = now,
                                         # additional
                                        sac             = sac,
                                        hsn             = hsn,
                                        product_type    =product_type

                                    )

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-product')
            else:
                get_id              = request.GET['id']
                get_data            = product_data.objects.get(id=get_id)
                list_brand          = brand_data.objects.all()
                list_product_group  = product_group_data.objects.all()
                list_unit           = unit_data.objects.all()
                list_size           = size_data.objects.all()
                list_model_numbers  = model_number_data.objects.all()
                list_warehouse      = warehouse_data.objects.all()
                list_tax            = tax_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                list_godown         = godown_data.objects.all()
                list_rack           = rack_data.objects.all()

                get_godown_ids      = get_data.godown_id.split(',')
                get_rack_ids        = get_data.rack_id.split(',')

                all_godown          = []
                for godown in list_godown:
                    selected        = ''
                    if  str(godown.id) in get_godown_ids:
                        selected    = 'selected'
                    
                    all_godown.append({
                        'id'        : godown.id,
                        'name'      : godown.name,
                        'selected'  : selected
                    })


                all_rack            = []
                for rack in list_rack:
                    selected        = ''
                    if  str(rack.id) in get_rack_ids:
                        selected    = 'selected'
                    
                    all_rack.append({
                        'id'        : rack.id,
                        'name'      : rack.name,
                        'selected'  : selected
                    })
                
                return render(request,'users/pages/update_product.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_brand':list_brand,'list_unit':list_unit,'list_size':list_size,'list_model_numbers':list_model_numbers,'list_godown':all_godown,'list_rack':all_rack,'list_product_group':list_product_group,'list_tax':list_tax,'list_warehouse':list_warehouse})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-product')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-product')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listVoucherType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read'] or role_permission['general_write']):
            get_data            = voucher_type_data.objects.all().order_by('-id')
            voucher_type_list   =voucher_type_data.objects.filter(type_of_voucher=None).order_by('id')  
            branch_list         =branch_data.objects.all().order_by('-id')
            search_name         =''
            selected_branch     =0
            selected_voucher    =0

            if 'search' in request.POST: 
                selected_branch     = int(request.POST.get('selected_branch'))
                search_name         = request.POST.get('name') 
                selected_voucher    = int(request.POST.get('selected_type'))   
            else:
                selected_branch     = int(request.POST.get('selected_branch',0))
                search_name         = request.POST.get('name','') 
                selected_voucher    = int(request.POST.get('selected_type',0))   

            if selected_branch or selected_voucher or search_name:    
                    # we got pk from html post we need to get name to diaplay on popups
                

                if selected_branch and search_name and selected_voucher:     
                    get_data             = get_data.filter(branch_id=selected_branch,name__istartswith=search_name,type_of_voucher=selected_voucher).order_by('-id')
                    
                elif  selected_branch and search_name:   
                    get_data             = get_data.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                    
                elif  selected_branch and selected_voucher:   
                    get_data             = get_data.filter(branch_id=selected_branch,type_of_voucher=selected_voucher).order_by('-id')
                        
                elif  search_name and selected_voucher:   
                    get_data             = get_data.filter(name__istartswith=search_name,type_of_voucher=selected_voucher).order_by('-id')
                    

                elif  search_name:   
                    get_data             = get_data.filter(name__istartswith=search_name).order_by('-id')
                    
                elif  selected_voucher:   
                    get_data             = get_data.filter(type_of_voucher=selected_voucher).order_by('-id')
                    

                else:      
                    get_data             = get_data.filter(branch_id=selected_branch).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                    
            #Session set for query result for excel based on last search   
            # 
            
            request.session['get_data']=json.dumps(list(get_data.annotate(
                type_of_voucher_name=Case(
                    When(type_of_voucher__isnull=True, then=Value(None)),
                    default=F('type_of_voucher__name'),
                    output_field=CharField()  # Adjust the field type accordingly
                )
            ).values('name', 'branch_id__id', 'description', 'start_index', 'type_of_voucher_name')), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['general_write']:
                write=1
            
            return render(request,'users/pages/list_voucher_type.html',{'write':write,'get_data' : get_data,'voucher_type_list':voucher_type_list,'branch_list':branch_list,'search_name':search_name,'selected_branch':selected_branch,'selected_voucher':selected_voucher})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def getGodownRacks(request):
    godown_ids      = request.POST.getlist('godown_id[]')

    all_racks       = []
    for godown_id in godown_ids:
        get_racks   = rack_data.objects.filter(godown_id=godown_id)

        for rack in get_racks:
            all_racks.append({
                    'id'    : rack.id,
                    'name'  : rack.name
                })

    return JsonResponse({'racks': all_racks})



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewVoucherType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                type_of_voucher     = request.POST.get('type_of_voucher')
                type_of_voucher     = None if not type_of_voucher else voucher_type_data.objects.get(id=type_of_voucher)
                start_index         = request.POST.get('start_index')
                now                 = datetime.now()

                insert_data         = voucher_type_data(entity_id=entity_id,branch_id=branch_id,name=name,description=description,type_of_voucher=type_of_voucher,start_index=start_index,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-voucher-type')
            else:
                list_voucher_types  = voucher_type_data.objects.all()
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_voucher_type.html',{'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateVoucherType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                type_of_voucher     = request.POST.get('type_of_voucher')
                type_of_voucher     = None if not type_of_voucher else voucher_type_data.objects.get(id=type_of_voucher)
                start_index         = request.POST.get('start_index')
                now                 = datetime.now()

                voucher_type_data.objects.all().filter(id=get_id).update(entity_id=entity_id,branch_id=branch_id,name=name,description=description,type_of_voucher=type_of_voucher,start_index=start_index,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-voucher-type')
            else:
                get_id              = request.GET['id']
                get_data            = voucher_type_data.objects.get(id=get_id)
                
                list_voucher_types  = voucher_type_data.objects.all().exclude(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/update_voucher_type.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteVoucherType(request):
    if request.session.has_key('userId'):
        get_id      = request.POST['id']
        fromReg     = voucher_type_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            messages.success(request, 'Successfully Deleted.')
            return redirect('list-voucher-type')
        else:
            messages.error(request, 'Something went to wrong')
            return redirect('list-voucher-type')
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listVoucherSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read'] or role_permission['general_write']):
            get_data            = voucher_series_data.objects.all().order_by('-id')
            voucher_type_list   =voucher_type_data.objects.filter(type_of_voucher=None).order_by('id')  
            branch_list         =branch_data.objects.all().order_by('-id')
            search_name         =''
            selected_branch     =0
            selected_voucher    =0

            if 'search' in request.POST: 
                selected_branch     = int(request.POST.get('selected_branch'))
                search_name         = request.POST.get('name') 
                selected_voucher    = int(request.POST.get('selected_type')) 
                print(search_name,'helo',search_name) 
            else:
                selected_branch     = int(request.GET.get('selected_branch',0))
                search_name         = request.GET.get('name','') 
                selected_voucher    = int(request.GET.get('selected_type',0)) 
                
            if selected_branch or selected_voucher or search_name:    
                    # we got pk from html post we need to get name to diaplay on popups
                

                if selected_branch and search_name and selected_voucher:     
                    get_data             = get_data.filter(branch_id=selected_branch,name__istartswith=search_name,voucher_type_id=selected_voucher).order_by('-id')
                    
                elif  selected_branch and search_name:   
                    get_data             = get_data.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                    
                elif  selected_branch and selected_voucher:   
                    get_data             = get_data.filter(branch_id=selected_branch,voucher_type_id=selected_voucher).order_by('-id')
                        
                elif  search_name and selected_voucher:   
                    get_data             = get_data.filter(name__istartswith=search_name,voucher_type_id=selected_voucher).order_by('-id')
                    

                elif  search_name:   
                    
                    get_data             = get_data.filter(name__istartswith=search_name).order_by('-id')
                    
                elif  selected_voucher:   
                    get_data             = get_data.filter(voucher_type_id=selected_voucher).order_by('-id')
                    

                else:      
                    get_data             = get_data.filter(branch_id=selected_branch).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                    
            #Session set for query result for excel based on last search   
            # 
            
            request.session['get_data']=json.dumps(list(get_data.annotate(
                type_of_voucher_name=Case(
                    When(voucher_type_id__isnull=True, then=Value(None)),
                    default=F('voucher_type_id__name'),
                    output_field=CharField()  # Adjust the field type accordingly
                )
            ).values('name', 'branch_id__name', 'description','starting_number','voucher_type_id__name','prefix','postfix','starting_number','type_of_voucher_name')), cls=DjangoJSONEncoder)
            
            

            request.session['get_data']=json.dumps(list(get_data.annotate(
                type_of_voucher_name=Case(
                    When(voucher_type_id__isnull=True, then=Value(None)),
                    default=F('voucher_type_id__name'),
                    output_field=CharField()  # Adjust the field type accordingly
                )
            ).values('name', 'branch_id__name', 'description','starting_number','voucher_type_id__name','prefix','postfix','starting_number','type_of_voucher_name')), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['general_write']:
                write=1
            

            return render(request,'users/pages/list_voucher_series.html',{'write':write,'get_data' : get_data,'voucher_type_list':voucher_type_list,'branch_list':branch_list,'search_name':search_name,'selected_branch':selected_branch,'selected_voucher':selected_voucher})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewVoucherSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                voucher_type_id     = request.POST.get('voucher_type_id')
                voucher_type_id     = None if not voucher_type_id else voucher_type_data.objects.get(id=voucher_type_id)
                prefix              = request.POST.get('prefix')
                postfix             = request.POST.get('postfix')
                start_number        = request.POST.get('starting_number')
                now                 = datetime.now()

                financial_year_id   = financial_year_data.objects.get(active=True)

                insert_data         = voucher_series_data(branch_id=branch_id,entity_id=entity_id,financial_year_id=financial_year_id,name=name,voucher_type_id=voucher_type_id,description=description,starting_number=start_number,prefix=prefix,postfix=postfix,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-voucher-series')
            else:
                list_voucher_types  = voucher_type_data.objects.all()
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_voucher_series.html',{'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateVoucherSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                name                = request.POST['name']
                description         = request.POST['description']
                voucher_type_id     = request.POST.get('voucher_type_id')
                voucher_type_id     = None if not voucher_type_id else voucher_type_data.objects.get(id=voucher_type_id)
                prefix              = request.POST.get('prefix')
                postfix             = request.POST.get('postfix')
                start_number        = request.POST.get('starting_number')
                now                 = datetime.now()

                financial_year_id   = financial_year_data.objects.get(active=True)

                voucher_series_data.objects.all().filter(id=get_id).update(entity_id=entity_id,financial_year_id=financial_year_id,branch_id=branch_id,name=name,voucher_type_id=voucher_type_id,description=description,prefix=prefix,postfix=postfix,starting_number=start_number,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-voucher-series')
            else:
                get_id              = request.GET['id']
                get_data            = voucher_series_data.objects.get(id=get_id) 
                
                list_voucher_types  = voucher_type_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/update_voucher_series.html',{'list_entity':list_entity,'get_data' : get_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteVoucherSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            get_id      = request.POST['id']
            fromReg     = voucher_series_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-voucher-series')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-voucher-series')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listTaxData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read'] or role_permission['general_write']):
            tax_list            = tax_data.objects.filter(active=1).order_by('-id')
            name                =''
            
            selected_status     =1
            if 'search' in request.POST: 
                name                        = request.POST.get('name')
                selected_status             = int(request.POST.get('selected_status'))
                print(selected_status) 
            else:
                name                        = request.GET.get('name','')
                selected_status             = int(request.GET.get('selected_status',1))
                
            if  name:   
                tax_list                =  tax_data.objects.filter(tax__istartswith=name,active=selected_status).order_by('-id')                
            else:  
                tax_list                =  tax_data.objects.filter(active=selected_status).order_by('-id')
                        
                                    
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['tax_list']):
                    responce=download(request.session['tax_list'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['tax_list']=json.dumps(list(tax_list.values('tax','rate_perc','description','active','branch_id__name')), cls=DjangoJSONEncoder)
            
            page_number = request.GET.get("page",1)

            paginator = Paginator(tax_list, 10)

            tax_list = paginator.get_page(page_number)
            write=0
            if role_permission['general_write']:
                write=1
            
            return render(request,'users/pages/list_tax_data.html',{'write':write,'tax_list' : tax_list,'selected_status':selected_status,'name':name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewTaxData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                tax                 = request.POST['tax']
                rate_perc           = request.POST.get('rate_perc')
                description         = request.POST['description']
                now                 = datetime.now()
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                insert_data         = tax_data(entity_id=entity_id,branch_id=branch_id,tax=tax,rate_perc=rate_perc,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-tax-data')
            else:
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_tax_data.html',{'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listGstTreatmentData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read'] or role_permission['general_write']):
            name                =''

            
            gst_treatment_list  = gst_treatment_data.objects.all()
            write   = 0
            if role_permission['general_write']:
                write=1
            return render(request,'users/pages/list_gst_treatment.html',{'write':write,'gst_treatment_list':gst_treatment_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteGstTreatment(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            get_id      = request.POST['id']
            fromReg     = gst_treatment_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-gst-treatment')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-gst-treatment')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewGstTreatmentData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                name                = request.POST['name']
                description         = request.POST['description']
                insert_data         = gst_treatment_data(name=name,description=description)
                
                insert_data.save()
                messages.success(request, 'Successfully added.')
                return redirect('list-gst-treatment')
            else:
                return render(request,'users/pages/add_new_gst_treatment.html')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateGstTreatment(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                id                  = request.POST['id']
                name                = request.POST['name']
                description         = request.POST['description']
                update_data         = gst_treatment_data.objects.filter(pk=id).update(name=name,description=description)
                messages.success(request, 'Updated added.')
                return redirect('list-gst-treatment')
            else:
                get_id              = request.GET['id']
                get_data            = gst_treatment_data.objects.get(id=get_id) 
                return render(request,'users/pages/update_gst_treatment.html',{'get_data':get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewTaxData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                tax                 = request.POST['tax']
                rate_perc           = request.POST.get('rate_perc')
                description         = request.POST['description']
                now                 = datetime.now()
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                insert_data         = tax_data(entity_id=entity_id,branch_id=branch_id,tax=tax,rate_perc=rate_perc,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-tax-data')
            else:
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_tax_data.html',{'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateTaxData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            if request.method=="POST":
                get_id              = request.POST['id']
                branch_id           = request.POST['branch_id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = branch_data.objects.get(id=branch_id)
                tax                 = request.POST['tax']
                description         = request.POST['description']
                rate_perc           = request.POST.get('rate_perc')
                active              = True if request.POST.get('active') == 'true' else False
                now                 = datetime.now()

                tax_data.objects.all().filter(id=get_id).update(entity_id=entity_id,branch_id=branch_id,tax=tax,rate_perc=rate_perc,description=description,active=active,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-tax-data')
            else:
                get_id              = request.GET['id']
                get_data            = tax_data.objects.get(id=get_id)
                
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/update_tax_data.html',{'list_entity':list_entity,'get_data' : get_data,'list_branch':list_branch})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteTaxData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_write']):
            get_id      = request.POST['id']
            fromReg     = tax_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-tax-data')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-tax-data')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listWareHouse(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data            = warehouse_data.objects.all().order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            
            if 'search' in request.POST: 
                name                        = request.POST.get('name')
                selected_branch             = int(request.POST.get('selected_branch')) 
            else:
                name                        = request.GET.get('name','')
                selected_branch             = int(request.GET.get('selected_branch',0)) 
           
            if selected_branch or name:    
                                
                if selected_branch and name:     
                    get_data             = get_data.filter(name__istartswith=name,branch_id=selected_branch).order_by('-id')
                        
                elif  selected_branch:
                    
                    get_data             = get_data.filter(branch_id=selected_branch).order_by('-id')
                        
                else:      
                    get_data             = get_data.filter(name__istartswith=name).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('name','address','city','state','country','pincode','branch_id__name')), cls=DjangoJSONEncoder)
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            

            return render(request,'users/pages/list_warehouse.html',{'write':write,'get_data' : get_data,'branch_list':branch_list,'name':name,'selected_branch':selected_branch})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewWarehouse(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                name            = request.POST['name']
                branch_id       = request.POST['branch_id']
                branch_id       = branch_data.objects.get(id=branch_id)
                address         = request.POST['address']
                city            = request.POST['city']
                state           = request.POST['state']
                country         = request.POST['country']
                pincode         = request.POST['pincode']

                now             = datetime.now()

                insert_data     = warehouse_data(name=name,entity_id= entity_id,branch_id=branch_id,address=address,city=city,state=state,country=country,pincode=pincode,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-warehouse')
            else:

                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_warehouse.html',{'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateWarehouse(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                get_id          = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                name            = request.POST['name']
                branch_id       = request.POST['branch_id']
                branch_id       = branch_data.objects.get(id=branch_id)
                address         = request.POST['address']
                city            = request.POST['city']
                state           = request.POST['state']
                country         = request.POST['country']
                pincode         = request.POST['pincode']
                now             = datetime.now()


                warehouse_data.objects.all().filter(id=get_id).update(name=name,entity_id= entity_id,branch_id=branch_id,address=address,city=city,state=state,country=country,pincode=pincode,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-warehouse')
            else:
                get_id          = request.GET['id']
                get_data        = warehouse_data.objects.get(id=get_id)
                list_entity     = entity_data.objects.all()
                list_branch     = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/update_warehouse.html',{'get_data':get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteWarehouse(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = warehouse_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-warehouse')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-warehouse')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listBatch(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read'] or role_permission['invendory_write']):
            get_data        = batch_data.objects.all().order_by('-id')
            product_list    = product_data.objects.all()
            selected_product= 0
            name            = ''

            if 'search' in request.POST: 
                name                        = request.POST.get('name')
                selected_product             = int(request.POST.get('selected_product')) 
            else:
                name                        = request.GET.get('name','')
                selected_product            = int(request.GET.get('selected_product',0))

                
            if selected_product or name:    
                                
                if selected_product and name:     
                    get_data             = get_data.filter(name__istartswith=name,branch_id=selected_product).order_by('-id')
                        
                elif  selected_product:   
                    get_data             = get_data.filter(product_id=selected_product).order_by('-id')
                        
                else:      
                    get_data             = get_data.filter(name__istartswith=name).order_by('-id')
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('name','manufacture_date','expiry_date','description','active','created_at',product_name=F('product_id__name'))), cls=DjangoJSONEncoder)


            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['invendory_write']:
                write=1
            
            return render(request,'users/pages/list_batch.html',{'write':write,'get_data' : get_data,'name':name,'selected_product':selected_product,'product_list':product_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewBatch(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            if request.method=="POST":
                entity_id       = request.POST['entity_id']
                entity_id       = entity_data.objects.get(id=entity_id)
                branch_id       = request.POST['branch_id']
                branch_id       = branch_data.objects.get(id=branch_id)
                name            = request.POST['name']
                product_id      = request.POST['product_id']
                product_id      = product_data.objects.get(id=product_id)
                manufacture_date= request.POST['manufacture_date']
                expiry_date     = request.POST['expiry_date']
                description     = request.POST['description']

                now             = datetime.now()

                insert_data     = batch_data(entity_id=entity_id,branch_id=branch_id,name=name,product_id=product_id,manufacture_date=manufacture_date,expiry_date=expiry_date,description=description,created_at=now,updated_at=now)
                insert_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-batch')
            else:
                list_product    = product_data.objects.all()
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()
                return render(request,'users/pages/add_batch.html',{'list_branch':list_branch,'list_product':list_product,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateBatch(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):

            if request.method=="POST":
                get_id          = request.POST['id']
                entity_id       = request.POST['entity_id']
                entity_id       = entity_data.objects.get(id=entity_id)
                branch_id       = request.POST['branch_id']
                branch_id       = branch_data.objects.get(id=branch_id)
                name            = request.POST['name']
                product_id      = request.POST['product_id']
                product_id      = product_data.objects.get(id=product_id)
                manufacture_date= request.POST['manufacture_date']
                expiry_date     = request.POST['expiry_date']
                description     = request.POST['description']
                now             = datetime.now()


                batch_data.objects.all().filter(id=get_id).update(entity_id=entity_id,branch_id=branch_id,name=name,product_id=product_id,manufacture_date=manufacture_date,expiry_date=expiry_date,description=description,updated_at=now)

                messages.success(request, 'Changes successfully updated.')
                return redirect('list-batch')
            else:
                get_id          = request.GET['id']
                get_data        = batch_data.objects.get(id=get_id)
                list_branch     = branch_data.objects.all()
                list_product    = product_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/update_batch.html',{'get_data':get_data,'list_entity':list_entity,'list_branch':list_branch,'list_product':list_product})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteBatch(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            get_id      = request.POST['id']
            fromReg     = batch_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-batch')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-batch')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listPurchaseOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write'] or role_permission['purchase_read']):
            get_data    = order_data.objects.all().filter(entry_type='Credit').order_by('-id')
            list_orders = []

            # filter section
            branch_list         = branch_data.objects.all().order_by('-id')
            name                =''
            selected_branch     =0
            start_date          =''
            end_date            =''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(pk__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
            
            get_data_ids = get_data.values_list('id', flat=True)
            print(get_data_ids)
            matching_order_products = order_product_data.objects.filter(order_id__in=get_data_ids)
            

            print(matching_order_products)
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(matching_order_products.values('order_id','order_id__voucher_type_id__name', 'order_id__order_number', 'order_id__exchange_rate','order_id__date','order_id__due_days','order_id__description','order_id__total_amount','order_id__generate_invoice','order_id__entry_type','order_id__order_number', 'branch_id__name', 'product_id__name','quantity',purchase_quantity=F('po_quantity'))), cls=DjangoJSONEncoder)


            for order in get_data:
                invoice_id  = None
                get_invoice_data= invoice_data.objects.all().filter(order_id=order.id,invoice_id=None)
                print(get_invoice_data)
                if get_invoice_data:
                    invoice_id  = invoice_data.objects.get(pk=get_invoice_data[0].pk)
                    invoice_id  = invoice_id.id

                list_orders.append({
                    'id'                : order.id,
                    'order_number'      : order.order_number,
                    'branch_id'         : order.branch_id,
                    'voucher_type_id'   : order.voucher_type_id,
                    'total_amount'      : order.total_amount,
                    'generate_invoice'  : order.generate_invoice,
                    'date'              : order.date,
                    'invoice_id'        : invoice_id

                })


            page_number     = request.GET.get("page",1)

            paginator       = Paginator(list_orders, 10)

            list_orders     = paginator.get_page(page_number)

            write=0
            if role_permission['purchase_write']:
                write=1
            
            return render(request,'users/pages/list_purchase_order.html',{'write':write,'get_data' : list_orders,'selected_branch':selected_branch,'branch_list':branch_list,'start_date':start_date,'end_date':end_date,'branch_list':branch_list,'name':name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewPurchaseOrder(request):
    if request.session.has_key('userId'):
        
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                # voucher_type_id     = request.POST['voucher_type_id']
                # voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                # order_number        = request.POST['order_number']
                entry_type          = "Credit"
                num                 = int(request.POST['number_of_input']) + 1

                # additional
                supplier_id                 = request.POST['supplier_id']   
                supplier_id                 = supplier_data.objects.get(pk=supplier_id)
                cgstin                      = request.POST['cgstin']  
                shipping_address            = request.POST['shipping_address']
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl             = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                num_additional              = int(request.POST['number_of_additionalinput']) + 1
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)

                now                 = datetime.now()

                insert_order_data   = order_data(entity_id=entity_id,branch_id=branch_id,date=date,due_date=due_date,due_days=due_days,description=description,total_amount=total_amount,entry_type=entry_type,created_at=now,updated_at=now,
                                        # additional        
                                        supplier_id         = supplier_id,
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id)
                insert_order_data.save()
                

                for x in range(int(num)):
                    product_id      = request.POST.get('product['+str(x)+']product_id')
                    product_code    = request.POST.get('product['+str(x)+']product_code')
                    quantity        = request.POST.get('product['+str(x)+']quantity')
                    purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                    amount          = request.POST.get('product['+str(x)+']amount')
                    unit_id         = request.POST.get('product['+str(x)+']unit_id')

                    product_id      = product_data.objects.get(id=product_id)
                    unit_id         = unit_data.objects.get(id=unit_id)

                    insert_data     = order_product_data(order_id=insert_order_data,unit_id=unit_id,product_id=product_id,product_code=product_code,po_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
                    insert_data.save()
                    
                # additional

                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            print(get_id)
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(order_id=insert_order_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()


                messages.success(request, 'Successfully added.')
                return redirect('list-purchase-order')
            else:

                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all()
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)
            
                # additional
                if get_user_data.default_entity_id:
                    list_branch         = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_supplier       = supplier_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_pricing_level   =pricing_level_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch             = branch_data.objects.all()
                    list_supplier           = supplier_data.objects.all()
                    list_pricing_level      = pricing_level_data.objects.all()

                # end
                
                return render(request,'users/pages/add_purchase_order.html',{'list_pricing_level':list_pricing_level,'list_supplier':list_supplier,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updatePurchaseOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            if request.method=="POST":
                order_id            = request.POST['id']
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                # voucher_type_id     = request.POST['voucher_type_id']
                # voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                entry_type          = "Credit"
                num                 = int(request.POST['number_of_input']) + 1

                now                 = datetime.now()
                # additional
                supplier_id                 = request.POST['supplier_id']   
                supplier_id                 = supplier_data.objects.get(pk=supplier_id)
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)



                update_data         = order_data.objects.filter(id=order_id).update(
                                        entity_id       = entity_id,
                                        branch_id       = branch_id,
                                        # voucher_type_id = voucher_type_id,
                                        date            = date,
                                        due_date        = due_date,
                                        due_days        = due_days,
                                        description     = description,
                                        total_amount    = total_amount,
                                        # exchange_rate   = exchange_rate,
                                        entry_type      = entry_type,
                                        updated_at      = now,
                                        # additional
                                        supplier_id         = supplier_id,
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                
                print(dict(request.POST.items()))

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = unit_data.objects.get(id=unit_id)

                        order_id        = order_data.objects.get(id=order_id)

                        insert_data     = order_product_data(order_id=order_id,unit_id=unit_id,product_id=product_id,product_code=product_code,po_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
                        insert_data.save()

                # additional
                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                order_id                    = order_data.objects.get(id=order_id)

                update_previous_additional  = additional_cost_data.objects.filter(order_id=order_id).update(order_id=None)
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(order_id=order_id,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-purchase-order')
            else:
                order_id            = request.GET['id']
                # additional
            
                get_order_data = order_data.objects.get(pk=order_id)
                    
                get_order_product   = order_product_data.objects.filter(order_id=get_order_data) #changed invoice_id> latesed invoice
                # end


                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_type_data.objects.all()
                list_products       = product_data.objects.all()


                list_entity         = entity_data.objects.all()

                # additional

                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_supplier       = supplier_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(order_id=get_order_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1

                list_pricing_level =pricing_level_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all()
                print(get_additional_order_product)

                return render(request,'users/pages/update_purchase_order.html',{'list_pricing_level':list_pricing_level,'list_supplier':list_supplier,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'list_entity':list_entity,'get_data':get_order_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletePurchaseOrderProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_order_data  = product_data.order_id

            total_amount    = float(get_order_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = order_product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-purchase-order') + f'?id={product_data.order_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-purchase-order')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletePurchaseOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            get_id      = request.POST['id']
            fromReg     = order_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-purchase-order')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-purchase-order')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



def getPurchaseVoucherNumber(request):
    if request.session.has_key('userId'):
        voucher_series_id   = request.GET['voucher_series_id']

        check_get_data      = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
        
        voucher_number      = 1

        if(check_get_data):
            get_latest_data = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
            voucher_number  = int(get_latest_data.voucher_number) + int(1)

        return  JsonResponse({"voucher_number": voucher_number})
    else:
        return redirect('admin-login')



def getProductData(request):
    if request.session.has_key('userId'):
        product_id          = request.GET['product_id']
        debit_ledger_id     = request.GET.get('debit_ledger_id')
        credit_ledger_id    = request.GET.get('credit_ledger_id')

        get_product_data    = product_data.objects.get(id=product_id)

        get_batch           = batch_data.objects.all().filter(product_id=product_id).order_by('expiry_date')

        get_batch_data      = []
        for batch in get_batch:
            get_batch_data.append({
                'id'    : batch.id,
                'name'  : batch.name
            })

        # product_dict        = model_to_dict(get_product_data)

        ####--- get previous product
        previous_dict           = []
        if debit_ledger_id:
            get_previous_data   = order_product_data.objects.filter(product_id=product_id,invoice_id__debit_ledger_id=debit_ledger_id).order_by('-id')[:5]

            for previous_data in get_previous_data:
                previous_dict.append({   
                                        'id'                : previous_data.id,
                                        'product_id'        : previous_data.product_id.id,
                                        'product_name'      : previous_data.product_id.name,
                                        'product_code'      : previous_data.product_id.product_code,
                                        'amount'            : previous_data.amount,
                                        'created_at'        : previous_data.created_at,
                                    })
        elif credit_ledger_id:
            get_previous_data   = order_product_data.objects.filter(product_id=product_id,invoice_id__credit_ledger_id=credit_ledger_id).order_by('-id')[:5]

            for previous_data in get_previous_data:
                print(previous_data.id)
                print("#########")
                previous_dict.append({   
                                        'id'                : previous_data.id,
                                        'product_id'        : previous_data.product_id.id,
                                        'product_name'      : previous_data.product_id.name,
                                        'product_code'      : previous_data.product_id.product_code,
                                        'amount'            : previous_data.amount,
                                        'created_at'        : previous_data.created_at,
                                    })
        ####-- 

        ##---get godown , rack and tax
        list_godown         = godown_data.objects.all()
        list_rack           = rack_data.objects.all()
        list_tax            = tax_data.objects.all()

        get_godown_ids      = [] if not get_product_data.godown_id else get_product_data.godown_id.split(',')
        get_rack_ids        = [] if not get_product_data.rack_id else get_product_data.rack_id.split(',')

        all_godown          = []
        for godown in list_godown:
            selected        = ''
            if  str(godown.id) in get_godown_ids:
                selected    = 'selected'
            
            all_godown.append({
                'id'        : godown.id,
                'name'      : godown.name,
                'selected'  : selected
            })


        all_rack            = []
        for rack in list_rack:
            selected        = ''
            if  str(rack.id) in get_rack_ids:
                selected    = 'selected'
            
            all_rack.append({
                'id'        : rack.id,
                'name'      : rack.name,
                'selected'  : selected
            })


        all_tax             = []
        for tax in list_tax:
            selected        = ''
            if get_product_data.tax_id: 
                if tax.id == get_product_data.tax_id: 
                    selected= 'selected'

            all_tax.append({
                'id'        : tax.id,
                'tax'       : tax.tax,
                'rate_perc' : tax.rate_perc,
                'cgst'      : tax.cgst,
                'sgst'      : tax.sgst,
                'igst'      : tax.igst,
                'selected'  : selected
            })
        ##--
        print("product dataaaaaaaaaaa")
        product_dict        =   {
                                    'product_code'      : get_product_data.product_code,
                                    'unit_id'           : get_product_data.unit_id.id,
                                    'unit'              : get_product_data.unit_id.unit,
                                    'unit_formal_name'  : get_product_data.unit_id.formal_name,
                                    'purchase_rate'     : get_product_data.purchase_rate,
                                    'sac'               : get_product_data.sac,
                                    'hsn'               : get_product_data.hsn,
                                    'discount_value'    : get_product_data.discount_value,
                                    'warehouse_id'      : get_product_data.warehouse_id.id,
                                    'size_id'           : get_product_data.size_id.id,
                                    'model_number_id'   : get_product_data.model_number_id.id,           
                                    'all_godown'        : all_godown,
                                    'all_rack'          : all_rack,
                                    'all_tax'           : all_tax,
                                    'tax_id'            : None if not get_product_data.tax_id else get_product_data.tax_id.id,
                                    'tax'               : None if not get_product_data.tax_id else get_product_data.tax_id.tax,
                                    'tax_rate'          : None if not get_product_data.tax_id else get_product_data.tax_id.rate_perc,
                                    'cgst'              : None if not get_product_data.tax_id else get_product_data.tax_id.cgst,
                                    'sgst'              : None if not get_product_data.tax_id else get_product_data.tax_id.sgst,
                                    'igst'              : None if not get_product_data.tax_id else get_product_data.tax_id.igst,
                                    'batch_data'        : get_batch_data,
                                    'previous_product'  : previous_dict
                                }

        print('----------------')
        print(product_dict)
        
        return  JsonResponse({"models_to_return": product_dict})
    else:
        return redirect('admin-login')


def getPreviousProductData(request):
    if request.session.has_key('userId'):
        product_id          = request.GET['id']

        get_previous_data   = order_product_data.objects.get(id=product_id)
        list_tax            = tax_data.objects.all()

        all_tax             = []
        for tax in list_tax:
            selected        = ''
            if get_previous_data.tax_id: 
                if tax.id == get_previous_data.tax_id: 
                    selected= 'selected'

            all_tax.append({
                'id'        : tax.id,
                'tax'       : tax.tax,
                'rate_perc' : tax.rate_perc,
                'cgst'      : tax.cgst,
                'sgst'      : tax.sgst,
                'igst'      : tax.igst,
                'selected'  : selected
            })

        previous_data       =   {   
                                    'id'                : get_previous_data.id,
                                    'product_id'        : get_previous_data.product_id.id,
                                    'product_name'      : get_previous_data.product_id.name,
                                    'product_code'      : get_previous_data.product_id.product_code,
                                    'amount'            : get_previous_data.amount,
                                    'discount_type'     : get_previous_data.discount_type,
                                    'discount'          : get_previous_data.discount,
                                    'pretax_amount'     : get_previous_data.pretax_amount,
                                    'product_rate'      : get_previous_data.product_rate,
                                    'cgst'              : get_previous_data.cgst,
                                    'sgst'              : get_previous_data.sgst,
                                    'igst'              : get_previous_data.igst,
                                    'po_quantity'       : get_previous_data.po_quantity,
                                    'so_quantity'       : get_previous_data.so_quantity,
                                    'created_at'        : get_previous_data.created_at,
                                    'tax_amount'        : get_previous_data.tax_amount,
                                    'all_tax'           : all_tax
                                }

        return  JsonResponse({"models_to_return": previous_data})
    else:
        return redirect('admin-login')


def getAvailableProductQuantity(request):
    if request.session.has_key('userId'):
        print("available")
        product_id          = request.GET['product_id']
        batch_id            = request.GET['batch_id']

        purchase_products   = order_product_data.objects.filter(product_id=product_id,batch_id=batch_id)
        sum_po_quantity     = purchase_products.aggregate(total_po_quantity=Sum('po_quantity'))['total_po_quantity']
        sum_so_quantity     = purchase_products.aggregate(total_so_quantity=Sum('so_quantity'))['total_so_quantity']

        available_quantity  = sum_po_quantity - sum_so_quantity

        result              =   {
                                    'available_quantity'    : available_quantity
                                }

        return  JsonResponse({"models_to_return": result})
    else:
        return redirect('admin-login')




# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listPurchaseInvoice(request):
    if request.session.has_key('userId'):
        
        
        # latest_invoices = invoice_data.objects.filter(entry_type='Credit', invoice_id__isnull=False).values('id').annotate(
        #     max_invoice_id=Max('invoice_id'))
        # filter section
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write'] or role_permission['purchase_read']):
            get_data            = invoice_data.objects.all().filter(entry_type='Credit',invoice_id=None).order_by('date')
            branch_list         = branch_data.objects.all().order_by('-id')
            voucher_type_list   = voucher_type_data.objects.all()
            name                =''
            selected_branch     =0
            start_date          =''
            end_date            =''
            selected_type       =0
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                selected_type               = int(request.POST.get('selected_type')) 
                
                if selected_branch or name or start_date or end_date or selected_type:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if selected_type:
                        get_data             = get_data.filter(voucher_type_id=selected_type)


                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce

            
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('order_id__order_number', 'branch_id__name', 'exchange_rate','date','due_days','description','total_amount','against','entry_type','cheque_number')), cls=DjangoJSONEncoder)



            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['purchase_write']:
                write=1
            
            return render(request,'users/pages/list_purchase_invoice.html',{'write':write,'get_data' : get_data,'selected_type':selected_type,'voucher_list':voucher_type_list,'selected_branch':selected_branch,'branch_list':branch_list,'start_date':start_date,'end_date':end_date,'branch_list':branch_list,'name':name})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listPurchaseInvoiceHistory(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write'] or role_permission['purchase_read']):
            invoice_id  = request.GET['id']

            get_data    = invoice_data.objects.all().filter(entry_type='Credit',invoice_id=invoice_id).order_by('-id')
            
            write=0
            if role_permission['purchase_read']:
                write=1
            return render(request,'users/pages/list_purchase_invoice.html',{'write':write,'get_data' : get_data,'history':True})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addPurchaseInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            if request.method=="POST":             
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id) ##voucher series id
                voucher_number      = request.POST['order_number']
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                roundoff            = request.POST['roundoff']
                # exchange_rate       = request.POST['exchange_rate']
                num                 = int(request.POST['number_of_input']) + 1
                # order_id            = order_data.objects.get(id=order_id)
                entry_type          = 'Credit'
                created_by          = user_data.objects.get(id=request.session['userId'])
                financial_year_id   = financial_year_data.objects.get(active=True)

                # debit_ledger_ids            = request.POST.getlist('debit_ledger_ids[]')
                # comma_separated_ids         = ','.join(debit_ledger_ids)

                # credit_ledger_ids           = request.POST.getlist('credit_ledger_ids[]')
                # comma_separated_credit_ids  = ','.join(credit_ledger_ids)

                debit_ledger_id             = request.POST['debit_ledger_id']
                credit_ledger_id            = request.POST['credit_ledger_id']

                debit_ledger_id             = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id            = accounting_ledger_data.objects.get(id=credit_ledger_id)

                bill_by_bill_id             = request.POST.get('bill_by_bill_id')
                bill_description            = request.POST.get('bill_description')

                now                         = datetime.now()



                # additional
                
                cgstin                      = request.POST['cgstin']  
                shipping_address            = request.POST['shipping_address']
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl             = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                num_additional              = int(request.POST['number_of_additionalinput']) + 1
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)


                
                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           =entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        due_date            = due_date,
                                        due_days            = due_days,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        created_by          = created_by,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        roundoff            = roundoff,
                                        created_at          = now,
                                        updated_at          = now,


                                        # additional
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                insert_invoice_data.save()
                
                                            

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        get_id          = request.POST.get('product['+str(x)+']id')
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')
                        godown_id       = request.POST.get('product['+str(x)+']godown_id')
                        rack_id         = request.POST.get('product['+str(x)+']rack_id')
                        batch_id        = request.POST.get('product['+str(x)+']batch_id')
                        tax_id          = request.POST.get('product['+str(x)+']tax_id')
                        tax_amount      = request.POST.get('product['+str(x)+']tax_amount')
                        discount_type   = request.POST.get('product['+str(x)+']discount_type')
                        discount        = request.POST.get('product['+str(x)+']discount')
                        pretax_amount   = request.POST.get('product['+str(x)+']pretax_amount')
                        entry_type      = "Credit"

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = None if not unit_id else unit_data.objects.get(id=unit_id)
                        godown_id       = None if not godown_id else godown_data.objects.get(id=godown_id)
                        rack_id         = None if not rack_id else rack_id
                        rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
                        tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                        batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                        entity_id       = branch_id.entity_id

                        insert_data     = order_product_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,discount_type=discount_type,discount=discount,pretax_amount=pretax_amount,product_rate=purchase_rate,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
                        insert_data.save()


                if not bill_by_bill_id:
                    insert_bill_by_bill = bill_by_bill_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number_id   = insert_voucher_number,
                                            financial_year_id   = financial_year_id,
                                            # exchange_rate       = exchange_rate,
                                            date                = date,
                                            due_date            = due_date,
                                            due_days            = due_days,
                                            total_amount        = total_amount,
                                            entry_type          = entry_type,
                                            invoice_id          = insert_invoice_data,
                                            debit_ledger_id     = debit_ledger_id,
                                            credit_ledger_id    = credit_ledger_id,
                                            created_by          = created_by,
                                            bill_description    = bill_description,
                                            created_at          = now,
                                            updated_at          = now
                                            )
                    insert_bill_by_bill.save()
                else:
                    update_bill         =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now) 
                        
                # additional

                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            print(get_id)
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-purchase-invoice')
            else:
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all()

                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                list_entity         = entity_data.objects.all()
                
                
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                # additional
                if get_user_data.default_entity_id:
                    list_branch         = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_supplier       = supplier_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_pricing_level   =pricing_level_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch             = branch_data.objects.all()
                    list_supplier           = supplier_data.objects.all()
                    list_pricing_level      = pricing_level_data.objects.all()

                # end

                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Purchase').exists()
                
                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Purchase')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")

                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                    #####--- accounting ledger
                get_bill_by_bill                    = bill_by_bill_data.objects.filter(entry_type__in=['Payment', 'Receipt'])

                return render(request,'users/pages/add_purchase_invoice.html',{'list_pricing_level':list_pricing_level,'list_supplier':list_supplier,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger,'get_bill_by_bill':get_bill_by_bill})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def generatePurchaseInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            if request.method=="POST":
                order_id            = request.POST['id']
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id) ##voucher series id
                voucher_number      = request.POST['order_number']
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = order_data.objects.get(id=order_id)
                entry_type          = 'Credit'
                created_by          = user_data.objects.get(id=request.session['userId'])
                financial_year_id   = financial_year_data.objects.get(active=True)
                entity_id           = branch_id.entity_id

                # debit_ledger_ids            = request.POST.getlist('debit_ledger_ids[]')
                # comma_separated_ids         = ','.join(debit_ledger_ids)

                # credit_ledger_ids           = request.POST.getlist('credit_ledger_ids[]')
                # comma_separated_credit_ids  = ','.join(credit_ledger_ids)

                debit_ledger_id             = request.POST['debit_ledger_id']
                credit_ledger_id            = request.POST['credit_ledger_id']

                debit_ledger_id             = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id            = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                         = datetime.now()
                # additional
                
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)




                update_data             = order_data.objects.filter(id=order_id.id).update(generate_invoice=True,updated_at=now)
                
                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        order_id            = order_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        due_date            = due_date,
                                        due_days            = due_days,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        created_by          = created_by,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_at          = now,
                                        updated_at          = now,
                                        # additional
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                insert_invoice_data.save()

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        get_id          = request.POST.get('product['+str(x)+']id')
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')
                        godown_id       = request.POST.get('product['+str(x)+']godown_id')
                        rack_id         = request.POST.get('product['+str(x)+']rack_id')
                        batch_id        = request.POST.get('product['+str(x)+']batch_id')
                        tax_id          = request.POST.get('product['+str(x)+']tax_id')
                        tax_amount      = request.POST.get('product['+str(x)+']tax_amount')
                        entry_type      = "Credit"

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = None if not unit_id else unit_data.objects.get(id=unit_id)
                        godown_id       = None if not godown_id else godown_data.objects.get(id=godown_id)
                        rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
                        tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                        batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                        entity_id       = branch_id.entity_id

                        insert_data     = order_product_data(order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
                        insert_data.save()


                insert_bill_by_bill     = bill_by_bill_data(
                                            order_id            = order_id,
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number_id   = insert_voucher_number,
                                            financial_year_id   = financial_year_id,
                                            # exchange_rate       = exchange_rate,
                                            date                = date,
                                            due_date            = due_date,
                                            due_days            = due_days,
                                            total_amount        = total_amount,
                                            entry_type          = entry_type,
                                            invoice_id          = insert_invoice_data,
                                            created_by          = created_by,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_bill_by_bill.save()

                # additional
                num_additional      = int(request.POST['number_of_additionalinput']) + 1

                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                        
                messages.success(request, 'Successfully added.')
                return redirect('list-purchase-invoice')
            else:
                order_id            = request.GET['id']
                get_order_data      = order_data.objects.get(id=order_id)
                list_entity         = entity_data.objects.all()
                print(get_order_data.entity_id)
                get_order_product   = order_product_data.objects.all().filter(order_id=order_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all()

                list_product_data   = []
                i                   = 0
                for product in get_order_product:
                    get_batch       = batch_data.objects.all().filter(product_id=product.product_id.id)

                    tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
                    tax_amount      = 0
                    if tax_id:
                        tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
                        

                    list_product_data.append({
                        'key'           : i,
                        'id'            : product.id,
                        'product_id'    : product.product_id,
                        'product_code'  : product.product_code,
                        'quantity'      : product.po_quantity if not product.quantity else product.quantity,
                        'unit_id'       : product.unit_id,
                        'godown_id'     : product.product_id.godown_id if not product.godown_id else product.godown_id,
                        'rack_id'       : product.product_id.rack_id if not product.rack_id else product.rack_id,
                        'tax_id'        : product.product_id.tax_id if not product.tax_id else product.tax_id,
                        'purchase_rate' : product.purchase_rate,
                        'amount'        : float(product.amount) + tax_amount,
                        'get_batch'     : get_batch,
                        'tax_amount'    : tax_amount

                    })
                    i = i + 1

                

                total_product                   = len(list_product_data) - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Purchase')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger


            # additional
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_supplier       = supplier_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(order_id=get_order_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1
                list_pricing_level =pricing_level_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all() 


                return render(request,'users/pages/generate_purchase_invoice.html',{'list_pricing_level':list_pricing_level,'total_product':total_product,'list_supplier':list_supplier,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'list_entity':list_entity,'get_data':get_order_data,'get_order_product':list_product_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'total_product':total_product,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletePurchaseOrderProductInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            print(get_id)
            
            total_amount    = product_data.amount
            get_order_data  = product_data.order_id

            total_amount    = float(get_order_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = order_product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('generate-purchase-invoice') + f'?id={product_data.order_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-purchase-order')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


def is_what_percent_of(num_a, num_b):
    return round((num_a / 100) * num_b,2)




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updatePurchaseInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_write']):
            if request.method=="POST":
                invoice_id          = request.POST['id']
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Credit'

                # debit_ledger_ids            = request.POST.getlist('debit_ledger_ids[]')
                # comma_separated_ids         = ','.join(debit_ledger_ids)

                # credit_ledger_ids           = request.POST.getlist('credit_ledger_ids[]')
                # comma_separated_credit_ids  = ','.join(credit_ledger_ids)

                debit_ledger_id             = request.POST['debit_ledger_id']
                credit_ledger_id            = request.POST['credit_ledger_id']

                debit_ledger_id             = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id            = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                         = datetime.now()


                # additional
                
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)
                
                insert_invoice_data         = invoice_data(
                                                entity_id           =entity_id,
                                                order_id            = order_id,
                                                branch_id           = branch_id,
                                                voucher_type_id     = voucher_type_id.voucher_type_id,
                                                date                = date,
                                                due_date            = due_date,
                                                due_days            = due_days,
                                                description         = description,
                                                total_amount        = total_amount,
                                                # exchange_rate       = exchange_rate,
                                                invoice_id          = invoice_id,
                                                entry_type          = entry_type,
                                                debit_ledger_id     = debit_ledger_id,
                                                credit_ledger_id    = credit_ledger_id,
                                                voucher_series_id   = voucher_type_id,
                                                created_at          = now,
                                                updated_at          = now,
                                                # additional
                                                shipping_address    = shipping_address,
                                                receiver_address    = receiver_address,
                                                ewaybill            = ewaybill,
                                                transportid         = transportid,
                                                vehicle_number      = vehicle_number,
                                                lrno                = lrno,
                                                no_of_cases         = no_of_cases,
                                                weight              = weight,
                                                pricing_lvl         = pricing_lvl,
                                                user_id             = user_id
                                                
                                            )
                insert_invoice_data.save()

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        get_id          = request.POST.get('product['+str(x)+']id')
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')
                        godown_id       = request.POST.get('product['+str(x)+']godown_id')
                        rack_id         = request.POST.get('product['+str(x)+']rack_id')
                        batch_id        = request.POST.get('product['+str(x)+']batch_id')
                        tax_id          = request.POST.get('product['+str(x)+']tax_id')
                        tax_amount      = request.POST.get('product['+str(x)+']tax_amount')

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = None if not unit_id else unit_data.objects.get(id=unit_id)
                        godown_id       = None if not godown_id else godown_data.objects.get(id=godown_id)
                        rack_id         = None if not rack_id else  rack_data.objects.get(id=rack_id)
                        tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                        batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                        entity_id       = branch_id.entity_id
                        order_product_id= None if not get_id else order_product_data.objects.get(id=get_id)
                        
                        insert_data     = order_product_data(order_product_id=order_product_id,order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
                        insert_data.save()

                

                # additional
                
                num_additional      = int(request.POST['number_of_additionalinput']) + 1

                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()
                            

                messages.success(request, 'Successfully added.')
                return redirect('list-purchase-invoice')
            else:
                invoice_id          = request.GET['id']

                # additional
                initial_invoice     = invoice_id
                get_invoice_data    = invoice_data.objects.filter(invoice_id=invoice_id)
                if get_invoice_data: 
                    get_invoice_data    =   get_invoice_data.last()
                else:
                    get_invoice_data = invoice_data.objects.get(pk=invoice_id)
                    
                get_order_product   = order_product_data.objects.filter(invoice_id=get_invoice_data) #changed invoice_id> latesed invoice
                # end


                total_product = 0 if not get_order_product else get_order_product.count() - 1

                list_product_data   = []
                i                   = 0
                for product in get_order_product:
                    get_batch       = batch_data.objects.all().filter(product_id=product.product_id.id)

                    tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
                    tax_amount      = 0
                    if tax_id:
                        tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
                        

                    list_product_data.append({
                        'key'           : i,
                        'id'            : product.id,
                        'product_id'    : product.product_id,
                        'product_code'  : product.product_code,
                        'quantity'      : product.po_quantity if not product.quantity else product.quantity,
                        'unit_id'       : product.unit_id,
                        'godown_id'     : product.product_id.godown_id if not product.godown_id else product.godown_id,
                        'rack_id'       : product.product_id.rack_id if not product.rack_id else product.rack_id,
                        'tax_id'        : product.product_id.tax_id if not product.tax_id else product.tax_id,
                        'purchase_rate' : product.purchase_rate,
                        'amount'        : float(product.amount) + tax_amount,
                        'get_batch'     : get_batch,
                        'tax_amount'    : tax_amount

                    })
                    i = i + 1


                total_product       = len(list_product_data) - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Purchase')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                



                # additional
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)
                list_supplier       = supplier_data.objects.all().filter(entity_id=get_order_product[0].entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(invoice_id=get_invoice_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1
                list_pricing_level =pricing_level_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all()

                return render(request,'users/pages/update_purchase_invoice.html',{'initial_invoice':initial_invoice,'list_pricing_level':list_pricing_level,'total_product':total_product,'list_supplier':list_supplier,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'list_entity':list_entity,'invoice_id':invoice_id,'get_data':get_invoice_data,'get_order_product':list_product_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'total_product':total_product,'all_debit_account_ledger':get_debit_account_ledger,'all_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSalesOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write'] or role_permission['sales_read']):
        
            get_data    = order_data.objects.all().filter(entry_type='Debit').order_by('-id')
            list_orders = []

            # filter section
            get_data            = order_data.objects.all().filter(entry_type='Debit').order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(pk__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('order_number', 'branch_id__name', 'order_number', 'exchange_rate','date','due_days','description','total_amount','generate_invoice','entry_type')), cls=DjangoJSONEncoder)

            

            for order in get_data:
                get_invoice_data= invoice_data.objects.all().filter(order_id=order.id,invoice_id=None)
                invoice_id=None
                if get_invoice_data:
                    invoice_id  = get_invoice_data[0]
                    invoice_id  = invoice_data.objects.get(pk=invoice_id.pk)
                    invoice_id  = invoice_id.id

                list_orders.append({
                    'id'                : order.id,
                    'order_number'      : order.order_number,
                    'branch_id'         : order.branch_id,
                    'voucher_type_id'   : order.voucher_type_id,
                    'total_amount'      : order.total_amount,
                    'generate_invoice'  : order.generate_invoice,
                    'invoice_id'        : invoice_id,
                    'date'              : order.date
                })


            page_number = request.GET.get("page",1)

            paginator = Paginator(list_orders, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['sales_write']:
                write=1
            
            return render(request,'users/pages/list_sales_order.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewSalesOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            if request.method=="POST":
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                # voucher_type_id     = request.POST['voucher_type_id']
                # voucher_type_id     = voucher_type_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                entry_type          = "Debit"
                num                 = int(request.POST['number_of_input']) + 1

                now                 = datetime.now()
                # additional
                
                cgstin                      = request.POST['cgstin']  
                shipping_address            = request.POST['shipping_address']
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl             = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                num_additional              = int(request.POST['number_of_additionalinput']) + 1
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)


                insert_order_data   = order_data(
                                        entity_id       = entity_id,
                                        branch_id       = branch_id,
                                        # voucher_type_id=voucher_type_id,
                                        date            = date,
                                        due_date        = due_date,
                                        due_days        = due_days,
                                        description     = description,
                                        total_amount    = total_amount,
                                        # exchange_rate   = exchange_rate,
                                        entry_type      = entry_type,
                                        created_at      = now,
                                        updated_at      = now,
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                insert_order_data.save()
                

                for x in range(int(num)):
                    product_id      = request.POST.get('product['+str(x)+']product_id')
                    product_code    = request.POST.get('product['+str(x)+']product_code')
                    quantity        = request.POST.get('product['+str(x)+']quantity')
                    purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                    amount          = request.POST.get('product['+str(x)+']amount')
                    unit_id         = request.POST.get('product['+str(x)+']unit_id')

                    product_id      = product_data.objects.get(id=product_id)
                    unit_id         = unit_data.objects.get(id=unit_id)

                    insert_data     = order_product_data(order_id=insert_order_data,unit_id=unit_id,product_id=product_id,product_code=product_code,so_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
                    insert_data.save()
                
                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            print(get_id)
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(order_id=insert_order_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-sales-order')
            else:

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_type_data.objects.all()
                list_products       = product_data.objects.all()
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                # additional
                if get_user_data.default_entity_id:
                    list_branch         = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_customer       = customer_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_pricing_level   =pricing_level_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch             = branch_data.objects.all()
                    list_customer           = customer_data.objects.all()
                    list_pricing_level      = pricing_level_data.objects.all()

                # end

                return render(request,'users/pages/add_sales_order.html',{'list_pricing_level':list_pricing_level,'list_customer':list_customer,'list_entity':list_entity,'list_branch':list_branch,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateSalesOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            if request.method=="POST":
                order_id            = request.POST['id']
                
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                # voucher_type_id     = request.POST['voucher_type_id']
                # voucher_type_id     = voucher_type_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                entry_type          = "Debit"
                num                 = int(request.POST['number_of_input']) + 1

                now                 = datetime.now()
                # additional
                
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)


                update_data         = order_data.objects.filter(id=order_id).update(
                                        entity_id       =entity_id,
                                        branch_id       = branch_id,
                                        # voucher_type_id = voucher_type_id,
                                        date            = date,
                                        due_date        = due_date,
                                        due_days        = due_days,
                                        description     = description,
                                        total_amount    = total_amount,
                                        # exchange_rate   = exchange_rate,
                                        entry_type      = entry_type,
                                        updated_at      = now,
                                        # additional
                                        customer_id         = customer_id,
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                
                print(dict(request.POST.items()))

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = unit_data.objects.get(id=unit_id)

                        order_id        = order_data.objects.get(id=order_id)

                        insert_data     = order_product_data(order_id=order_id,unit_id=unit_id,product_id=product_id,product_code=product_code,so_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
                        insert_data.save()
                # additional
                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                order_id                    = order_data.objects.get(id=order_id)

                update_previous_additional  = additional_cost_data.objects.filter(order_id=order_id).update(order_id=None)
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(order_id=order_id,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-sales-order')
            else:
                order_id            = request.GET['id']
                # additional
            
                get_order_data = order_data.objects.get(pk=order_id)
                    
                get_order_product   = order_product_data.objects.filter(order_id=get_order_data) #changed invoice_id> latesed invoice
                # end

                get_order_data      = order_data.objects.get(id=order_id)

                list_voucher_types  = voucher_type_data.objects.all()
                list_products       = product_data.objects.all()

                get_order_product   = order_product_data.objects.all().filter(order_id=order_id,invoice_id=None)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)

                # additional

                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_customer       = customer_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(order_id=get_order_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1

                list_pricing_level =pricing_level_data.objects.all()
                list_products       = product_data.objects.all()
                print(get_additional_order_product)

                return render(request,'users/pages/update_sales_order.html',{'list_pricing_level':list_pricing_level,'list_customer':list_customer,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'list_entity':list_entity,'get_data':get_order_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSalesOrderProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_order_data  = product_data.order_id

            total_amount    = float(get_order_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = order_product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-sales-order') + f'?id={product_data.order_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-sales-order')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSalesOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            get_id      = request.POST['id']
            fromReg     = order_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-sales-order')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-sales-order')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSalesInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write'] or role_permission['sales_read']):
        
            get_data    = invoice_data.objects.all().filter(entry_type='Debit',invoice_id=None).order_by('-id')
            # filter section
            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
            
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)


            request.session['get_data']=json.dumps(list(get_data.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['sales_write']:
                write=1
            
            return render(request,'users/pages/list_sales_invoice.html',{'write':write,'get_data' : get_data,'branch_list':branch_list,'selected_branch':selected_branch,'name':name,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listSalesInvoiceHistory(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write'] or role_permission['sales_read']):
            invoice_id  = request.GET['id']
            get_data    = invoice_data.objects.all().filter(entry_type='Debit',invoice_id=invoice_id).order_by('-id')

            return render(request,'users/pages/list_sales_invoice.html',{'get_data' : get_data,'history':True})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def generateSalesInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            if request.method=="POST":
                order_id            = request.POST['id']
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id) ##voucher series id
                voucher_number      = request.POST['order_number']
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = order_data.objects.get(id=order_id)
                entry_type          = 'Debit'
                created_by          = user_data.objects.get(id=request.session['userId'])
                financial_year_id   = financial_year_data.objects.get(active=True)
                entity_id           = branch_id.entity_id


                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                # additional
                
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)


                update_data             = order_data.objects.filter(id=order_id.id).update(generate_invoice=True,updated_at=now)
                
                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        entity_id           = entity_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        due_date            = due_date,
                                        due_days            = due_days,
                                        description         = description,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        created_by          = created_by,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_at          = now,
                                        updated_at          = now,
                                        # additional
                                        
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                insert_invoice_data.save()

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        get_id          = request.POST.get('product['+str(x)+']id')
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')
                        godown_id       = request.POST.get('product['+str(x)+']godown_id')
                        rack_id         = request.POST.get('product['+str(x)+']rack_id')
                        batch_id        = request.POST.get('product['+str(x)+']batch_id')
                        tax_id          = request.POST.get('product['+str(x)+']tax_id')
                        tax_amount      = request.POST.get('product['+str(x)+']tax_amount')
                        entry_type      = "Debit"

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = unit_data.objects.get(id=unit_id)
                        godown_id       = godown_data.objects.get(id=godown_id)
                        rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
                        tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                        batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                        entity_id       = branch_id.entity_id

                        insert_data     = order_product_data(order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
                        insert_data.save()


                insert_bill_by_bill     = bill_by_bill_data(
                                            order_id            = order_id,
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number_id   = insert_voucher_number,
                                            financial_year_id   = financial_year_id,
                                            date                = date,
                                            due_date            = due_date,
                                            due_days            = due_days,
                                            total_amount        = total_amount,
                                            entry_type          = entry_type,
                                            invoice_id          = insert_invoice_data,
                                            created_by          = created_by,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_bill_by_bill.save()

                # additional
                num_additional      = int(request.POST['number_of_additionalinput']) + 1

                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                        
                messages.success(request, 'Successfully added.')
                return redirect('list-sales-invoice')
            else:
                order_id            = request.GET['id']
                get_order_data      = order_data.objects.get(id=order_id)
                get_order_product   = order_product_data.objects.all().filter(order_id=order_id)
                
                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Sales')
                list_products       = product_data.objects.all()

                list_product_data   = []
                i                   = 0
                for product in get_order_product:
                    get_batch       = batch_data.objects.all().filter(product_id=product.product_id.id)

                    tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
                    tax_amount      = 0
                    if tax_id:
                        tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
                        

                    list_product_data.append({
                        'key'           : i,
                        'id'            : product.id,
                        'product_id'    : product.product_id,
                        'product_code'  : product.product_code,
                        'quantity'      : product.so_quantity if not product.quantity else product.quantity,
                        'unit_id'       : product.unit_id,
                        'godown_id'     : product.product_id.godown_id if not product.godown_id else product.godown_id,
                        'rack_id'       : product.product_id.rack_id if not product.rack_id else product.rack_id,
                        'tax_id'        : product.product_id.tax_id if not product.tax_id else product.tax_id,
                        'purchase_rate' : product.purchase_rate,
                        'amount'        : float(product.amount) + tax_amount,
                        'get_batch'     : get_batch,
                        'tax_amount'    : tax_amount

                    })
                    i = i + 1

                total_product                   = len(list_product_data) - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Sales')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity                     = entity_data.objects.all()

                # additional
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_customer       = customer_data.objects.all().filter(entity_id=get_order_data.entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(order_id=get_order_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1
                list_pricing_level =pricing_level_data.objects.all()
                list_products       = product_data.objects.all() 

                return render(request,'users/pages/generate_sales_invoice.html',{'list_pricing_level':list_pricing_level,'total_product':total_product,'list_customer':list_customer,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'list_entity':list_entity,'get_data':get_order_data,'get_order_product':list_product_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'total_product':total_product,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addSalesInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id) ##voucher series id
                voucher_number      = request.POST['order_number']
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Debit'
                created_by          = user_data.objects.get(id=request.session['userId'])
                financial_year_id   = financial_year_data.objects.get(active=True)

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                bill_by_bill_id     = request.POST.get('bill_by_bill_id')
                bill_description    = request.POST.get('bill_description')

                now                 = datetime.now()

                # additional
                
                cgstin                      = request.POST['cgstin']  
                shipping_address            = request.POST['shipping_address']
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl             = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                num_additional              = int(request.POST['number_of_additionalinput']) + 1
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)
                # additional
                status                      = request.POST.get('status','Pending')
                
                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        due_date            = due_date,
                                        due_days            = due_days,
                                        description         = description,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        created_by          = created_by,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_at          = now,
                                        updated_at          = now,
                                        # additional
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id,
                                        # additional
                                        status              = status
                                    )
                insert_invoice_data.save()

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        get_id          = request.POST.get('product['+str(x)+']id')
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')
                        godown_id       = request.POST.get('product['+str(x)+']godown_id')
                        rack_id         = request.POST.get('product['+str(x)+']rack_id')
                        batch_id        = request.POST.get('product['+str(x)+']batch_id')
                        tax_id          = request.POST.get('product['+str(x)+']tax_id')
                        tax_amount      = request.POST.get('product['+str(x)+']tax_amount')
                        entry_type      = "Debit"

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = unit_data.objects.get(id=unit_id)
                        godown_id       = godown_data.objects.get(id=godown_id)
                        rack_id         = None if rack_id == 'null' else rack_id
                        rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
                        tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                        batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                        entity_id       = branch_id.entity_id

                        insert_data     = order_product_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
                        insert_data.save()


                if not bill_by_bill_id:
                    insert_bill_by_bill = bill_by_bill_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number_id   = insert_voucher_number,
                                            financial_year_id   = financial_year_id,
                                            # exchange_rate       = exchange_rate,
                                            date                = date,
                                            due_date            = due_date,
                                            due_days            = due_days,
                                            total_amount        = total_amount,
                                            entry_type          = entry_type,
                                            invoice_id          = insert_invoice_data,
                                            debit_ledger_id     = debit_ledger_id,
                                            credit_ledger_id    = credit_ledger_id,
                                            created_by          = created_by,
                                            bill_description    = bill_description,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                    insert_bill_by_bill.save()
                else:
                    update_bill         =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now)
                        

                # additional

                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            print(get_id)
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                        
                messages.success(request, 'Successfully added.')
                return redirect('list-sales-invoice')
            else:
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Sales')
                list_products       = product_data.objects.all()

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Sales')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)


                # additional
                if get_user_data.default_entity_id:
                    list_branch         = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_customer       = customer_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_pricing_level   =pricing_level_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch             = branch_data.objects.all()
                    list_customer           = customer_data.objects.all()
                    list_pricing_level      = pricing_level_data.objects.all()

                get_bill_by_bill    = bill_by_bill_data.objects.filter(entry_type__in=['Payment', 'Receipt'])
                return render(request,'users/pages/add_sales_invoice.html',{'list_pricing_level':list_pricing_level,'list_customer':list_customer,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger,'get_bill_by_bill':get_bill_by_bill})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteSalesOrderProductInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_order_data  = product_data.order_id

            total_amount    = float(get_order_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = order_product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('generate-sales-invoice') + f'?id={product_data.order_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-sales-order')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateSalesInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_write']):
            if request.method=="POST":
                invoice_id          = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                invoice_id          = invoice_data.objects.get(id=invoice_id)
            
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                due_date            = request.POST['due_date']
                due_days            = request.POST['due_days']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Debit'


                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()

                # additional
                
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',None)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)

                # additional
                status                      = request.POST.get('status','Pending')

                
                insert_invoice_data = invoice_data(
                                        entity_id           = entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        due_date            = due_date,
                                        due_days            = due_days,
                                        description         = description,
                                        total_amount        = total_amount,
                                        invoice_id          = invoice_id,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        voucher_series_id   = voucher_type_id,
                                        created_at          = now,
                                        updated_at          = now,
                                        # additional
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id,
                                        status              = status
                                    )
                insert_invoice_data.save()

                for x in range(int(num)):
                    if(request.POST.get('product['+str(x)+']product_id')):
                        get_id          = request.POST.get('product['+str(x)+']id')
                        product_id      = request.POST.get('product['+str(x)+']product_id')
                        product_code    = request.POST.get('product['+str(x)+']product_code')
                        quantity        = request.POST.get('product['+str(x)+']quantity')
                        purchase_rate   = request.POST.get('product['+str(x)+']purchase_rate')
                        amount          = request.POST.get('product['+str(x)+']amount')
                        unit_id         = request.POST.get('product['+str(x)+']unit_id')
                        godown_id       = request.POST.get('product['+str(x)+']godown_id')
                        rack_id         = request.POST.get('product['+str(x)+']rack_id')
                        batch_id        = request.POST.get('product['+str(x)+']batch_id')
                        tax_id          = request.POST.get('product['+str(x)+']tax_id')
                        tax_amount      = request.POST.get('product['+str(x)+']tax_amount')

                        product_id      = product_data.objects.get(id=product_id)
                        unit_id         = unit_data.objects.get(id=unit_id)
                        godown_id       = godown_data.objects.get(id=godown_id)
                        rack_id         = None if not rack_id else  rack_data.objects.get(id=rack_id)
                        tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                        batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                        entity_id       = branch_id.entity_id
                        order_product_id= None if not get_id else order_product_data.objects.get(id=get_id)
                        
                        insert_data     = order_product_data(order_product_id=order_product_id,order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
                        insert_data.save()

                # additional
                
                num_additional      = int(request.POST['number_of_additionalinput']) + 1

                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()
                        
                messages.success(request, 'Successfully added.')
                return redirect('list-sales-invoice')
            else:
                invoice_id          = request.GET['id']
                # additional
                initial_invoice     = invoice_id
                get_invoice_data    = invoice_data.objects.filter(invoice_id=invoice_id)
                if get_invoice_data: 
                    get_invoice_data    =   get_invoice_data.last()
                else:
                    get_invoice_data = invoice_data.objects.get(pk=invoice_id)
                    
                get_order_product   = order_product_data.objects.filter(invoice_id=get_invoice_data) #changed invoice_id> latesed invoice
                # end


                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Sales')
                list_products       = product_data.objects.all()

                list_product_data   = []
                i                   = 0
                for product in get_order_product:
                    get_batch       = batch_data.objects.all().filter(product_id=product.product_id.id)

                    tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
                    tax_amount      = 0
                    if tax_id:
                        tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
                        

                    list_product_data.append({
                        'key'           : i,
                        'id'            : product.id,
                        'product_id'    : product.product_id,
                        'product_code'  : product.product_code,
                        'quantity'      : product.po_quantity if not product.quantity else product.quantity,
                        'unit_id'       : product.unit_id,
                        'godown_id'     : product.product_id.godown_id if not product.godown_id else product.godown_id,
                        'rack_id'       : product.product_id.rack_id if not product.rack_id else product.rack_id,
                        'tax_id'        : product.product_id.tax_id if not product.tax_id else product.tax_id,
                        'purchase_rate' : product.purchase_rate,
                        'amount'        : float(product.amount) + tax_amount,
                        'get_batch'     : get_batch,
                        'tax_amount'    : tax_amount

                    })
                    i = i + 1

                total_product       = len(list_product_data) - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Sales')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                
                invoice_id          = get_invoice_data.id if not get_invoice_data.invoice_id else get_invoice_data.invoice_id.id
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                # additional
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)
                list_customer       = customer_data.objects.all().filter(entity_id=get_order_product[0].entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(invoice_id=get_invoice_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1

                list_pricing_level =pricing_level_data.objects.all()
                list_products       = product_data.objects.all()

                return render(request,'users/pages/update_sales_invoice.html',{'initial_invoice':initial_invoice,'list_pricing_level':list_pricing_level,'total_product':total_product,'list_customer':list_customer,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'list_entity':list_entity,'invoice_id':invoice_id,'get_data':get_invoice_data,'get_order_product':list_product_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'total_product':total_product,'all_debit_account_ledger':get_debit_account_ledger,'all_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listPaymentVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
            get_data            = invoice_data.objects.all().filter(entry_type='Payment',invoice_id=None).order_by('-id')

            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['transactions_write']:
                write=1
            


            return render(request,'users/pages/list_payment_voucer.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewPaymentVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Payment'
                entity_id           = branch_id.entity_id
                financial_year_id   = financial_year_data.objects.get(active=True)
                created_by          = user_data.objects.get(id=request.session['userId'])

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                # additional
                supplier_id                 = request.POST['supplier_id']   
                supplier_id                 = supplier_data.objects.get(pk=supplier_id)
                cgstin                      = request.POST['cgstin']  
                shipping_address            = request.POST['shipping_address']
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',0)
                if pricing_lvl:
                    pricing_lvl             = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                num_additional              = int(request.POST['number_of_additionalinput']) + 1
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)

                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           =entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now,
                                        # additional
                                        supplier_id         = supplier_id,
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )
                insert_invoice_data.save()

                insert_bill_by_bill = bill_by_bill_data(
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_series_id   = voucher_type_id,
                                        voucher_number_id   = insert_voucher_number,
                                        financial_year_id   = financial_year_id,
                                        # exchange_rate       = exchange_rate,
                                        date                = date,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        invoice_id          = insert_invoice_data,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_bill_by_bill.save()
                # additional

                num_additional      = int(request.POST['number_of_additionalinput']) + 1
                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            print(get_id)
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                messages.success(request, 'Successfully added.')

                messages.success(request, 'Successfully added.')
                return redirect('list-payment-voucher')
            else:

                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Payment')
                list_account_ledger = accounting_ledger_data.objects.all()

                


                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Payment').exists()

                if check_golden_rule:

                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Payment')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                # additional
                if get_user_data.default_entity_id:
                    list_branch         = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_supplier       = supplier_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                    list_pricing_level   =pricing_level_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch             = branch_data.objects.all()
                    list_supplier           = supplier_data.objects.all()
                    list_pricing_level      = pricing_level_data.objects.all()

                # end
                list_products       = product_data.objects.all()

                return render(request,'users/pages/add_payment_voucher.html',{'list_products':list_products,'list_pricing_level':list_pricing_level,'list_supplier':list_supplier,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updatePaymentVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                invoice_id          = request.POST['id']
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Payment'

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                # additional
                supplier_id                 = request.POST['supplier_id']   
                supplier_id                 = supplier_data.objects.get(pk=supplier_id)
                ewaybill                    = request.POST['ewaybill']
                transportid                 = request.POST['transportid']
                vehicle_number              = request.POST['vehicle_number']
                lrno                        = request.POST['lrno']
                no_of_cases                 = request.POST['no_of_cases']
                weight                      = request.POST['weight']
                pricing_lvl                 = request.POST.get('pricing_lvl',0)
                if pricing_lvl:
                    pricing_lvl                 = pricing_level_data.objects.get(pk=pricing_lvl)
                now                         = datetime.now()
                receiver_address            = request.POST['receiver_address']
                shipping_address            = request.POST['shipping_address']
                user_id                     = request.session.get('userId')
                user_id                     = user_data.objects.get(pk=user_id)
                
                update_data         = invoice_data.objects.filter(id=invoice_id.id).update(
                                        entity_id           = entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        voucher_series_id   = voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        updated_at          = now,
                                        # additional
                                        supplier_id         = supplier_id,
                                        shipping_address    = shipping_address,
                                        receiver_address    = receiver_address,
                                        ewaybill            = ewaybill,
                                        transportid         = transportid,
                                        vehicle_number      = vehicle_number,
                                        lrno                = lrno,
                                        no_of_cases         = no_of_cases,
                                        weight              = weight,
                                        pricing_lvl         = pricing_lvl,
                                        user_id             = user_id
                                    )


                # additional
                update_previous_additional  = additional_cost_data.objects.filter(invoice_id=invoice_id).update(invoice_id=None)

                
                num_additional      = int(request.POST['number_of_additionalinput']) + 1

                if num_additional >= 1:
                    for i in range(int(num_additional)):
                        if request.POST.get('additionalproduct' + str(i)):
                            get_id = request.POST.get('additionalproduct' + str(i))
                            amount = request.POST.get('additionalproductamount'+str(i))
                            get_id  = product_data.objects.filter(pk=get_id)
                            print(get_id)
                            if get_id:
                                get_id= get_id[0]
                                
                                add_additional_cost_data=additional_cost_data(invoice_id=invoice_id,branch_id=branch_id,entity_id=entity_id,product_id=get_id,amount=amount,created_at=now,updated_at=now)
                                add_additional_cost_data.save()

                
                messages.success(request, 'Successfully added.')
                return redirect('list-payment-voucher')
            else:
                
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Payment')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

            
                # additional
                invoice_id          = request.GET['id']
                initial_invoice     = invoice_id
                get_invoice_data    = invoice_data.objects.filter(invoice_id=invoice_id)
                if get_invoice_data: 
                    get_invoice_data    =   get_invoice_data.last()
                else:
                    get_invoice_data = invoice_data.objects.get(pk=invoice_id)
                    
                # end

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Payment')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                

                # additional
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)
                list_supplier       = supplier_data.objects.all().filter(entity_id=get_invoice_data.entity_id)
                list_additional_product   = []
                i                              = 0
                get_additional_order_product   = additional_cost_data.objects.filter(invoice_id=get_invoice_data)
                total_additional_order_product = 0 if not get_additional_order_product else len(get_additional_order_product)-1

                if get_additional_order_product:
                    for product in get_additional_order_product:

                        
                        list_additional_product.append({
                            'key'           : i,
                            'id'            : product.product_id.id,
                            'amount'        : product.amount,
                        })
                        i = i + 1
                list_pricing_level =pricing_level_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Payment')
                list_products       = product_data.objects.all()

                return render(request,'users/pages/update_payment_voucher.html',{'list_products':list_products,'initial_invoice':initial_invoice,'list_pricing_level':list_pricing_level,'list_supplier':list_supplier,'total_additional_order_product':total_additional_order_product,'list_additional_product':list_additional_product,'total_items':total_items,'get_order_product':get_order_product,'list_entity':list_entity,'get_data':get_invoice_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletePaymentVoucherLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_invoice_data= product_data.invoice_id

            total_amount    = float(get_invoice_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            update_invoice  = invoice_data.objects.filter(id=product_data.invoice_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            
            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-payment-voucher') + f'?id={product_data.invoice_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-payment-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletePaymentVoucer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id      = request.POST['id']
            fromReg     = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-payment-voucher')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-payment-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listReceiptVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
            # filter section
            get_data    = invoice_data.objects.all().filter(entry_type='Receipt',invoice_id=None).order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        print(start_date)
                        print(type(start_date))
                        get_data             = get_data.filter(date__gte=start_date)
                        print(get_data)


                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

            

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['transactions_write']:
                write=1
            


            return render(request,'users/pages/list_receipt_voucer.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewReceiptVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Receipt'
                financial_year_id   = financial_year_data.objects.get(active=True)
                created_by          = user_data.objects.get(id=request.session['userId'])

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()

                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           =entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_invoice_data.save()

                insert_bill_by_bill = bill_by_bill_data(
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_series_id   = voucher_type_id,
                                        voucher_number_id   = insert_voucher_number,
                                        financial_year_id   = financial_year_id,
                                        # exchange_rate       = exchange_rate,
                                        date                = date,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        invoice_id          = insert_invoice_data,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_bill_by_bill.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-receipt-voucher')
            else:

                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Receipt')
                list_account_ledger = accounting_ledger_data.objects.all()


                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Receipt').exists()

                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Receipt')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_receipt_voucher.html',{'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateReceiptVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                invoice_id          = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Receipt'

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                
                update_data         = invoice_data.objects.filter(id=invoice_id.id).update(
                                        entity_id           = entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        voucher_series_id   = voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        updated_at          = now
                                    )

                
                messages.success(request, 'Successfully added.')
                return redirect('list-receipt-voucher')
            else:
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Receipt')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Receipt')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/update_receipt_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteReceiptVoucherLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_invoice_data= product_data.invoice_id

            total_amount    = float(get_invoice_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            update_invoice  = invoice_data.objects.filter(id=product_data.invoice_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = order_product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            
            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-receipt-voucher') + f'?id={product_data.invoice_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-receipt-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteReceiptVoucer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id      = request.POST['id']
            fromReg     = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-receipt-voucher')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-receipt-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listContraVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
        
            get_data    = invoice_data.objects.all().filter(entry_type='Contra',invoice_id=None).order_by('-id')

            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

            
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data  = paginator.get_page(page_number)
            write=0
            if role_permission['transactions_write']:
                write=1
        

            return render(request,'users/pages/list_contra_voucher.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewContraVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Contra'
                financial_year_id   = financial_year_data.objects.get(active=True)
                created_by          = user_data.objects.get(id=request.session['userId'])

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()

                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           =entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_invoice_data.save()

                insert_bill_by_bill = bill_by_bill_data(
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_series_id   = voucher_type_id,
                                        voucher_number_id   = insert_voucher_number,
                                        financial_year_id   = financial_year_id,
                                        # exchange_rate       = exchange_rate,
                                        date                = date,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        invoice_id          = insert_invoice_data,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_bill_by_bill.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-contra-voucher')
            else:

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Contra')
                list_account_ledger = accounting_ledger_data.objects.all()


                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Contra').exists()

                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Contra')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_contra_voucher.html',{'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateContraVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                invoice_id          = request.POST['id']
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Contra'

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                
                update_data         = invoice_data.objects.filter(id=invoice_id.id).update(
                                        entity_id           =entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        voucher_series_id   = voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        updated_at          = now
                                    )

                
                messages.success(request, 'Successfully added.')
                return redirect('list-contra-voucher')
            else:
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Contra')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Contra')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/update_contra_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteContraVoucherLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_invoice_data= product_data.invoice_id

            total_amount    = float(get_invoice_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            update_invoice  = invoice_data.objects.filter(id=product_data.invoice_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            
            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-contra-voucher') + f'?id={product_data.invoice_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-contra-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteContraVoucer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id      = request.POST['id']
            fromReg     = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-contra-voucher')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-contra-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listJournalVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
            get_data    = invoice_data.objects.all().filter(entry_type='Journal',invoice_id=None).order_by('-id')

            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            
            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

            
            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['transactions_write']:
                write=1
            
            return render(request,'users/pages/list_journal_voucher.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewJournalVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Journal'
                entity_id           = branch_id.entity_id
                financial_year_id   = financial_year_data.objects.get(active=True)
                created_by          = user_data.objects.get(id=request.session['userId'])

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()

                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           =entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_invoice_data.save()

                insert_bill_by_bill = bill_by_bill_data(
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_series_id   = voucher_type_id,
                                        voucher_number_id   = insert_voucher_number,
                                        financial_year_id   = financial_year_id,
                                        # exchange_rate       = exchange_rate,
                                        date                = date,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        invoice_id          = insert_invoice_data,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_bill_by_bill.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-journal-voucher')
            else:

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Journal')
                list_account_ledger = accounting_ledger_data.objects.all()


                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Journal').exists()

                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Journal')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_journal_voucher.html',{'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateJournalVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                invoice_id          = request.POST['id']
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Journal'

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                
                update_data         = invoice_data.objects.filter(id=invoice_id.id).update(
                                        entity_id           = entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        voucher_series_id   = voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        updated_at          = now
                                    )

                
                messages.success(request, 'Successfully added.')
                return redirect('list-journal-voucher')
            else:
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Journal')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Journal')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)
                print(list_branch)
                return render(request,'users/pages/update_journal_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteJournalVoucherLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_invoice_data= product_data.invoice_id

            total_amount    = float(get_invoice_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            update_invoice  = invoice_data.objects.filter(id=product_data.invoice_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            
            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-journal-voucher') + f'?id={product_data.invoice_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-journal-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteJournalVoucer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id      = request.POST['id']
            fromReg     = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-journal-voucher')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-journal-voucher')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listCreditNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
            # filter section
            get_data    = invoice_data.objects.all().filter(entry_type='Creditnote',invoice_id=None).order_by('-id')
            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

            request.session['get_data']=json.dumps(list(get_data.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['transactions_write']:
                write=1
            
            return render(request,'users/pages/list_credit_note.html',{'write':write,'get_data' : get_data,'selected_branch':selected_branch,'name':name,'branch_list':branch_list,'start_date':start_date,'end_date':end_date})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewCreditNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Creditnote'
                financial_year_id   = financial_year_data.objects.get(active=True)
                created_by          = user_data.objects.get(id=request.session['userId'])

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()

                insert_voucher_number   = voucher_number_data(
                                        
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_invoice_data.save()

                insert_bill_by_bill = bill_by_bill_data(
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_series_id   = voucher_type_id,
                                        voucher_number_id   = insert_voucher_number,
                                        financial_year_id   = financial_year_id,
                                        # exchange_rate       = exchange_rate,
                                        date                = date,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        invoice_id          = insert_invoice_data,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_bill_by_bill.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-credit-note')
            else:

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Creditnote')
                list_account_ledger = accounting_ledger_data.objects.all()


                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Creditnote').exists()

                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Creditnote')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                return render(request,'users/pages/add_credit_note.html',{'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateCreditNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                invoice_id          = request.POST['id']
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Creditnote'

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                
                update_data         = invoice_data.objects.filter(id=invoice_id.id).update(
                                        entity_id           = entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        voucher_series_id   = voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        updated_at          = now
                                    )

                
                messages.success(request, 'Successfully added.')
                return redirect('list-credit-note')
            else:
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Creditnote')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Creditnote')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/update_credit_note.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteCreditNoteLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id          = request.GET['id']
            now             = datetime.now()

            product_data    = order_product_data.objects.get(id=get_id)
            
            total_amount    = product_data.amount
            get_invoice_data= product_data.invoice_id

            total_amount    = float(get_invoice_data.total_amount) - float(total_amount)

            update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

            update_invoice  = invoice_data.objects.filter(id=product_data.invoice_id.id).update(total_amount=total_amount,updated_at=now)

            fromReg         = order_product_data.objects.all().filter(id=get_id)
            fromReg.delete()

            
            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                url         = reverse('update-credit-note') + f'?id={product_data.invoice_id.id}'

                # Redirect to the constructed URL
                return redirect(url)
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-credit-note')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteCreditNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id      = request.POST['id']
            fromReg     = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-credit-note')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-credit-note')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listDebitNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
            get_data    = invoice_data.objects.all().filter(entry_type='Debitnote',invoice_id=None).order_by('-id')

            branch_list         = branch_data.objects.all().order_by('-id')
            name                = ''
            selected_branch     = 0
            start_date          = ''
            end_date            = ''
            

            if 'search' in request.POST:
                start_date                  =request.POST.get('start')
                end_date                    =request.POST.get('end')
                name                        = request.POST.get('name')
                print(name,"######")
                selected_branch             = int(request.POST.get('selected_branch')) 
                
                if selected_branch or name or start_date or end_date:                         
                    if selected_branch:     
                        get_data             = get_data.filter(branch_id=selected_branch)
                    
                    if name:
                        get_data             = get_data.filter(voucher_number_id__voucher_number__istartswith=name)
                        print(get_data)

                    if  start_date and end_date:   

                        get_data             = get_data.filter(date__range=(start_date,end_date))
                            
                    elif start_date:    
                        get_data             = get_data.filter(date__gte=start_date)

                    elif end_date:
                        get_data             = get_data.filter(date__lte=end_date)
                                
            #Download Section 
            if 'download' in request.POST:
                
                if json.loads(request.session['get_data']):
                    responce=download(request.session['get_data'])
                    return responce
                
                
            #Session set for query result for excel based on last search    
            request.session['get_data']=json.dumps(list(get_data.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

            page_number = request.GET.get("page",1)

            paginator = Paginator(get_data, 10)

            get_data = paginator.get_page(page_number)
            write=0
            if role_permission['transactions_write']:
                write=1
                
            return render(request,'users/pages/list_debit_note.html',{'write':write,'get_data' : get_data,'name':name,'start_date':start_date,'end_date':end_date,'selected_branch':selected_branch,'branch_list':branch_list})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewDebitNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write'] or role_permission['transactions_read']):
            if request.method=="POST":
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                entry_type          = 'Debitnote'
                entity_id           = branch_id.entity_id
                financial_year_id   = financial_year_data.objects.get(active=True)
                created_by          = user_data.objects.get(id=request.session['userId'])

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()

                insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_type_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_type_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
                insert_voucher_number.save()

                insert_invoice_data = invoice_data(
                                        branch_id           = branch_id,
                                        entity_id           =entity_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_type_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_invoice_data.save()

                insert_bill_by_bill = bill_by_bill_data(
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        entity_id           = entity_id,
                                        branch_id           = branch_id,
                                        voucher_series_id   = voucher_type_id,
                                        voucher_number_id   = insert_voucher_number,
                                        financial_year_id   = financial_year_id,
                                        # exchange_rate       = exchange_rate,
                                        date                = date,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        invoice_id          = insert_invoice_data,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now
                                    )
                insert_bill_by_bill.save()

                messages.success(request, 'Successfully added.')
                return redirect('list-debit-note')
            else:

                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Debitnote')
                list_account_ledger = accounting_ledger_data.objects.all()
                list_entity         = entity_data.objects.all()

                user_id             = request.session.get('userId')
                get_user_data       = user_data.objects.get(id=user_id)

                if get_user_data.default_entity_id:
                    list_branch     = branch_data.objects.all().filter(entity_id=get_user_data.default_entity_id.id)
                else:
                    list_branch     = branch_data.objects.all()

                #####--- accounting ledger
                get_debit_account_ledger    = []
                get_credit_account_ledger   = []
                check_golden_rule           = golden_rules.objects.filter(voucher_type_id__name='Debitnote').exists()

                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Debitnote')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                write=0
                if role_permission['transactions_read']:
                    write=1
            
                return render(request,'users/pages/add_debit_note.html',{'write':write,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateDebitNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            if request.method=="POST":
                invoice_id          = request.POST['id']
                entity_id           = request.POST['entity_id']
                entity_id           = entity_data.objects.get(id=entity_id)
                invoice_id          = invoice_data.objects.get(id=invoice_id)
                branch_id           = request.POST['branch_id']
                branch_id           = branch_data.objects.get(id=branch_id)
                voucher_type_id     = request.POST['voucher_type_id']
                voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
                date                = request.POST['date']
                description         = request.POST['description']
                total_amount        = request.POST['total_amount']
                # exchange_rate       = request.POST['exchange_rate']
                voucher_number      = request.POST['order_number']
                num                 = int(request.POST['number_of_input']) + 1
                order_id            = invoice_id.order_id
                entry_type          = 'Debitnote'

                debit_ledger_id     = request.POST['debit_ledger_id']
                credit_ledger_id    = request.POST['credit_ledger_id']
                against             = request.POST['against']
                cheque_number       = request.POST['cheque_number']
                cheque_date         = request.POST['cheque_date']

                debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
                credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

                now                 = datetime.now()
                
                update_data         = invoice_data.objects.filter(id=invoice_id.id).update(
                                        entity_id           = entity_id,
                                        order_id            = order_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_type_id.voucher_type_id,
                                        voucher_series_id   = voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        # exchange_rate       = exchange_rate,
                                        entry_type          = entry_type,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        updated_at          = now
                                    )

                
                messages.success(request, 'Successfully added.')
                return redirect('list-debit-note')
            else:
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Debitnote')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Debitnote')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity                     = entity_data.objects.all()
                list_branch                     = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/update_debit_note.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteDebitNoteLedger(request):
    if request.session.has_key('userId'):
        get_id          = request.GET['id']
        now             = datetime.now()

        product_data    = order_product_data.objects.get(id=get_id)
        
        total_amount    = product_data.amount
        get_invoice_data= product_data.invoice_id

        total_amount    = float(get_invoice_data.total_amount) - float(total_amount)

        update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

        update_invoice  = invoice_data.objects.filter(id=product_data.invoice_id.id).update(total_amount=total_amount,updated_at=now)

        fromReg         = order_product_data.objects.all().filter(id=get_id)
        fromReg.delete()

        
        if fromReg.delete():
            messages.success(request, 'Successfully Deleted.')
            url         = reverse('update-debit-note') + f'?id={product_data.invoice_id.id}'

            # Redirect to the constructed URL
            return redirect(url)
        else:
            messages.error(request, 'Something went to wrong')
            return redirect('list-debit-note')
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteDebitNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            get_id      = request.POST['id']
            fromReg     = invoice_data.objects.all().filter(id=get_id)
            fromReg.delete()

            if fromReg.delete():
                messages.success(request, 'Successfully Deleted.')
                return redirect('list-debit-debit')
            else:
                messages.error(request, 'Something went to wrong')
                return redirect('list-debit-note')
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def listGoldenRules(request):
    if request.session.has_key('userId'):
        get_data    = golden_rules.objects.all().order_by('-id')
        voucher_list=voucher_type_data.objects.all()
        selected_voucher=0
        list_rules  = []

        # filterstart 
        searched_name   =''
        if 'search' in request.POST: 
            selected_voucher    = int(request.POST.get('selected_voucher'))
        else:
            selected_voucher    = int(request.GET.get('selected_voucher',0))
            
        if selected_voucher:      
            get_data             = get_data.filter(voucher_type_id=selected_voucher).order_by('-id')           

        #Download Section 
        if 'download' in request.POST:
            
            if json.loads(request.session['get_data']):
                responce    = download(request.session['get_data'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['get_data']=json.dumps(list(get_data.values('voucher_type_id__name','debit_account_group_ids','credit_account_group_ids')), cls=DjangoJSONEncoder)


        for data in get_data:
            ###-- Debit account group ids
            comma_separated_ids = data.debit_account_group_ids
            ids_list            = comma_separated_ids.split(',')
            mapping_objects     = accounting_group_data.objects.filter(id__in=ids_list)

            id_to_name_mapping  = {obj.id: obj.name for obj in mapping_objects}

            types_list          = [id_to_name_mapping[int(id)] for id in ids_list]

            # Join the types into a comma-separated string
            types_string        = ' , '.join(types_list)
            ###-- Debit account group ids

            ###-- Credit account group ids
            credit_comma_separated_ids = data.credit_account_group_ids
            credit_ids_list            = credit_comma_separated_ids.split(',')
            credit_mapping_objects     = accounting_group_data.objects.filter(id__in=credit_ids_list)

            credit_id_to_name_mapping  = {obj.id: obj.name for obj in credit_mapping_objects}

            credit_types_list          = [credit_id_to_name_mapping[int(id)] for id in credit_ids_list]

            # Join the types into a comma-separated string
            credit_types_string        = ' , '.join(credit_types_list)
            ###-- Credit account group ids

            list_rules.append({
                'id'                        : data.id,
                'voucher_type_id'           : data.voucher_type_id,
                'debit_accounting_groups'   : types_string,
                'credit_accounting_groups'  : credit_types_string,
            })

        page_number = request.GET.get("page",1)

        
        paginator = Paginator(list_rules, 10)

        page_obj = paginator.get_page(page_number)

       
        return render(request,'users/pages/list_golden_rules.html',{'get_data' : list_rules,'voucher_list':voucher_list,'selected_voucher':selected_voucher,'page_obj':page_obj})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addNewGoldenRule(request):
    if request.session.has_key('userId'):
        if request.method=="POST":
            voucher_type_id             = request.POST['voucher_type_id']
            voucher_type_id             = voucher_type_data.objects.get(id=voucher_type_id)
            debit_accounting_group_ids  = request.POST.getlist('debit_accounting_group_ids[]')
            comma_separated_ids         = ','.join(debit_accounting_group_ids)

            credit_accounting_group_ids = request.POST.getlist('credit_accounting_group_ids[]')
            comma_separated_credit_ids  = ','.join(credit_accounting_group_ids)

            now                 = datetime.now()

            insert_rule         = golden_rules(
                                    voucher_type_id             = voucher_type_id,
                                    debit_account_group_ids     = comma_separated_ids,
                                    credit_account_group_ids    = comma_separated_credit_ids,
                                    created_at                  = now,
                                    updated_at                  = now
                                )
            insert_rule.save()
            
            messages.success(request, 'Successfully added.')
            return redirect('list-golden-rule')
        else:
            list_voucher_types  = voucher_type_data.objects.all()
            list_account_group  = accounting_group_data.objects.all()

            return render(request,'users/pages/add_golden_rule.html',{'list_account_group':list_account_group,'list_voucher_types':list_voucher_types})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updateGoldenRule(request):
    if request.session.has_key('userId'):
        if request.method=="POST":
            rule_id                     = request.POST['id']
            voucher_type_id             = request.POST['voucher_type_id']
            voucher_type_id             = voucher_type_data.objects.get(id=voucher_type_id)
            debit_accounting_group_ids  = request.POST.getlist('debit_accounting_group_ids[]')
            comma_separated_ids         = ','.join(debit_accounting_group_ids)

            credit_accounting_group_ids = request.POST.getlist('credit_accounting_group_ids[]')
            comma_separated_credit_ids  = ','.join(credit_accounting_group_ids)
            now                         = datetime.now()

            golden_rules.objects.all().filter(id=rule_id).update(voucher_type_id=voucher_type_id,debit_account_group_ids=comma_separated_ids,credit_account_group_ids=comma_separated_credit_ids,updated_at=now)

            messages.success(request, 'Changes successfully updated.')
            return redirect('list-golden-rule')
        else:
            rule_id             = request.GET['id']
            get_data            = golden_rules.objects.get(id=rule_id)
            list_voucher_types  = voucher_type_data.objects.all()
            list_account_group  = accounting_group_data.objects.all()
            
            accounting_group_ids= get_data.debit_account_group_ids.split(",")

            all_ccounting_group = []
            for group in list_account_group:
                selected        = ''
                if  str(group.id) in accounting_group_ids:
                    selected    = 'selected'
                

                all_ccounting_group.append({
                    'id'        : group.id,
                    'name'      : group.name,
                    'selected'  : selected
                })


            credit_accounting_group_ids = get_data.credit_account_group_ids.split(",")

            all_credit_acounting_group  = []
            for group in list_account_group:
                selected        = ''
                if  str(group.id) in credit_accounting_group_ids:
                    selected    = 'selected'
                
                all_credit_acounting_group.append({
                    'id'        : group.id,
                    'name'      : group.name,
                    'selected'  : selected
                })
                   

            get_rule_data       =   {
                                        'id'                            : get_data.id,
                                        'voucher_type_id'               : get_data.voucher_type_id,
                                        'accounting_group_ids'          : all_ccounting_group,
                                        'credit_accounting_group_ids'   : all_credit_acounting_group
                                    }

            return render(request,'users/pages/update_golden_rules.html',{'get_data' : get_rule_data,'list_voucher_types':list_voucher_types,'list_account_group':all_ccounting_group})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deleteGoldenRule(request):
    if request.session.has_key('userId'):
        get_id      = request.POST['id']
        fromReg     = golden_rules.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            messages.success(request, 'Successfully Deleted.')
            return redirect('list-golden-rule')
        else:
            messages.error(request, 'Something went to wrong')
            return redirect('list-golden-rule')
    else:
        return redirect('user-login')


# view only start
@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewUserRole(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read']):
            
                role_id         = request.GET['id']
                role_data       = user_roles.objects.get(id=role_id)
                
                return render(request,'users/pages/view_user_role.html',{'role_data' : role_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewUserRolePermission(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read']):
            role_id         = request.GET['id']
            user_id         = request.session.get('userId')
            role_data       = []
            check_exist     = user_role_permission.objects.filter(user_role_id=role_id,user_id=user_id).exists()

            if check_exist:
                role_data   = user_role_permission.objects.get(user_role_id=role_id,user_id=user_id)
            
            return render(request,'users/pages/view_user_role_permission.html',{'role_data' : role_data,'role_id':role_id})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewUser(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read']):
                user_id             = request.GET['id']
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all()
                get_user_roles      = user_roles.objects.all().exclude(role="Super Admin")

                get_user_data       = user_data.objects.get(id=user_id)

                get_entity_ids      = get_user_data.entity_id.split(',')
                get_branch_ids      = get_user_data.branch_id.split(',')

                all_entities        = []
                for entity in list_entity:
                    selected        = ''
                    if  str(entity.id) in get_entity_ids:
                        selected    = 'selected'
                    
                    all_entities.append({
                        'id'        : entity.id,
                        'name'      : entity.name,
                        'selected'  : selected
                    })


                all_branches        = []
                for branch in list_branch:
                    selected        = ''
                    if  str(branch.id) in get_branch_ids:
                        selected    = 'selected'
                    
                    all_branches.append({
                        'id'        : branch.id,
                        'name'      : branch.name,
                        'selected'  : selected
                    })

                return render(request,'users/pages/view_user.html',{'list_branch' : all_branches,'get_user_roles':get_user_roles,'get_user_data':get_user_data,'list_entity':all_entities})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewAccountingGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_view']):
                group_id            = request.GET['id']
                group_data          = accounting_group_data.objects.get(id=group_id)
                print(group_data.entity_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=group_data.entity_id)
                list_all_group      = accounting_group_data.objects.all().exclude(id=group_id)
                
                return render(request,'users/pages/view_accounting_group.html',{'group_data' : group_data,'list_entity':list_entity,'list_branch':list_branch,'list_all_group':list_all_group})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewAccountingLedger(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_read']):
            
                get_id              = request.GET['id']
                get_data            = accounting_ledger_data.objects.get(id=get_id)
                customer_get_data   = None
                list_branch         = branch_data.objects.all()
                if get_data.customer_id:
                    customer_get_data   = customer_data.objects.get(id=get_data.customer_id.id)
                    list_branch         = branch_data.objects.filter(entity_id=get_data.customer_id.entity_id)

                list_entity         = entity_data.objects.all()
                list_customer_type      = customer_type.objects.all()
                list_location           = location_data.objects.all()

                list_all_group          = accounting_group_data.objects.all()


                return render(request,'users/pages/view_accounting_ledger.html',{'customer_get_data':customer_get_data,'list_entity':list_entity,'list_all_group':list_all_group,'get_data' : get_data,'list_branch':list_branch,'list_customer_type':list_customer_type,'list_location':list_location})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewWarehouse(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_write']):
            
                get_id          = request.GET['id']
                get_data        = warehouse_data.objects.get(id=get_id)
                list_entity     = entity_data.objects.all()
                list_branch     = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/update_warehouse.html',{'get_data':get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewFinancialYear(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['accounting_read']):    
            
                get_id          = request.GET['id']
                get_data        = financial_year_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                print(list_branch)
                
                return render(request,'users/pages/view_financial_year.html',{'get_data' : get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['users_read']):    
            
                get_id          = request.GET['id']
                get_data        = series_data.objects.get(id=get_id)

                return render(request,'users/pages/view_series.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewCustomerType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_read']):
                type_id         = request.GET['id']
                type_data       = customer_type.objects.get(id=type_id)
                
                return render(request,'users/pages/view_customer_type.html',{'type_data' : type_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewLocation(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read']):
            
                get_id          = request.GET['id']
                get_data        = location_data.objects.get(id=get_id)
                
                return render(request,'users/pages/view_location.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewCustomer(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['customers_read']):  
                get_id              = request.GET['id']
                get_data            = customer_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                list_customer_type  = customer_type.objects.all()
                list_location       = location_data.objects.all()

                return render(request,'users/pages/view_customer.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_customer_type':list_customer_type,'list_location':list_location})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewSupplierType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_read']):
            
                type_id         = request.GET['id']
                type_data       = supplier_type.objects.get(id=type_id)
                
                return render(request,'users/pages/view_supplier_type.html',{'type_data' : type_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')





@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewSupplier(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['supplier_read']):
                get_id              = request.GET['id']
                get_data            = supplier_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id_id)
                list_supplier_type  = supplier_type.objects.all()
                list_location       = location_data.objects.all()

                return render(request,'users/pages/view_supplier.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_supplier_type':list_supplier_type,'list_location':list_location})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewUnit(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
            
                get_id      = request.GET['id']
                get_data    = unit_data.objects.get(id=get_id)
                
                return render(request,'users/pages/view_unit.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewSize(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                get_id      = request.GET['id']
                get_data    = size_data.objects.get(id=get_id)
                
                return render(request,'users/pages/view_size.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewBrand(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
            
                get_id      = request.GET['id']
                get_data    = brand_data.objects.get(id=get_id)
                
                return render(request,'users/pages/view_brand.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewModelNumber(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                get_id      = request.GET['id']
                get_data    = model_number_data.objects.get(id=get_id)
                
                return render(request,'users/pages/view_model_number.html',{'get_data' : get_data})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewGodown(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                get_id      = request.GET['id']
                get_data    = godown_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)  
                list_branch = branch_data.objects.all()
                return render(request,'users/pages/view_godown.html',{'get_data' : get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewRack(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                get_id      = request.GET['id']
                get_data    = rack_data.objects.get(id=get_id)
                
                list_godown = godown_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/view_rack.html',{'get_data' : get_data,'list_branch':list_branch,'list_godown':list_godown,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewProductGroup(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                group_id        = request.GET['id']
                group_data      = product_group_data.objects.get(id=group_id)

                list_all_group  = product_group_data.objects.all().exclude(id=group_id)
                
                return render(request,'users/pages/view_product_group.html',{'group_data' : group_data,'list_all_group':list_all_group})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')





@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewPricingLevel(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
            
                get_id              = request.GET['id']
                get_data            = pricing_level_data.objects.get(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/view_pricing_level.html',{'get_data' : get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                get_id              = request.GET['id']
                get_data            = product_data.objects.get(id=get_id)
                list_brand          = brand_data.objects.all()
                list_product_group  = product_group_data.objects.all()
                list_unit           = unit_data.objects.all()
                list_size           = size_data.objects.all()
                list_model_numbers  = model_number_data.objects.all()
                list_godown         = godown_data.objects.all()
                list_rack           = rack_data.objects.all()
                list_warehouse      = warehouse_data.objects.all()
                list_tax            = tax_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/view_product.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_brand':list_brand,'list_unit':list_unit,'list_size':list_size,'list_model_numbers':list_model_numbers,'list_godown':list_godown,'list_rack':list_rack,'list_product_group':list_product_group,'list_tax':list_tax,'list_warehouse':list_warehouse})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewProduct(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
            
                get_id              = request.GET['id']
                get_data            = product_data.objects.get(id=get_id)
                list_brand          = brand_data.objects.all()
                list_product_group  = product_group_data.objects.all()
                list_unit           = unit_data.objects.all()
                list_size           = size_data.objects.all()
                list_model_numbers  = model_number_data.objects.all()
                list_godown         = godown_data.objects.all()
                list_rack           = rack_data.objects.all()
                list_warehouse      = warehouse_data.objects.all()
                list_tax            = tax_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/view_product.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_brand':list_brand,'list_unit':list_unit,'list_size':list_size,'list_model_numbers':list_model_numbers,'list_godown':list_godown,'list_rack':list_rack,'list_product_group':list_product_group,'list_tax':list_tax,'list_warehouse':list_warehouse})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewVoucherType(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read']):
                get_id              = request.GET['id']
                get_data            = voucher_type_data.objects.get(id=get_id)
                
                list_voucher_types  = voucher_type_data.objects.all().exclude(id=get_id)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/view_voucher_type.html',{'get_data' : get_data,'list_entity':list_entity,'list_branch':list_branch,'list_voucher_types':list_voucher_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewVoucherSeries(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read']):
            
                get_id              = request.GET['id']
                get_data            = voucher_series_data.objects.get(id=get_id) 
                
                list_voucher_types  = voucher_type_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/view_voucher_series.html',{'list_entity':list_entity,'get_data' : get_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewTaxData(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['general_read']):
            
                get_id              = request.GET['id']
                get_data            = tax_data.objects.get(id=get_id)
                
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)

                return render(request,'users/pages/view_tax_data.html',{'list_entity':list_entity,'get_data' : get_data,'list_branch':list_branch})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewWarehouse(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
            
                get_id          = request.GET['id']
                get_data        = warehouse_data.objects.get(id=get_id)
                list_entity     = entity_data.objects.all()
                list_branch     = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/view_warehouse.html',{'get_data':get_data,'list_branch':list_branch,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewBatch(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['invendory_read']):
                get_id          = request.GET['id']
                get_data        = batch_data.objects.get(id=get_id)
                list_branch     = branch_data.objects.all()
                list_product    = product_data.objects.all()
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_data.entity_id)
                
                return render(request,'users/pages/view_batch.html',{'get_data':get_data,'list_entity':list_entity,'list_branch':list_branch,'list_product':list_product})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewPurchaseOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_read']):        
                order_id            = request.GET['id']
                get_order_data      = order_data.objects.get(id=order_id)
                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_type_data.objects.all()
                list_products       = product_data.objects.all()
                get_order_product   = order_product_data.objects.all().filter(order_id=order_id,invoice_id=None)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)

                return render(request,'users/pages/view_purchase_order.html',{'list_entity':list_entity,'get_data':get_order_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewPurchaseInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['purchase_read']):
            
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Purchase')
                list_products       = product_data.objects.all()

                list_product_data   = []
                i                   = 0
                for product in get_order_product:
                    get_batch       = batch_data.objects.all().filter(product_id=product.product_id.id)

                    tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
                    tax_amount      = 0
                    if tax_id:
                        tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
                        

                    list_product_data.append({
                        'key'           : i,
                        'id'            : product.id,
                        'product_id'    : product.product_id,
                        'product_code'  : product.product_code,
                        'quantity'      : product.po_quantity if not product.quantity else product.quantity,
                        'unit_id'       : product.unit_id,
                        'godown_id'     : product.product_id.godown_id if not product.godown_id else product.godown_id,
                        'rack_id'       : product.product_id.rack_id if not product.rack_id else product.rack_id,
                        'tax_id'        : product.product_id.tax_id if not product.tax_id else product.tax_id,
                        'purchase_rate' : product.purchase_rate,
                        'amount'        : float(product.amount) + tax_amount,
                        'get_batch'     : get_batch,
                        'tax_amount'    : tax_amount

                    })
                    i = i + 1

                total_product       = len(list_product_data) - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Purchase')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                

                invoice_id  = get_invoice_data.id if not get_invoice_data.invoice_id else get_invoice_data.invoice_id.id

                return render(request,'users/pages/view_purchase_invoice.html',{'invoice_id':invoice_id,'get_data':get_invoice_data,'get_order_product':list_product_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'total_product':total_product,'all_debit_account_ledger':get_debit_account_ledger,'all_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewSalesOrder(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_read']):
                order_id            = request.GET['id']
                get_order_data      = order_data.objects.get(id=order_id)

                list_voucher_types  = voucher_type_data.objects.all()
                list_products       = product_data.objects.all()

                get_order_product   = order_product_data.objects.all().filter(order_id=order_id,invoice_id=None)
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_order_data.entity_id)

                return render(request,'users/pages/view_sales_order.html',{'list_entity':list_entity,'get_data':get_order_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewSalesInvoice(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['sales_read']):
            
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter().filter(voucher_type_id__name='Sales')
                list_products       = product_data.objects.all()

                list_product_data   = []
                i                   = 0
                for product in get_order_product:
                    get_batch       = batch_data.objects.all().filter(product_id=product.product_id.id)

                    tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
                    tax_amount      = 0
                    if tax_id:
                        tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
                        

                    list_product_data.append({
                        'key'           : i,
                        'id'            : product.id,
                        'product_id'    : product.product_id,
                        'product_code'  : product.product_code,
                        'quantity'      : product.po_quantity if not product.quantity else product.quantity,
                        'unit_id'       : product.unit_id,
                        'godown_id'     : product.product_id.godown_id if not product.godown_id else product.godown_id,
                        'rack_id'       : product.product_id.rack_id if not product.rack_id else product.rack_id,
                        'tax_id'        : product.product_id.tax_id if not product.tax_id else product.tax_id,
                        'purchase_rate' : product.purchase_rate,
                        'amount'        : float(0 if not product.amount else product.amount) + tax_amount,
                        'get_batch'     : get_batch,
                        'tax_amount'    : tax_amount

                    })
                    i = i + 1

                total_product       = len(list_product_data) - 1

                #####--- accounting ledger
                
                get_debit_account_ledger            = []
                get_credit_account_ledger           = []
                check_golden_rule                   = golden_rules.objects.filter(voucher_type_id__name='Sales').exists()
                
                if check_golden_rule:
                    get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Sales')

                    credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                    debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                    
                    get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                    
                    get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                
                #####--- accounting ledger
                
                invoice_id  = get_invoice_data.id if not get_invoice_data.invoice_id else get_invoice_data.invoice_id.id

                list_entity = entity_data.objects.all()

                return render(request,'users/pages/view_sales_invoice.html',{'invoice_id':invoice_id,'get_data':get_invoice_data,'get_order_product':list_product_data,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_products':list_products,'total_product':total_product,'all_debit_account_ledger':get_debit_account_ledger,'all_credit_account_ledger':get_credit_account_ledger,'list_entity':list_entity})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')
    

@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewPaymentVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_read']):
            
                
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Payment')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Payment')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/view_payment_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewReceiptVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_write']):
            
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Receipt')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Receipt')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/view_receipt_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def viewContraVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_read']):
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Contra')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Contra')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/view_contra_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewJournalVoucher(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_read']):
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Journal')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Journal')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)
                print(list_branch)
                return render(request,'users/pages/view_journal_voucher.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewCreditNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_read']):
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Creditnote')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Creditnote')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity         = entity_data.objects.all()
                list_branch         = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/view_credit_note.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def ViewDebitNote(request):
    if request.session.has_key('userId'):
        get_role_permission     = getUserPermissions(request)
        role_permission         = get_role_permission['all_user_role_permission']

        if (role_permission['transactions_read']):
                invoice_id          = request.GET['id']
                get_invoice_data    = invoice_data.objects.get(id=invoice_id)
                get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)

                list_branch         = branch_data.objects.all()
                list_voucher_types  = voucher_series_data.objects.all().filter(voucher_type_id__name='Debitnote')
                list_account_ledger = accounting_ledger_data.objects.all()

                total_items         = 0 if not get_order_product else get_order_product.count() - 1

                #####--- accounting ledger
                get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name='Debitnote')

                credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

                debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")
                
                get_debit_account_ledger        = accounting_ledger_data.objects.filter(accounting_group_id__in=debit_accounting_group_ids)
                
                get_credit_account_ledger       = accounting_ledger_data.objects.filter(accounting_group_id__in=credit_accounting_group_ids)
                #####--- accounting ledger
                list_entity                     = entity_data.objects.all()
                list_branch                     = branch_data.objects.all().filter(entity_id=get_invoice_data.entity_id)

                return render(request,'users/pages/view_debit_note.html',{'list_entity':list_entity,'get_data':get_invoice_data,'get_order_product':get_order_product,'list_branch':list_branch,'list_voucher_types':list_voucher_types,'list_account_ledger':list_account_ledger,'total_items':total_items,'get_debit_account_ledger':get_debit_account_ledger,'get_credit_account_ledger':get_credit_account_ledger})
        else:
            raise Http404("Access to this is not permitted")
    else:
        return redirect('user-login')







##############################--------- Api's ----------------################################


@api_view(['POST'])
def appAuthToken(request):
    ## delete all records and insert new one 
    app_auth_token_tb.objects.all().delete()

    random_password = generate_random_string()
    now             = datetime.now()

    insert_data     = app_auth_token_tb(token=random_password,created_at=now,updated_at=now)
    insert_data.save()

    response        =   {
                            "success"   : True,
                            "message"   : "",
                            "random_password":random_password
                        }

    return Response(response)


def generate_random_string(length=24):
    characters      = string.ascii_letters + string.digits
    random_string   = ''.join(secrets.choice(characters) for i in range(length))
    return random_string




@api_view(['POST'])
def get_latest_voucher_series_number(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        voucher_series_id       = data.get('voucher_series_id','')
        if not voucher_series_id :
            response    ={
                "success"   : False,
                "message"   : "Invalid Series Id",
            }
        else:
            voucher_number          = 1
            voucher_series_id       = voucher_series_data.objects.get(id=voucher_series_id)
            if voucher_series_id:
                pre_text            = voucher_series_id.prefix
                post_text           = voucher_series_id.postfix

            check_get_data          = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
            mindate                 = ''
            if(check_get_data):
                get_latest_data     = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
                voucher_number      = int(get_latest_data.voucher_number) + int(1)
                get_invoice         = invoice_data.objects.filter(voucher_number_id=get_latest_data.id,latest=1,is_parent=1)
                if get_invoice:
                    mindate             = get_invoice[0].date
                print(mindate)
            voucher_number_appened  = pre_text+str(voucher_number)+post_text

            response                = {
                "success"   : False,
                "voucher_number"   : voucher_number_appened,
                "mindate"           :mindate
            }



    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }
    return Response(response)





@api_view(['POST'])
def getUserUserPortal(request):
   
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_user            = user_data.objects.get(id=user_id)
        list_entity         = entity_data.objects.all()
        
        all_entities        = []
        user_entity         = get_user.entity_id
        

        if user_entity:
            user_entities   = get_user.entity_id.split(',')
            
            list_entity     = list_entity.filter(pk__in=user_entities)
        
            enitity_pks     = list(list_entity.values_list('pk',flat=True))
            list_branch     = branch_data.objects.filter(entity_id__in=enitity_pks)
        
            user_branch         = get_user.branch_id
            
            if user_branch:
                user_branches   = get_user.branch_id.split(',')
                
                list_branch     = list_branch.filter(pk__in=user_branches)
        user_branches = list(list_branch.values('pk','name'))
        user_entities   = list(list_entity.values('pk','name'))
                
        response ={
            'name':get_user.name,
            'role':None if not get_user.user_role_id else get_user.user_role_id.role,
            'role_id':None if not get_user.user_role_id else get_user.user_role_id.id,
            'email':get_user.email,
            'entities':user_entities,
            'branches':user_branches,
            'default_entity':None if not get_user.default_entity_id else get_user.default_entity_id.id,
            'profile_image':request.build_absolute_uri(get_user.profile_image.url) if get_user.profile_image else None
        }
            

        
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                            }
        
    return Response(response)




@api_view(['POST'])
def updateUserUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        
        name                = data['name']
        email               = data.get('email')

        get_user            = user_data.objects.get(id=user_id)

        if 'profile_image' in request.FILES:
            image_file = request.FILES['profile_image']
            get_user.profile_image = image_file

        get_user.name   = name
        if email:
            get_user.email  = email
        get_user.save()

        now                 = datetime.now()
        response ={
            'Sucess':True,
            'name':get_user.name,
            'email':get_user.email,
            'profile_image': request.build_absolute_uri(get_user.profile_image.url) if get_user.profile_image else None
            
        }
            

        
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }
    return Response(response)



@api_view(['POST'])
def addVoucherTransactionUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        print("----------------")
        entity_id               = data.get('entity_id')
        entity_id               = entity_data.objects.get(id=entity_id)
        user_id                 = user_data.objects.get(id=user_id)
        branch_id               = data.get('branch_id')
        branch_id               = branch_data.objects.get(id=branch_id)
        entity_id               = branch_id.entity_id
        branch_gst_state_id     = branch_id.state
        branch_gst_treatment_id = None if not branch_id.gst_treatment else branch_id.gst_treatment
        # voucher_type_id         = data.get('voucher_type_id','')
        # voucher_type_id         = voucher_type_data.objects.get(id=voucher_type_id)
        voucher_series_id       = data.get('voucher_series_id','')
        voucher_series_id       = None if not voucher_series_id else voucher_series_data.objects.get(id=voucher_series_id) ##voucher series id
        date                    = data.get('date','') 
        due_date                = data.get('due_date','')
        due_days                = data.get('due_days','')
        description             = data.get('description')
        entry_description       = data.get('entry_description')
        total_amount            = data.get('total_amount','')
        entry_type              = data.get('entry_type')
        created_by              = user_data.objects.get(id=user_id.id)
        financial_year_id       = financial_year_data.objects.get(active=True)
        debit_ledger_id         = data.get('debit_ledger_id')
        credit_ledger_id        = data.get('credit_ledger_id')
        debit_ledger_id         = None if not debit_ledger_id else accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id        = None if not credit_ledger_id else accounting_ledger_data.objects.get(id=credit_ledger_id)
        get_product_data        = data.get('product_data')
        status                  = data.get('status',"Approved")
        
        # additional check for quantity available
        if voucher_series_id.voucher_type_id.name == 'Sales':

            for product in get_product_data:
                
                product_id      = product['product_id']
                rack_id         = product['rack_id']
                quantity        = product['quantity']
                free            = product.get('free',0)
                quantity        = int(quantity)+int(free)
                product_details = product_data.objects.get(id=product_id)
                rack_name         = rack_data.objects.get(id=rack_id).name

                sum_credit_product  = 0
                sum_debit_product   = 0
                csum_free_quantity  = 0
                dsum_free_quantity  = 0
                if date:
                        credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved',date__lte=date)
                        
                        if credit_product:
                            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                            csum_free_quantity      = credit_product.aggregate(total_free=Sum('free'))['total_free']

                        debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Debit",status='Approved',date__lte=date)
                        
                        if debit_product:
                            sum_debit_product       = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
                            dsum_free_quantity      = debit_product.aggregate(total_free=Sum('free'))['total_free']
                else:
                        credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved')

                        if credit_product:
                            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                            csum_free_quantity      = credit_product.aggregate(total_free=Sum('free'))['total_free']
                    
                        debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Debit",status='Approved')
                        if debit_product:
                            sum_debit_product       = debit_product.aggregate(total_so_quantity=Sum('so_quantity'))['total_so_quantity']
                            dsum_free_quantity      = debit_product.aggregate(total_free=Sum('free'))['total_free']
                            
                        
                balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)
                if balance_quantity<int(quantity):
                    response    ={
                            "success"   :False,
                            "message"   :f"{product_details.name} left Only {balance_quantity} on rack {rack_name}"
                    }

                    return Response(response)

        bill_by_bill_id         = data.get('bill_by_bill_id','')
        bill_by_bill_id         = None if not bill_by_bill_id else bill_by_bill_data.objects.get(id=bill_by_bill_id)
        bill_description        = data.get('bill_description','')
        roundoff                = data.get('roundoff','')
        shipping_address        = data.get('shipping_address','')
        receiver_address        = data.get('receiver_address','')
        discount_value          = data.get('discount_value','')
        customer_type_id        = data.get('customer_type_id','')
        customer_type_id        = None if not customer_type_id else customer_type.objects.get(id=customer_type_id)
        lut                     = data.get('lut','')
        reverse_tax             = data.get('reverse_tax','')
        reverse_tax_value       = data.get('reverse_tax_value','')
        reverse_cgst            = data.get('reverse_cgst','')
        reverse_sgst            = data.get('reverse_sgst','')
        reverse_igst            = data.get('reverse_igst','')
        ewaybill_number         = data.get('ewaybill_number','')
        transporter_id          = data.get('transporter_id','')
        vehicle_number          = data.get('vehicle_number','')
        print(vehicle_number)
        lrno                    = data.get('lrno','')
        number_of_cases         = data.get('number_of_cases','')
        weight                  = data.get('weight','')
        is_parent               = 1
        manuel_invoice_number   = data.get('manuel_invoice_number','')
        gstin                   = data.get('gstin','')
        gst_state_id            = data.get('gst_state_id','')
        gst_treatment_id        = data.get('gst_treatment_id',None)
        gst_treatment_id        = None if not gst_treatment_id else gst_treatment_data.objects.get(id=gst_treatment_id)
        
        get_credit_ledgers      = data.get('credit_ledgers')
        get_debit_ledgers       = data.get('debit_ledgers')

        cheque_number           = data.get('cheque_number','')
        cheque_date             = data.get('cheque_date','')
        exchange_rate           = data.get('exchange_rate','')
        # missed
        order_id                = data.get('order_id',None)
        against                 = data.get('against','')
        cgst                    = data.get('cgst','')
        sgst                    = data.get('sgst','')
        igst                    = data.get('igst','')
        expence                 = data.get('expence','')
        ses                     = data.get('cess','')
        mrp                     = data.get('mrp','')
        discount_type           = data.get('discount_type','')
        discount                = data.get('discount','')
        is_child                = 0
        # parent_id               = data.get('parent_id',None)
        parent_id               = None
        is_amented              = data.get('is_amented',0)
        amented_upward          = data.get('amented_upward',0)
        amented_downward        = data.get('amented_downward',0)
        pricing_lvl           = data.get('pricing_lvl')
        if pricing_lvl:
            pricing_lvl       = pricing_level_data.objects.get(pk=pricing_lvl)
        else:
            pricing_lvl       = None

        
        
        now                     = datetime.now()
        get_additional_charge   = data.get('additional_charge_data','')
        pretax_amount           = data.get('pretax_amount',0)
        additional_subtotal     = data.get('additional_subtotal',0)
        tax_value               = data.get('tax_value',0)
        reverse_tax_value       = data.get('reverse_tax_value',0)



        check_get_data          = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()

        if voucher_series_id:
            pre_text    = voucher_series_id.prefix
            post_text   = voucher_series_id.postfix

        voucher_number_appened  = pre_text+str(1)+post_text
        voucher_number          = 1
                       



        if(check_get_data):
            get_latest_data     = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
            voucher_number      = int(get_latest_data.voucher_number) + int(1)
            voucher_number_appened  = pre_text+str(voucher_number)+post_text
            
        voucher_type_id          = voucher_series_id.voucher_type_id
        insert_voucher_number   = voucher_number_data(
                                    voucher_type_id     = voucher_series_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_series_id,
                                    voucher_number      = voucher_number,
                                    financial_year_id   = financial_year_id,
                                    created_at          = now,
                                    updated_at          = now
                                )
        insert_voucher_number.save()
        
        insert_invoice_data = invoice_data(
                                user_id                 = user_id,
                                entity_id               = entity_id,
                                branch_id               = branch_id,
                                voucher_type_id         = voucher_series_id.voucher_type_id,
                                due_date                = due_date,
                                due_days                = due_days,
                                description             = description,
                                total_amount            = total_amount,
                                exchange_rate           = exchange_rate,
                                entry_type              = entry_type,
                                financial_year_id       = financial_year_id,
                                voucher_number_id       = insert_voucher_number,
                                voucher_series_id       = voucher_series_id,
                                created_by              = created_by,
                                debit_ledger_id         = debit_ledger_id,
                                credit_ledger_id        = credit_ledger_id,
                                against                 = against,
                                # transaction_type        = transaction_type,
                                order_id                = order_id,
                                cgst                    = cgst,
                                sgst                    = sgst,
                                igst                    = igst,
                                pretax_amount           = pretax_amount,
                                additional_subtotal     = additional_subtotal,
                                tax_value               = tax_value,
                                expence                 = expence,
                                ses                     = ses,
                                mrp                     = mrp,
                                discount_type           = discount_type,
                                discount                = discount,
                                is_child                = is_child,
                                parent_id               = parent_id,
                                is_amented              = is_amented,
                                amented_upward          = amented_upward,
                                amented_downward        = amented_downward,

                                created_at              = now,
                                updated_at              = now,
                                
                                

                                # additional
                                roundoff                = roundoff,
                                shipping_address        = shipping_address,
                                receiver_address        = receiver_address,
                                discount_value          = discount_value,
                                customer_type_id        = customer_type_id,
                                lut                     = lut,
                                reverse_tax             = reverse_tax,
                                reverse_tax_value       = reverse_tax_value,
                                reverse_cgst            = reverse_cgst,
                                reverse_sgst            = reverse_sgst,
                                reverse_igst            = reverse_igst,
                                ewaybill_number         = ewaybill_number,
                                transporter_id          = transporter_id,
                                vehicle_number          = vehicle_number,
                                lrno                    = lrno,
                                number_of_cases         = number_of_cases,
                                weight                  = weight,
                                is_parent               = is_parent,
                                manuel_invoice_number   = manuel_invoice_number,
                                gstin                   = gstin,
                                gst_state_id            = gst_state_id,
                                gst_treatment_id        = gst_treatment_id,
                                cheque_number           = cheque_number,
                                cheque_date             = cheque_date,
                                voucher_number_appended = voucher_number_appened,
                                branch_gst_state_id     = branch_gst_state_id,
                                branch_gst_treatment_id = branch_gst_treatment_id,
                                latest                  = 1,
                                status                  = status,
                                date                    = date,
                                pricing_lvl             = pricing_lvl,
                                entry_description       = entry_description,     

                            )

        insert_invoice_data.save()

        if get_credit_ledgers:
            for credit_ledger in get_credit_ledgers:
                c_entry_tyepe       = credit_ledger['entry_type']
                c_credit_ledger      = credit_ledger['credit_ledger_id']
                c_total_amount      = credit_ledger['total_amount']
                c_cheque_number     = credit_ledger['cheque_number']
                c_cheque_date       = credit_ledger['cheque_date']
                c_description       = credit_ledger['description']
                index_number        = credit_ledger.get('index_number',0)
                

                c_credit_ledger      = None if not c_credit_ledger else accounting_ledger_data.objects.get(id=c_credit_ledger)

                insert_debit_ledger_data  = invoice_data(
                                        user_id                 = user_id,
                                        entity_id               = entity_id,
                                        branch_id               = branch_id,
                                        voucher_type_id         = voucher_series_id.voucher_type_id,
                                        date                    = date,
                                        due_date                = due_date,
                                        due_days                = due_days,
                                        description             = c_description,
                                        exchange_rate           = exchange_rate,
                                        total_amount            = c_total_amount,
                                        entry_type              = c_entry_tyepe,
                                        financial_year_id       = financial_year_id,
                                        voucher_number_id       = insert_voucher_number,
                                        voucher_series_id       = voucher_series_id,
                                        created_by              = created_by,
                                        debit_ledger_id         = debit_ledger_id,
                                        credit_ledger_id        = c_credit_ledger,
                                        order_id                = order_id,
                                        pretax_amount           = pretax_amount,
                                        expence                 = expence,
                                        ses                     = ses,
                                        mrp                     = mrp,
                                        discount_type           = discount_type,
                                        discount                = discount,
                                        is_amented              = is_amented,
                                        amented_upward          = amented_upward,
                                        amented_downward        = amented_downward,
                                        # transaction_type        = transaction_type,
                                        created_at              = now,
                                        updated_at              = now,

                                        # additional
                                        roundoff                = roundoff,
                                        shipping_address        = shipping_address,
                                        receiver_address        = receiver_address,
                                        discount_value          = discount_value,
                                        customer_type_id        = customer_type_id,
                                        lut                     = lut,
                                        reverse_tax             = reverse_tax,
                                        reverse_tax_value       = reverse_tax_value,
                                        reverse_cgst            = reverse_cgst,
                                        reverse_sgst            = reverse_sgst,
                                        reverse_igst            = reverse_igst,
                                        ewaybill_number         = ewaybill_number,
                                        transporter_id          = transporter_id,
                                        vehicle_number          = vehicle_number,
                                        lrno                    = lrno,
                                        number_of_cases         = number_of_cases,
                                        weight                  = weight,
                                        is_parent               = False,
                                        is_child                = True,
                                        parent_id               = insert_invoice_data,
                                        manuel_invoice_number   = manuel_invoice_number,
                                        gstin                   = gstin,
                                        gst_state_id            = gst_state_id,
                                        gst_treatment_id        = gst_treatment_id,
                                        cheque_number           = c_cheque_number,
                                        cheque_date             = c_cheque_date,
                                        branch_gst_state_id     = branch_gst_state_id,
                                        branch_gst_treatment_id = branch_gst_treatment_id,
                                        pricing_lvl             = pricing_lvl,
                                        latest                  = 1,
                                        status                  = status,
                                        index_number            = index_number
                                    )
                insert_debit_ledger_data.save()

        if get_debit_ledgers:
            for debit_ledger in get_debit_ledgers:
                d_entry_type        = debit_ledger['entry_type']
                d_debit_ledger_id   = debit_ledger['debit_ledger_id']
                d_total_amount      = debit_ledger['total_amount']
                d_cheque_number     = debit_ledger['cheque_number']
                d_cheque_date       = debit_ledger['cheque_date']
                d_description       = debit_ledger['description']
                index_number        = debit_ledger.get('index_number',0)
                


                d_debit_ledger_id     = None if not d_debit_ledger_id else accounting_ledger_data.objects.get(id=d_debit_ledger_id)

                insert_credit_ledger_data  = invoice_data(
                                        user_id                 = user_id,
                                        entity_id               = entity_id,
                                        branch_id               = branch_id,
                                        voucher_type_id         = voucher_series_id.voucher_type_id,
                                        date                    = date,
                                        due_date                = due_date,
                                        exchange_rate           = exchange_rate,
                                        order_id                = order_id,
                                        against                 = against,
                                        due_days                = due_days,
                                        description             = d_description,
                                        total_amount            = d_total_amount,
                                        entry_type              = d_entry_type,
                                        financial_year_id       = financial_year_id,
                                        voucher_number_id       = insert_voucher_number,
                                        voucher_series_id       = voucher_series_id,
                                        created_by              = created_by,
                                        debit_ledger_id         = d_debit_ledger_id,
                                        credit_ledger_id        = credit_ledger_id,
                                        # transaction_type        = transaction_type,
                                        created_at              = now,
                                        updated_at              = now,

                                        # additional
                                        roundoff                = roundoff,
                                        shipping_address        = shipping_address,
                                        receiver_address        = receiver_address,
                                        discount_value          = discount_value,
                                        customer_type_id        = customer_type_id,
                                        lut                     = lut,
                                        reverse_tax             = reverse_tax,
                                        reverse_tax_value       = reverse_tax_value,
                                        reverse_cgst            = reverse_cgst,
                                        reverse_sgst            = reverse_sgst,
                                        reverse_igst            = reverse_igst,
                                        ewaybill_number         = ewaybill_number,
                                        transporter_id          = transporter_id,
                                        vehicle_number          = vehicle_number,
                                        lrno                    = lrno,
                                        number_of_cases         = number_of_cases,
                                        weight                  = weight,
                                        is_parent               = False,
                                        is_child                = True,
                                        parent_id               = insert_invoice_data,
                                        manuel_invoice_number   = manuel_invoice_number,
                                        gstin                   = gstin,
                                        gst_state_id            = gst_state_id,
                                        gst_treatment_id        = gst_treatment_id,
                                        cheque_number           = d_cheque_number,
                                        cheque_date             = d_cheque_date,
                                        branch_gst_state_id     = branch_gst_state_id,
                                        branch_gst_treatment_id = branch_gst_treatment_id,
                                        pricing_lvl             = pricing_lvl,
                                        latest                  = 1,
                                        status                  = status,
                                        index_number            = index_number
                                        
                                    )
                insert_credit_ledger_data.save()

        if get_product_data:
            for product in get_product_data:
                product_id          = product['product_id']
                product_code        = product['product_code']
                quantity            = product['quantity']
                free                = product['free']
                purchase_rate       = product['purchase_rate']
                amount              = product['amount']
                unit_id             = product['unit_id']
                unit_id             = None if not unit_id else unit_data.objects.get(id=unit_id)
                godown_id           = product.get('godown_id','')
                godown_id           = None if not godown_id else godown_data.objects.get(id=godown_id)
                rack_id             = product.get('rack_id','')
                rack_id             = None if not rack_id else rack_data.objects.get(id=rack_id)
                batch_id            = product.get('batch_id','')
                batch_id            = None if not batch_id else batch_data.objects.get(id=batch_id)
                tax_id              = product.get('tax_id','')
                tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)

                tax_amount          = product['tax_amount']
                entry_type          = entry_type
                # additional
                discount_type       = product.get('discount_type','')
                discount            = product.get('discount',0)
                pretax_amount       = product.get('pretax_amount',0)
                reverse_tax         = product.get('reverse_tax',0)
                reverse_tax_value   = product.get('reverse_tax_value',0)
                reverse_cgst        = product.get('reverse_cgst',0)
                reverse_sgst        = product.get('reverse_sgst',0)
                reverse_igst        = product.get('reverse_igst',0)
                hsn                 = product.get('hsn','')
                sac                 = product.get('sac','')
                voucher_type_id     = voucher_series_id.voucher_type_id,
                estiamted_quantity  = product.get('estiamted_quantity','')
                performa_quantity   = product.get('performa_quantity','')
                voucher_number_id   = insert_voucher_number
                additional_charge   = 0
                tax_value           = product.get('tax_value')
                


                product_id          = product_data.objects.get(id=product_id)
                entity_id           = branch_id.entity_id
                cgst                = product.get('cgst','')
                sgst                = product.get('sgst','')
                igst                = product.get('igst','')
                po_quantity         = product.get('po_quantity','')
                so_quantity         = product.get('so_quantity','')


                insert_product_data = order_product_data(
                                        invoice_id          =insert_invoice_data,
                                        branch_id           =branch_id,
                                        entity_id           =entity_id,
                                        discount_type       =discount_type,
                                        discount            =discount,
                                        unit_id             =unit_id,
                                        
                                        godown_id           =godown_id,
                                        rack_id             =rack_id,
                                        tax_id              =tax_id,
                                        tax_amount          =tax_amount,
                                        batch_id            =batch_id,
                                        product_id          =product_id,
                                        product_code        =product_code,
                                        quantity            =quantity,
                                        free                = free,

                                        purchase_rate       =purchase_rate,
                                        amount              =amount,
                                        entry_type          =entry_type,
                                        created_at          =now,
                                        updated_at          =now,
                                        #  additional
                                        pretax_amount       =pretax_amount,
                                        reverse_tax         =reverse_tax,
                                        reverse_tax_value=  reverse_tax_value,
                                        reverse_cgst        =reverse_cgst,
                                        hsn                 =hsn,
                                        sac                 =sac,
                                        voucher_type_id     =voucher_series_id.voucher_type_id,
                                        estiamted_quantity  =estiamted_quantity,
                                        performa_quantity   =performa_quantity,
                                        financial_year_id   =financial_year_id,
                                        voucher_number_id   =voucher_number_id,
                                        additional_charge   = additional_charge,
                                        tax_value           = tax_value,
                                        cgst                = cgst,
                                        sgst                = sgst,
                                        igst                = igst,
                                        so_quantity         = so_quantity,
                                        po_quantity         = po_quantity,
                                        latest              = 1,
                                        date                = date,
                                        status              = status 
                                    )
                insert_product_data.save()

        if get_additional_charge:
            for product in get_additional_charge:
                # get_id          = product['id']
                product_id          = product['product_id']
                product_code        = product['product_code']
                quantity            = product['quantity']
                purchase_rate       = product['purchase_rate']
                amount              = product['amount']
                unit_id             = None

                godown_id           = godown_data.objects.filter(entity_id=entity_id,name='Main')
                godown_id           = None if not godown_id else godown_data.objects.get(entity_id=entity_id,name='Main')
                rack_id             = rack_data.objects.filter(name='Main',entity_id=entity_id)
                rack_id             = None if not rack_id else rack_data.objects.get(name='Main',entity_id=entity_id)
                batch_id            = None
                tax_id              = product['tax_id']
                tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)
                tax_amount          = product['tax_amount']
                # additional
                discount_type       = product.get('discount_type','')
                discount            = product.get('discount',0)
                pretax_amount       = product.get('pretax_amount',0)
                reverse_tax         = product.get('reverse_tax',0)
                reverse_tax_value   = product.get('reverse_tax_value',0)
                reverse_cgst        = product.get('reverse_cgst',0)
                reverse_sgst        = product.get('reverse_sgst',0)
                reverse_igst        = product.get('reverse_igst',0)
                hsn                 = product.get('hsn','')
                sac                 = product.get('sac','')
                estiamted_quantity  = product.get('estiamted_quantity','')
                performa_quantity   = product.get('performa_quantity','')
                voucher_number_id   = insert_voucher_number
                additional_charge   = 1
                tax_value           = product.get('tax_value')
                product_id          = product_data.objects.get(id=product_id)
                # unit_id             = unit_data.objects.get(id=unit_id)
                cgst                = product.get('cgst','')
                sgst                = product.get('sgst','')
                igst                = product.get('igst','')
                po_quantity         = product.get('po_quantity','')
                so_quantity         = product.get('so_quantity','')

                
                insert_data         = order_product_data(
                                        invoice_id          =insert_invoice_data,
                                        branch_id           =branch_id,
                                        entity_id           =entity_id,
                                        discount_type       =discount_type,
                                        discount            =discount,
                                        unit_id             =unit_id,
                                        voucher_type_id     =voucher_series_id.voucher_type_id,
                                        godown_id           =godown_id,
                                        rack_id             =rack_id,
                                        tax_id              =tax_id,
                                        tax_amount          =tax_amount,
                                        batch_id            =batch_id,
                                        product_id          =product_id,
                                        product_code        =product_code,
                                        quantity            =quantity,
                                        purchase_rate       =purchase_rate,
                                        amount              =amount,
                                        entry_type          =entry_type,
                                        created_at          =now,
                                        updated_at          =now,
                                        #  additional
                                        pretax_amount       =pretax_amount,
                                        reverse_tax         =reverse_tax,
                                        reverse_tax_value   = reverse_tax_value,
                                        reverse_cgst        =reverse_cgst,
                                        hsn                 =hsn,
                                        sac                 =sac,
                                        estiamted_quantity  =estiamted_quantity,
                                        performa_quantity   =performa_quantity,
                                        financial_year_id   =financial_year_id,
                                        voucher_number_id   =voucher_number_id,
                                        additional_charge   = additional_charge,
                                        tax_value           = tax_value,
                                        cgst                = cgst,
                                        sgst                = sgst,
                                        igst                = igst,
                                        so_quantity         = so_quantity,
                                        po_quantity         = po_quantity,
                                        latest              = 1,
                                        date                = date,
                                        status              = status 
                                    )
                insert_data.save()

        if not bill_by_bill_id:
            insert_bill_by_bill = bill_by_bill_data(
                                    voucher_type_id     = voucher_series_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_series_id,
                                    voucher_number_id   = insert_voucher_number,
                                    financial_year_id   = financial_year_id,
                                    # exchange_rate       = exchange_rate,
                                    date                = date,
                                    due_date            = due_date,
                                    due_days            = due_days,
                                    total_amount        = total_amount,
                                    entry_type          = entry_type,
                                    invoice_id          = insert_invoice_data,
                                    debit_ledger_id     = debit_ledger_id,
                                    credit_ledger_id    = credit_ledger_id,
                                    created_by          = created_by,
                                    created_at          = now,
                                    updated_at          = now,

                                    # additional
                                    bill_description    = bill_description,

                                )
            insert_bill_by_bill.save()
        else:
            update_bill =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now) 
         

                    
        response        =   {
                                "success"       : True,
                                "message"       : f"Sucessfully Added voucher of type - {voucher_series_id.voucher_type_id.name}",
                            }
    else:

        response        =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)


@api_view(['POST'])
def listVoucherTransactionUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        voucher_type_id     = data.get('voucher_type_id')
        from_date           = data.get('from_date') 
        to_date             = data.get('to_date')
        voucher_number      = data.get('voucher_number')

        get_invoice_data    = invoice_data.objects.filter(voucher_type_id=voucher_type_id,user_id=user_id,is_parent=True,latest=1)

        if from_date and to_date:
            get_invoice_data    = get_invoice_data.filter(date__range=(from_date,to_date))
        
        if voucher_number:
            get_invoice_data    = get_invoice_data.filter(voucher_number_appended__icontains=voucher_number)

        all_transactions    = []
        for invoice in get_invoice_data:
            invoice_id              = invoice.id
            child_data              = []
            get_childs              = invoice_data.objects.filter(parent_id=invoice)
            if get_childs:
                for child in get_childs:
                    

                    child_data.append({
                        'entry_type'        : child.entry_type,
                        'debit_ledger_id'   : None if not child.debit_ledger_id else child.debit_ledger_id.name,
                        'credit_ledger_id'  : None if not child.credit_ledger_id else child.credit_ledger_id.name,
                        'cheque_number'     : child.cheque_number,
                        'total_amount'      : child.total_amount
                    })

            all_transactions.append({
                    'id'                : invoice.id,
                    'entity_id'         : invoice.entity_id.id,
                    'entity_name'       : invoice.entity_id.name,
                    'branch_id'         : invoice.branch_id.id,
                    'branch_name'       : invoice.branch_id.name,
                    'debit_ledger_id'   : None if not invoice.debit_ledger_id else invoice.debit_ledger_id.id,
                    'debit_ledger_name' : None if not invoice.debit_ledger_id else invoice.debit_ledger_id.name,
                    'credit_ledger_id'  : None if not invoice.credit_ledger_id else invoice.credit_ledger_id.id,
                    'credit_ledger_name': None if not invoice.credit_ledger_id else invoice.credit_ledger_id.name,
                    'total_amount'      : invoice.total_amount,
                    'voucher_number'    : invoice.voucher_number_appended,
                    'voucher_series_name': invoice.voucher_series_id.name,
                    'date'              : invoice.date,
                    'status'            : invoice.status,
                    'child_data'        : child_data,

                })


        response            =   {
                                    "success"           : True,
                                    "message"           : "",
                                    "all_transactions"  : all_transactions
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)



@api_view(['POST'])
def getOtherVouchers(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        branch_id           = data.get('branch_id')
        ledger_id           = data.get('ledger_id')
        voucher_type        = data.get('voucher_type')

        list_voucher_series = invoice_data.objects.exclude(voucher_type_id=voucher_type,is_parent=1,status="Approved")
        voucher_type_list   = voucher_type_data.objects.exclude(pk=voucher_type)
        
        print(voucher_type_list)
        print(list_voucher_series)
        voucher = []

        for i in voucher_type_list:
            list_invoice =[]
            list_invoice = list(list_voucher_series.filter(
                        (Q(debit_ledger_id=ledger_id) | Q(credit_ledger_id=ledger_id)) & Q(voucher_type_id=i.id)
                    ).values('total_amount','status','date','pk','voucher_number_appended'))
            
            voucher.append({
                'voucher_type':i.name,
                'voucher_related':list_invoice
            }
            )
             
        
        response            =   {
                                    "success"           : True,
                                    "voucher_series"    : voucher
                                }
        
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def getVoucherTransactionUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        invoice_id              = data.get('invoice_id')

        get_invoice_data        = invoice_data.objects.get(id=invoice_id)

        get_child_transaction   = invoice_data.objects.filter(parent_id=invoice_id)

        child_transaction       = []
        for child in get_child_transaction:
            child_transaction.append({
                    'id'                : child.id,
                    'entry_type'        : child.entry_type,
                    'credit_ledger_id'  : None if not child.credit_ledger_id else child.credit_ledger_id.id,
                    'debit_ledger_id'   : None if not child.debit_ledger_id else child.debit_ledger_id.id,
                    'total_amount'      : child.total_amount,
                    'cheque_number'     : child.cheque_number,
                    'cheque_date'       : child.cheque_date,
                    'description'       : child.description,
                    'index_number'      : child.index_number
                })


        get_products_data       = order_product_data.objects.filter(invoice_id=invoice_id,additional_charge=0)
        all_products            = []
        print("productsssssss")
        print(all_products)
        
        for product in get_products_data:
            product_id      = product.product_id.id
            print(product_id)
            rack_id         = None if not product.rack_id else product.rack_id.id
            quantity        = product.quantity
            free            = product.free
            if not free:
                free= 0
            quantity= int(quantity)+int(free)
            print("Quaaaaaaaaa")
            print(quantity)
            product_details = product_data.objects.get(id=product_id)
            rack_name       = rack_data.objects.get(id=rack_id).name
            date            = get_invoice_data.date
            sum_credit_product  = 0
            sum_debit_product   = 0
            balance_quantity_at_previous_invoice_date    = 0
            balance_quantity_current    = 0
            csum_free_quantity  = 0
            dsum_free_quantity  = 0
            if rack_id:
                if date:
                        credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved',date__lt=date)
                        
                        if credit_product:
                            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                            csum_free_quantity      = credit_product.aggregate(total_free=Sum('free'))['total_free']

                        debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Debit",status='Approved',date__lt=date)
                        
                        if debit_product:
                            sum_debit_product       = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity'] 
                            dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free'] 
                               
                        balance_quantity_at_previous_invoice_date  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)
                # current available
                c_sum_credit_product    = 0
                c_sum_debit_product     = 0
                csum_free_quantity  = 0
                dsum_free_quantity  = 0
                credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved')
                if credit_product:
                    c_sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                    csum_free_quantity        = credit_product.aggregate(total_free=Sum('free'))['total_free']
                debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Debit",status='Approved')
                if debit_product:
                    c_sum_debit_product             = debit_product.aggregate(total_so_quantity=Sum('quantity'))['total_so_quantity']
                    dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']

                balance_quantity_current  = int(quantity)+((c_sum_credit_product+csum_free_quantity) - (c_sum_debit_product+dsum_free_quantity))   
                if int(balance_quantity_current)>=int(balance_quantity_at_previous_invoice_date):
                    quantity_can_buy    = balance_quantity_at_previous_invoice_date
                else:
                    quantity_can_buy    = int(balance_quantity_current)

            
            all_products.append({
                'id'                : product.id,
                'branch_id'         : None if not product.branch_id else product.branch_id.id,
                'entity_id'         : product.entity_id.id,
                'discount_type'     : product.discount_type,
                'discount'          : product.discount,
                'unit_id'           : None if not product.unit_id else product.unit_id.id,
                'godown_id'         : None if not product.godown_id else product.godown_id.id,
                'rack_id'           : None if not product.rack_id else product.rack_id.id,
                'tax_id'            : None if not product.tax_id else product.tax_id.id,
                'tax_amount'        : product.tax_amount,
                'batch_id'          : None if not product.batch_id else product.batch_id.id,
                'product_id'        : product.product_id.id,
                'product_code'      : product.product_code,
                'quantity'          : product.quantity,
                'free'              : product.free,
                'po_quantity'       : product.po_quantity,
                'so_quantity'       : product.so_quantity,
                'purchase_rate'     : product.purchase_rate,
                'amount'            : product.amount,
                'entry_type'        : product.entry_type,
                'created_at'        : product.created_at,
                'updated_at'        : product.updated_at,
                'pretax_amount'     : product.pretax_amount,
                'reverse_tax'       : product.reverse_tax,
                'reverse_tax_value' : product.reverse_tax_value,
                'reverse_cgst'      : product.reverse_cgst,
                'hsn'               : product.hsn,
                'sac'               : product.sac,
                'voucher_type_id'   : None if product.voucher_type_id else product.voucher_type_id.name,
                'estiamted_quantity': product.estiamted_quantity,
                'performa_quantity' : product.performa_quantity,
                'financial_year_id' : product.financial_year_id.id,
                'voucher_number_id' : product.voucher_number_id.id,
                'additional_charge' : product.additional_charge,
                'tax_value'         : product.tax_value,
                'balance_quantity'  : balance_quantity_at_previous_invoice_date,
                'balance_quantity_current':balance_quantity_current,
                'quantity_can_buy'  :quantity_can_buy
  
            })


        get_additional_charge   = order_product_data.objects.filter(invoice_id=invoice_id,additional_charge=1)
        print("additionalllllll")
        print(get_additional_charge)
        all_additional_charges  = []
        for product in get_additional_charge:
            all_additional_charges.append({
                'id'                : product.id,
                'branch_id'         : None if not product.branch_id else product.branch_id.id,
                'entity_id'         : product.entity_id.id,
                'discount_type'     : product.discount_type,
                'discount'          : product.discount,
                'unit_id'           : None if not product.unit_id else product.unit_id.id,
                'godown_id'         : None if not product.godown_id else product.godown_id.id,
                'rack_id'           : None if not product.rack_id else product.rack_id.id,
                'tax_id'            : None if not product.tax_id else product.tax_id.id,
                'tax_amount'        : product.tax_amount,
                'batch_id'          : None if not product.batch_id else product.batch_id.id,
                'product_id'        : product.product_id.id,
                'product_code'      : product.product_code,
                'quantity'          : product.quantity,
                'po_quantity'       : product.po_quantity,
                'so_quantity'       : product.so_quantity,
                'purchase_rate'     : product.purchase_rate,
                'amount'            : product.amount,
                'entry_type'        : product.entry_type,
                'created_at'        : product.created_at,
                'updated_at'        : product.updated_at,
                'pretax_amount'     : product.pretax_amount,
                'reverse_tax'       : product.reverse_tax,
                'reverse_tax_value' : product.reverse_tax_value,
                'reverse_cgst'      : product.reverse_cgst,
                'hsn'               : product.hsn,
                'sac'               : product.sac,
                'voucher_type_id'   : None if product.voucher_type_id else product.voucher_type_id.name,
                'estiamted_quantity': product.estiamted_quantity,
                'performa_quantity' : product.performa_quantity,
                'financial_year_id' : product.financial_year_id.id,
                'voucher_number_id' : product.voucher_number_id.id,
                'additional_charge' : product.additional_charge,
                'tax_value'         : product.tax_value
                
            })

        transaction_data        =   {
                                        'id'                        : get_invoice_data.id,
                                        'entity_id'                 : get_invoice_data.entity_id.id,
                                        'entity_name'               : get_invoice_data.entity_id.name,
                                        'branch_id'                 : get_invoice_data.branch_id.id,
                                        'branch_name'               : get_invoice_data.branch_id.name,
                                        'debit_ledger_id'           : None if not get_invoice_data.debit_ledger_id else get_invoice_data.debit_ledger_id.id,
                                        'debit_ledger_name'         : None if not get_invoice_data.debit_ledger_id else get_invoice_data.debit_ledger_id.name,
                                        'credit_ledger_id'          : None if not get_invoice_data.credit_ledger_id else get_invoice_data.credit_ledger_id.id,
                                        'credit_ledger_name'        : None if not get_invoice_data.credit_ledger_id else get_invoice_data.credit_ledger_id.name,
                                        'voucher_series_id'         : get_invoice_data.voucher_series_id.id,
                                        'financial_year_id'         : get_invoice_data.financial_year_id.id,
                                        'voucher_number_id'         : get_invoice_data.voucher_number_id.id,
                                        'exchange_rate'             : get_invoice_data.exchange_rate,
                                        'date'                      : get_invoice_data.date,
                                        'due_date'                  : get_invoice_data.due_date,
                                        'due_days'                  : get_invoice_data.due_days,
                                        'description'               : get_invoice_data.description,
                                        'total_amount'              : get_invoice_data.total_amount,
                                        'entry_type'                : get_invoice_data.entry_type,
                                        'status'                    : get_invoice_data.status,
                                        'against'                   : get_invoice_data.against,
                                        'cheque_number'             : get_invoice_data.cheque_number,
                                        'cheque_date'               : get_invoice_data.cheque_date,
                                        'cgst'                      : get_invoice_data.cgst,
                                        'sgst'                      : get_invoice_data.sgst,
                                        'igst'                      : get_invoice_data.igst,
                                        'pretax_amount'             : get_invoice_data.pretax_amount,
                                        'expence'                   : get_invoice_data.expence,
                                        'cess'                      : get_invoice_data.ses,
                                        'mrp'                       : get_invoice_data.mrp,
                                        'roundoff'                  : get_invoice_data.roundoff,
                                        'discount_type'             : get_invoice_data.discount_type,
                                        'discount'                  : get_invoice_data.discount,
                                        'transaction_type'          : get_invoice_data.transaction_type,
                                        'shipping_address'          : get_invoice_data.shipping_address,
                                        'receiver_address'          : get_invoice_data.receiver_address,
                                        'discount_value'            : get_invoice_data.discount_value,
                                        'customer_type_id'          : None if not get_invoice_data.customer_type_id else get_invoice_data.customer_type_id.id,
                                        'lut'                       : get_invoice_data.lut,
                                        'reverse_tax'               : get_invoice_data.reverse_tax,
                                        'reverse_tax_value'         : get_invoice_data.reverse_tax_value,
                                        'tax_value'                 : get_invoice_data.tax_value,
                                        'reverse_cgst'              : get_invoice_data.reverse_cgst,
                                        'reverse_sgst'              : get_invoice_data.reverse_sgst,
                                        'reverse_igst'              : get_invoice_data.reverse_igst,
                                        'edited_by'                 : None if not get_invoice_data.edited_by else get_invoice_data.edited_by.id,
                                        'against_po'                : None if not get_invoice_data.against_po else get_invoice_data.against_po.id,
                                        'against_so'                : None if not get_invoice_data.against_so else get_invoice_data.against_so.id,
                                        'against_sale_quotation'    : get_invoice_data.against_sale_quotation,
                                        'against_profoma_invoice'   : get_invoice_data.against_profoma_invoice,
                                        'against_credit_note'       : None if not get_invoice_data.against_credit_note else get_invoice_data.against_credit_note.id,
                                        'against_debit_note'        : None if not get_invoice_data.against_debit_note else get_invoice_data.against_debit_note.id,
                                        'ewaybill_number'           : get_invoice_data.ewaybill_number,
                                        'transporter_id'            : get_invoice_data.transporter_id,
                                        'vehicle_number'            : get_invoice_data.vehicle_number,
                                        'lrno'                      : get_invoice_data.lrno,
                                        'number_of_cases'           : get_invoice_data.number_of_cases,
                                        'weight'                    : get_invoice_data.weight,
                                        'manual_invoice_number'     : get_invoice_data.manuel_invoice_number,
                                        'gstin'                     : get_invoice_data.gstin,
                                        'gst_state_id'              : get_invoice_data.gst_state_id,
                                        'gst_treatment_id'          : None if not get_invoice_data.gst_treatment_id else get_invoice_data.gst_treatment_id.id,
                                        'is_amented'                : get_invoice_data.is_amented,
                                        'amented_upward'            : get_invoice_data.amented_upward,
                                        'amented_downward'          : get_invoice_data.amented_downward,
                                        'created_at'                : get_invoice_data.created_at,
                                        'updated_at'                : get_invoice_data.updated_at,
                                        'ledger_transaction'        : child_transaction,
                                        'all_products'              : all_products,
                                        'all_additional_charges'    : all_additional_charges,
                                        'voucher_number'            : get_invoice_data.voucher_number_appended,
                                        'pricing_lvl'               : None if not get_invoice_data.pricing_lvl else get_invoice_data.pricing_lvl.id,
                                        'additional_subtotal'       : get_invoice_data.additional_subtotal,
                                        'entry_description'         : get_invoice_data.entry_description

                                    }


        response            =   {
                                    "success"           : True,
                                    "message"           : "",
                                    "transaction_data"  : transaction_data
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)




@api_view(['POST'])
def updateVoucherTransactionUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        print("----------------")
        invoice_id              = data.get('id')
        invoice_id              = invoice_data.objects.get(id=invoice_id)
        if invoice_id.invoice_id:
            primary_inv           = invoice_id.invoice_id
        else:
            primary_inv           = invoice_id
        user_id                 = user_data.objects.get(id=user_id)
        entity_id               = data.get('entity_id')
        entity_id               = entity_data.objects.get(id=entity_id)
        branch_id               = data.get('branch_id')
        branch_id               = branch_data.objects.get(id=branch_id)
        entity_id               = branch_id.entity_id
        branch_gst_state_id     = branch_id.state
        branch_gst_treatment_id = None if not branch_id.gst_treatment else branch_id.gst_treatment
        # voucher_type_id         = data.get('voucher_type_id','')
        # voucher_type_id         = voucher_type_data.objects.get(id=voucher_type_id)
        voucher_series_id       = data.get('voucher_series_id','')
        voucher_series_id       = None if not voucher_series_id else voucher_series_data.objects.get(id=voucher_series_id) ##voucher series id
        voucher_number_id       = invoice_id.voucher_number_id
        voucher_type_id         = voucher_series_id.voucher_type_id
        
        date                    = data.get('date')
        due_date                = data.get('due_date')
        due_days                = data.get('due_days')
        description             = data.get('description')
        entry_description       = data.get('entry_description')
        total_amount            = data.get('total_amount')
        entry_type              = data.get('entry_type')
        created_by              = user_data.objects.get(id=user_id.id)
        financial_year_id       = financial_year_data.objects.get(active=True)
        debit_ledger_id         = data.get('debit_ledger_id')
        credit_ledger_id        = data.get('credit_ledger_id')
        debit_ledger_id         = None if not debit_ledger_id else accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id        = None if not credit_ledger_id else accounting_ledger_data.objects.get(id=credit_ledger_id)
        get_product_data        = data.get('product_data')
        status                  = data.get('status',"Approved")
        pricing_lvl             = data.get('pricing_lvl')
        if pricing_lvl:
            pricing_lvl         = pricing_level_data.objects.get(pk=pricing_lvl)
        else:
            pricing_lvl         = None

        

        # additional check for quantity available
        if voucher_series_id.voucher_type_id.name == 'Sales':
            if get_product_data:
                for product in get_product_data:
                        product_id      = product['product_id']
                        rack_id         = product['rack_id']
                        quantity        = int(product['quantity'])
                        free            = int(product.get('free',0))
                        quantity        = quantity+free
                        previous_quantity   = product.get('previous_quantity',0)
                        if not previous_quantity:
                            previous_quantity   = 0
                        
                        previous_quantity   = int(previous_quantity)
                        if previous_quantity:
                            if quantity>previous_quantity:

                                product_details = product_data.objects.get(id=product_id)
                                sum_debit_product   = 0
                                sum_credit_product  = 0
                                csum_free_quantity  = 0
                                dsum_free_quantity  = 0
                                credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved')
                                print(credit_product)
                                print("----------------")
                                if credit_product:
                                    sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                                    csum_free_quantity      = credit_product.aggregate(total_free=Sum('free'))['total_free']
                                debit_product       = order_product_data.objects.filter(product_id=product_id,latest=1,rack_id=rack_id,entry_type="Debit",status='Approved')
                                print(debit_product)
                                if debit_product:
                                    sum_debit_product       = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']
                                    dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']
                                
                                balance_quantity  = previous_quantity + (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)

                                
                                rack_name         = rack_data.objects.get(id=rack_id).name
                                if balance_quantity<int(quantity):
                                    response    ={
                                            "success"   :False,
                                            "message"   :f"{product_details.name} left Only {balance_quantity} on rack {rack_name}"
                                    }

                                    return Response(response)


        bill_by_bill_id         = data.get('bill_by_bill_id','')
        bill_by_bill_id         = None if not bill_by_bill_id else bill_by_bill_data.objects.get(id=bill_by_bill_id)
        bill_description        = data.get('bill_description','')
        roundoff                = data.get('roundoff')
        shipping_address        = data.get('shipping_address','')
        receiver_address        = data.get('receiver_address','')
        discount_value          = data.get('discount_value','')
        customer_type_id        = data.get('customer_type_id','')
        customer_type_id        = None if not customer_type_id else customer_type.objects.get(id=customer_type_id)
        lut                     = data.get('lut','')
        reverse_tax             = data.get('reverse_tax','')
        reverse_tax_value       = data.get('reverse_tax_value','')
        reverse_cgst            = data.get('reverse_cgst','')
        reverse_sgst            = data.get('reverse_sgst','')
        reverse_igst            = data.get('reverse_igst','')
        ewaybill_number         = data.get('ewaybill_number','')
        transporter_id          = data.get('transporter_id','')
        vehicle_number          = data.get('vehicle_number','')
        lrno                    = data.get('lrno','')
        number_of_cases         = data.get('number_of_cases','')
        weight                  = data.get('weight','')
        is_parent               = True
        manuel_invoice_number   = data.get('manuel_invoice_number','')
        gstin                   = data.get('gstin','')
        gst_state_id            = data.get('gst_state_id',''),
        gst_treatment_id        = data.get('gst_treatment_id','')
        gst_treatment_id        = None if not gst_treatment_id else gst_treatment_data.objects.get(id=gst_treatment_id)

        get_credit_ledgers      = data.get('credit_ledgers')
        get_debit_ledgers       = data.get('debit_ledgers')

        cheque_number           = data.get('cheque_number','')
        cheque_date             = data.get('cheque_date','')
        exchange_rate           = data.get('exchange_rate','')
        # missed
        order_id                = data.get('order_id',None)
        if order_id:
            order_id            = invoice_data.objects.get(pk=order_id)
        else:
            order_id            = None

        against                 = data.get('against','')
        cgst                    = data.get('cgst','')
        sgst                    = data.get('sgst','')
        igst                    = data.get('igst','')
        expence                 = data.get('expence','')
        ses                     = data.get('ses','')
        mrp                     = data.get('mrp','')
        roundoff                = data.get('roundoff','')
        discount_type           = data.get('discount_type','')
        discount                = data.get('discount','')
        is_child                = data.get('is_child',0)
        is_amented              = data.get('is_amented',0)
        amented_upward          = data.get('amented_upward',0)
        amented_downward        = data.get('amented_downward',0)


        now                     = datetime.now()
        get_additional_charge   = data.get('additional_charge_data','')
        pretax_amount           = data.get('pretax_amount',0)
        additional_subtotal     = data.get('additional_subtotal',0)
        tax_value               = data.get('tax_value',0)
        reverse_tax_value       = data.get('reverse_tax_value',0)

        # check_get_data          = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
        
        # voucher_number          = 1

        # if(check_get_data):
        #     get_latest_data     = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
        #     voucher_number      = int(get_latest_data.voucher_number) + int(1)
            

        # insert_voucher_number   = voucher_number_data(
        #                             voucher_type_id     = voucher_series_id.voucher_type_id,
        #                             entity_id           = entity_id,
        #                             branch_id           = branch_id,
        #                             voucher_series_id   = voucher_series_id,
        #                             voucher_number      = voucher_number,
        #                             financial_year_id   = financial_year_id,
        #                             created_at          = now,
        #                             updated_at          = now
        #                         )
        # insert_voucher_number.save()

        update_invoice      = invoice_data.objects.filter(Q(pk=invoice_id.id) | Q(invoice_id=invoice_id.id)).update(latest=False,updated_at=now)
        
        # child invoice update
        parent_invoices = invoice_data.objects.filter(Q(pk=invoice_id.id) | Q(invoice_id=invoice_id.id))
        for parent in parent_invoices:
            print(parent)
            print(parent.pk)
            childs = invoice_data.objects.filter(parent_id=parent.pk)
            print(childs)
            childs = invoice_data.objects.filter(parent_id=parent.pk).update(latest=False,updated_at=now)
            if parent.invoice_id:
                all_history = invoice_data.objects.filter(Q(invoice_id=parent.invoice_id) | Q(parent_id=parent.invoice_id)).update(latest=False,updated_at=now)
                break

        

        get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id.id).update(latest=False,updated_at=now)

        

        insert_invoice_data = invoice_data(
                                invoice_id              = primary_inv,
                                user_id                 = user_id,
                                entity_id               = entity_id,
                                branch_id               = branch_id,
                                voucher_type_id         = voucher_type_id,
                                due_date                = due_date,
                                due_days                = due_days,
                                description             = description,
                                total_amount            = total_amount,
                                additional_subtotal     = additional_subtotal,
                                tax_value               = tax_value,
                                exchange_rate           = exchange_rate,
                                entry_type              = entry_type,
                                financial_year_id       = financial_year_id,
                                voucher_number_id       = voucher_number_id,
                                voucher_series_id       = voucher_series_id,
                                created_by              = created_by,
                                debit_ledger_id         = debit_ledger_id,
                                credit_ledger_id        = credit_ledger_id,
                                against                 = against,
                                order_id                = order_id,
                                cgst                    = cgst,
                                sgst                    = sgst,
                                igst                    = igst,
                                pretax_amount           = pretax_amount,
                                expence                 = expence,
                                ses                     = ses,
                                mrp                     = mrp,
                                discount_type           = discount_type,
                                discount                = discount,
                                is_child                = is_child,
                                is_amented              = is_amented,
                                amented_upward          = amented_upward,
                                amented_downward        = amented_downward,
                                created_at              = now,
                                updated_at              = now,
                                
                                

                                # additional
                                roundoff                = roundoff,
                                shipping_address        = shipping_address,
                                receiver_address        = receiver_address,
                                discount_value          = discount_value,
                                customer_type_id        = customer_type_id,
                                lut                     = lut,
                                reverse_tax             = reverse_tax,
                                reverse_tax_value       = reverse_tax_value,
                                reverse_cgst            = reverse_cgst,
                                reverse_sgst            = reverse_sgst,
                                reverse_igst            = reverse_igst,
                                ewaybill_number         = ewaybill_number,
                                transporter_id          = transporter_id,
                                vehicle_number          = vehicle_number,
                                lrno                    = lrno,
                                number_of_cases         = number_of_cases,
                                weight                  = weight,
                                is_parent               = is_parent,
                                manuel_invoice_number   = manuel_invoice_number,
                                gstin                   = gstin,
                                gst_state_id            = gst_state_id,
                                gst_treatment_id        = gst_treatment_id,
                                cheque_number           = cheque_number,
                                cheque_date             = cheque_date,
                                voucher_number_appended = invoice_id.voucher_number_appended,
                                branch_gst_state_id     = branch_gst_state_id,
                                branch_gst_treatment_id = branch_gst_treatment_id,
                                latest                  = 1,
                                status                  = status,
                                date                    = date,
                                pricing_lvl             =pricing_lvl,
                                entry_description       = entry_description
                            )
        insert_invoice_data.save()

        if get_debit_ledgers:
            for debit_ledger in get_debit_ledgers:
                c_entry_tyepe       = debit_ledger['entry_type']
                c_debit_ledger_id   = debit_ledger['debit_ledger_id']
                c_total_amount      = debit_ledger['total_amount']
                c_cheque_number     = debit_ledger['cheque_number']
                c_cheque_date       = debit_ledger['cheque_date']
                c_description       = debit_ledger['description']
                index_number        = debit_ledger.get('index_number',0)

                c_debit_ledger_id   = None if not c_debit_ledger_id else accounting_ledger_data.objects.get(id=c_debit_ledger_id)

                insert_debit_ledger_data  = invoice_data(
                                        user_id                 = user_id,
                                        entity_id               = entity_id,
                                        branch_id               = branch_id,
                                        voucher_type_id         = voucher_type_id,
                                        date                    = date,
                                        due_date                = due_date,
                                        due_days                = due_days,
                                        description             = c_description,
                                        exchange_rate           = exchange_rate,
                                        total_amount            = c_total_amount,
                                        entry_type              = c_entry_tyepe,
                                        financial_year_id       = financial_year_id,
                                        voucher_number_id       = voucher_number_id,
                                        voucher_series_id       = voucher_series_id,
                                        created_by              = created_by,
                                        debit_ledger_id         = c_debit_ledger_id,
                                        credit_ledger_id        = credit_ledger_id,
                                        invoice_id              = primary_inv,
                                        order_id                = order_id,
                                        cgst                    = cgst,
                                        sgst                    = sgst,
                                        igst                    = igst,
                                        pretax_amount           = pretax_amount,
                                        expence                 = expence,
                                        ses                     = ses,
                                        mrp                     = mrp,
                                        discount_type           = discount_type,
                                        discount                = discount,
                                        is_amented              = is_amented,
                                        amented_upward          = amented_upward,
                                        amented_downward        = amented_downward,
                                        # transaction_type        = transaction_type,
                                        created_at              = now,
                                        updated_at              = now,

                                        # additional
                                        roundoff                = roundoff,
                                        shipping_address        = shipping_address,
                                        receiver_address        = receiver_address,
                                        discount_value          = discount_value,
                                        customer_type_id        = customer_type_id,
                                        lut                     = lut,
                                        reverse_tax             = reverse_tax,
                                        reverse_tax_value       = reverse_tax_value,
                                        reverse_cgst            = reverse_cgst,
                                        reverse_sgst            = reverse_sgst,
                                        reverse_igst            = reverse_igst,
                                        ewaybill_number         = ewaybill_number,
                                        transporter_id          = transporter_id,
                                        vehicle_number          = vehicle_number,
                                        lrno                    = lrno,
                                        number_of_cases         = number_of_cases,
                                        weight                  = weight,
                                        is_parent               = False,
                                        is_child                = True,
                                        parent_id               = insert_invoice_data,
                                        manuel_invoice_number   = manuel_invoice_number,
                                        gstin                   = gstin,
                                        gst_state_id            = gst_state_id,
                                        gst_treatment_id        = gst_treatment_id,
                                        cheque_number           = c_cheque_number,
                                        cheque_date             = c_cheque_date,
                                        branch_gst_state_id     = branch_gst_state_id,
                                        branch_gst_treatment_id = branch_gst_treatment_id,
                                        pricing_lvl             = pricing_lvl,
                                        latest                  = 1,
                                        status                  = status,

                                    )
                insert_debit_ledger_data.save()

        if get_credit_ledgers:
            for credit_ledger in get_credit_ledgers:
                d_entry_type        = credit_ledger['entry_type']
                d_credit_ledger     = credit_ledger['credit_ledger_id']
                d_total_amount      = credit_ledger['total_amount']
                d_cheque_number     = credit_ledger['cheque_number']
                d_cheque_date       = credit_ledger['cheque_date']
                d_description       = credit_ledger['description']
                index_number        = credit_ledger.get('index_number',0)


                d_credit_ledger     = None if not d_credit_ledger else accounting_ledger_data.objects.get(id=d_credit_ledger)

                insert_credit_ledger_data  = invoice_data(
                                        user_id                 = user_id,
                                        entity_id               = entity_id,
                                        branch_id               = branch_id,
                                        voucher_type_id         = voucher_type_id,
                                        date                    = date,
                                        due_date                = due_date,
                                        exchange_rate           = exchange_rate,
                                        invoice_id              = primary_inv,
                                        order_id                = order_id,
                                        against                 = against,
                                        due_days                = due_days,
                                        description             = d_description,
                                        total_amount            = d_total_amount,
                                        entry_type              = d_entry_type,
                                        financial_year_id       = financial_year_id,
                                        voucher_number_id       = voucher_number_id,
                                        voucher_series_id       = voucher_series_id,
                                        created_by              = created_by,
                                        debit_ledger_id         = debit_ledger_id,
                                        credit_ledger_id        = d_credit_ledger,
                                        # transaction_type        = transaction_type,
                                        created_at              = now,
                                        updated_at              = now,

                                        # additional
                                        roundoff                = roundoff,
                                        shipping_address        = shipping_address,
                                        receiver_address        = receiver_address,
                                        discount_value          = discount_value,
                                        customer_type_id        = customer_type_id,
                                        lut                     = lut,
                                        reverse_tax             = reverse_tax,
                                        reverse_tax_value       = reverse_tax_value,
                                        reverse_cgst            = reverse_cgst,
                                        reverse_sgst            = reverse_sgst,
                                        reverse_igst            = reverse_igst,
                                        ewaybill_number         = ewaybill_number,
                                        transporter_id          = transporter_id,
                                        vehicle_number          = vehicle_number,
                                        lrno                    = lrno,
                                        number_of_cases         = number_of_cases,
                                        weight                  = weight,
                                        is_parent               = False,
                                        is_child                = True,
                                        parent_id               = insert_invoice_data,
                                        manuel_invoice_number   = manuel_invoice_number,
                                        gstin                   = gstin,
                                        gst_state_id            = gst_state_id,
                                        gst_treatment_id        = gst_treatment_id,
                                        cheque_number           = d_cheque_number,
                                        cheque_date             = d_cheque_date,
                                        branch_gst_state_id     = branch_gst_state_id,
                                        branch_gst_treatment_id = branch_gst_treatment_id,
                                        pricing_lvl             = pricing_lvl,
                                        latest                  = 1,
                                        status                  = status,
                                        index_number            = index_number
                                    )
                insert_credit_ledger_data.save()

        if get_product_data:
            for product in get_product_data:
                product_id          = product['product_id']
                product_code        = product['product_code']
                quantity            = product['quantity']
                free                = product['free']
                purchase_rate       = product['purchase_rate']
                amount              = product['amount']
                unit_id             = product['unit_id']
                unit_id             = None if not unit_id else unit_data.objects.get(id=unit_id)
                godown_id           = product.get('godown_id','')
                godown_id           = None if not godown_id else godown_data.objects.get(id=godown_id)
                rack_id             = product.get('rack_id','')
                rack_id             = None if not rack_id else rack_data.objects.get(id=rack_id)
                batch_id            = product.get('batch_id','')
                batch_id            = None if not batch_id else batch_data.objects.get(id=batch_id)
                tax_id              = product.get('tax_id','')
                tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)

                tax_amount          = product['tax_amount']
                entry_type          = entry_type
                # additional
                discount_type       = product.get('discount_type','')
                discount            = product.get('discount',0)
                pretax_amount       = product.get('pretax_amount',0)
                reverse_tax         = product.get('reverse_tax',0)
                reverse_tax_value   = product.get('reverse_tax_value',0)
                reverse_cgst        = product.get('reverse_cgst',0)
                reverse_sgst        = product.get('reverse_sgst',0)
                reverse_igst        = product.get('reverse_igst',0)
                hsn                 = product.get('hsn','')
                sac                 = product.get('sac','')
                estiamted_quantity  = product.get('estiamted_quantity','')
                performa_quantity   = product.get('performa_quantity','')
                additional_charge   = 0
                tax_value           = product.get('tax_value')


                product_id          = product_data.objects.get(id=product_id)
                entity_id           = branch_id.entity_id
                cgst                = product.get('cgst','')
                sgst                = product.get('sgst','')
                igst                = product.get('igst','')
                po_quantity         = product.get('po_quantity','')
                so_quantity         = product.get('so_quantity','')

                print(voucher_type_id)
                


                insert_product_data = order_product_data(
                                        invoice_id          =insert_invoice_data,
                                        branch_id           =branch_id,
                                        entity_id           =entity_id,
                                        discount_type       =discount_type,
                                        discount            =discount,
                                        unit_id             =unit_id,
                                        
                                        godown_id           =godown_id,
                                        rack_id             =rack_id,
                                        tax_id              =tax_id,
                                        tax_amount          =tax_amount,
                                        batch_id            =batch_id,
                                        product_id          =product_id,
                                        product_code        =product_code,
                                        quantity            =quantity,
                                        free                = free,
                                        purchase_rate       =purchase_rate,
                                        amount              =amount,
                                        entry_type          =entry_type,
                                        created_at          =now,
                                        updated_at          =now,
                                        #  additional
                                        pretax_amount       =pretax_amount,
                                        reverse_tax         =reverse_tax,
                                        reverse_tax_value=  reverse_tax_value,
                                        reverse_cgst        =reverse_cgst,
                                        hsn                 =hsn,
                                        sac                 =sac,
                                        voucher_type_id     =voucher_type_id,
                                        estiamted_quantity  =estiamted_quantity,
                                        performa_quantity   =performa_quantity,
                                        financial_year_id   =financial_year_id,
                                        voucher_number_id   =voucher_number_id,
                                        additional_charge   = additional_charge,
                                        tax_value           = tax_value,
                                        cgst                = cgst,
                                        sgst                = sgst,
                                        igst                = igst,
                                        so_quantity         = so_quantity,
                                        po_quantity         = po_quantity,
                                        latest              = 1,
                                        date                = date,
                                        status              = status 
                                    )
                insert_product_data.save()

        if get_additional_charge:
            for product in get_additional_charge:
                # get_id          = product['id']
                product_id          = product['product_id']
                product_code        = product['product_code']
                quantity            = product['quantity']
                purchase_rate       = product['purchase_rate']
                amount              = product['amount']
                unit_id             = None

                godown_id           = godown_data.objects.filter(entity_id=entity_id,name='Main')
                godown_id           = None if not godown_id else godown_data.objects.get(entity_id=entity_id,name='Main')
                rack_id             = rack_data.objects.filter(name='Main',entity_id=entity_id)
                rack_id             = None if not rack_id else rack_data.objects.get(name='Main',entity_id=entity_id)
                batch_id            = None
                tax_id              = product['tax_id']
                tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)
                tax_amount          = product['tax_amount']
                # additional
                discount_type       = product.get('discount_type','')
                discount            = product.get('discount',0)
                pretax_amount       = product.get('pretax_amount',0)
                reverse_tax         = product.get('reverse_tax',0)
                reverse_tax_value   = product.get('reverse_tax_value',0)
                reverse_cgst        = product.get('reverse_cgst',0)
                reverse_sgst        = product.get('reverse_sgst',0)
                reverse_igst        = product.get('reverse_igst',0)
                hsn                 = product.get('hsn','')
                sac                 = product.get('sac','')
                estiamted_quantity  = product.get('estiamted_quantity','')
                performa_quantity   = product.get('performa_quantity','')
                additional_charge   = 1
                tax_value           = product.get('tax_value')
                product_id          = product_data.objects.get(id=product_id)
                    
                cgst                = product.get('cgst','')
                sgst                = product.get('sgst','')
                igst                = product.get('igst','')
                po_quantity         = product.get('po_quantity','')
                so_quantity         = product.get('so_quantity','')

                
                
            
                insert_data         = order_product_data(
                                        invoice_id          =insert_invoice_data,
                                        branch_id           =branch_id,
                                        entity_id           =entity_id,
                                        discount_type       =discount_type,
                                        discount            =discount,
                                        unit_id             =unit_id,
                                        
                                        godown_id           =godown_id,
                                        rack_id             =rack_id,
                                        tax_id              =tax_id,
                                        tax_amount          =tax_amount,
                                        batch_id            =batch_id,
                                        product_id          =product_id,
                                        product_code        =product_code,
                                        quantity            =quantity,
                                        purchase_rate       =purchase_rate,
                                        amount              =amount,
                                        entry_type          =entry_type,
                                        created_at          =now,
                                        updated_at          =now,
                                        #  additional
                                        pretax_amount       =pretax_amount,
                                        reverse_tax         =reverse_tax,
                                        reverse_tax_value   = reverse_tax_value,
                                        reverse_cgst        =reverse_cgst,
                                        hsn                 =hsn,
                                        sac                 =sac,
                                        voucher_type_id     =voucher_type_id,
                                        estiamted_quantity  =estiamted_quantity,
                                        performa_quantity   =performa_quantity,
                                        financial_year_id   =financial_year_id,
                                        voucher_number_id   =voucher_number_id,
                                        additional_charge   = additional_charge,
                                        tax_value           = tax_value,
                                        cgst                = cgst,
                                        sgst                = sgst,
                                        igst                = igst,
                                        so_quantity         = so_quantity,
                                        po_quantity         = po_quantity,
                                        latest              = 1,
                                        date                = date,
                                        status              = status 
                                    )
                insert_data.save()

        if not bill_by_bill_id:
            insert_bill_by_bill = bill_by_bill_data(
                                    voucher_type_id     = voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_series_id,
                                    voucher_number_id   = voucher_number_id,
                                    financial_year_id   = financial_year_id,
                                    # exchange_rate       = exchange_rate,
                                    date                = date,
                                    due_date            = due_date,
                                    due_days            = due_days,
                                    total_amount        = total_amount,
                                    entry_type          = entry_type,
                                    invoice_id          = insert_invoice_data,
                                    debit_ledger_id     = debit_ledger_id,
                                    credit_ledger_id    = credit_ledger_id,
                                    created_by          = created_by,
                                    created_at          = now,
                                    updated_at          = now,

                                    # additional
                                    bill_description    = bill_description,

                                )
            insert_bill_by_bill.save()
        else:
            update_bill =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now) 
         

                    
        response        =   {
                                "success"       : True,
                                "message"       : f"Sucessfully Updated voucher of type - {voucher_series_id.voucher_type_id.name}"
                            }
    else:

        response        =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)





@api_view(['POST'])
def listVoucherTypesUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_voucher_types   = voucher_type_data.objects.all()

        all_voucher_types   = []
        for voucher_type in get_voucher_types:
            all_voucher_types.append({
                    'id'            : voucher_type.id,
                    'name'          : voucher_type.name,
                    # 'start_index'   : voucher_type.start_index
                })


        response            =   {
                                    "success"           : True,
                                    "message"           : "",
                                    "all_voucher_types" : all_voucher_types
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)





@api_view(['POST'])
def userPortalLogin(request):
    data                = request.data
    app_token           = data.get('app_token')
    get_token           = app_auth_token_tb.objects.first()


    if app_token == get_token.token:

        email           = data.get('email')
        password        = data.get('password')
        
        get_user_data   = user_data.objects.all().filter(email=email)
        
        if get_user_data:
            for x in get_user_data:
                if(check_password(password,x.password) == True):
                    user_id         = x.id
                  
                    request.session['userId']   = x.id
                    
                    print('-------------------')
                    print(app_token)
                    print(get_token.token)
                    print(request.session['userId'])

                    response        =   {
                                            'user_id'   : user_id,
                                            'success'   : True,
                                            'message'   : 'Login successful.',   
                                        }
                    
                else:
                    response        =   {
                                            "success"   : False,
                                            'message'   : 'Invalid user credentials.'
                                        }
        else:
            response                =   {
                                            "success"   : False,
                                            'message'   : 'Invalid user credentials.'
                                        }

    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token",
                        }


    return Response(response)




@api_view(['POST'])
def addPurchaseOrderFromUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        user_id             = user_data.objects.get(id=user_id)
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        entry_type          = "Credit"
        get_product_data    = data.get('product_data')
        now                 = datetime.now()

        insert_order_data   = order_data(user_id=user_id,branch_id=branch_id,date=date,due_date=due_date,due_days=due_days,description=description,total_amount=total_amount,entry_type=entry_type,created_at=now,updated_at=now)
        insert_order_data.save()
            
        for product in get_product_data:
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']

            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)

            insert_data     = order_product_data(order_id=insert_order_data,unit_id=unit_id,product_id=product_id,product_code=product_code,po_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
            insert_data.save()

            response        =   {
                                    "success"   : True,
                                    "message"   : "",
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)



@api_view(['POST'])
def listPurchaseOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:

        get_data    = order_data.objects.all().filter(entry_type='Credit',user_id=user_id).order_by('-id')
        list_orders = []

        for order in get_data:
            get_invoice_data= invoice_data.objects.all().filter(order_id=order.id,invoice_id=None).exists()
            
            invoice_id      = None
            if get_invoice_data:
                invoice_id  = invoice_data.objects.get(order_id=order.id,invoice_id=None)
                invoice_id  = invoice_id.id

            list_orders.append({
                'id'                : order.id,
                'order_number'      : order.order_number,
                'branch_id'         : order.branch_id.id,
                'branch_name'       : order.branch_id.name,
                'voucher_type_id'   : order.voucher_type_id,
                'total_amount'      : order.total_amount,
                'generate_invoice'  : order.generate_invoice,
                'date'              : order.date,
                'invoice_id'        : invoice_id

            })

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "list_orders"   : list_orders
                        }


    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def updatePurchaseOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        order_id            = data.get('id')
        order_id            = order_data.objects.get(id=order_id)
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        exchange_rate       = data.get('exchange_rate')
        get_product_data    = data.get('product_data')
        entry_type          = "Credit"

        now                 = datetime.now()

        update_data         = order_data.objects.filter(id=order_id.id).update(
                                branch_id       = branch_id,
                                date            = date,
                                due_date        = due_date,
                                due_days        = due_days,
                                description     = description,
                                total_amount    = total_amount,
                                exchange_rate   = exchange_rate,
                                entry_type      = entry_type,
                                updated_at      = now
                            )
            
        print(dict(request.POST.items()))

        for product in get_product_data:
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']

            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)

            insert_data     = order_product_data(order_id=order_id,unit_id=unit_id,product_id=product_id,product_code=product_code,po_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
            insert_data.save()

            response        =   {
                                    "success"   : True,
                                    "message"   : "",
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)



@api_view(['POST'])
def deletePurchaseOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_id      = data.get('id')
        fromReg     = order_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            response        =   {
                                    "success"   : True,
                                    "message"   : "",
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)




@api_view(['POST'])
def deletePurchaseOrderProductUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_id          = data.get('id')
        now             = datetime.now()

        product_data    = order_product_data.objects.get(id=get_id)
        
        total_amount    = 0 if not product_data.amount else product_data.amount
        get_order_data  = product_data.order_id

        total_amount    = float(0 if not get_order_data else get_order_data.total_amount) - float(total_amount)

        update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

        fromReg         = order_product_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            response        =   {
                                    "success"   : True,
                                    "message"   : "",
                                }
    else:

        response            =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

    return Response(response)




@api_view(['POST'])
def listPurchaseInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_data    = invoice_data.objects.all().filter(user_id=user_id,entry_type='Credit',invoice_id=None).order_by('-id')
        
        list_invoice= []
        for order in get_data:
            list_invoice.append({
                'id'                : order.id,
                'order_number'      : order.voucher_number_id.voucher_number,
                'branch_id'         : order.branch_id.id,
                'branch_name'       : order.branch_id.name,
                'voucher_type_id'   : order.voucher_type_id.id,
                'voucher_type_name' : order.voucher_type_id.name,
                'total_amount'      : order.total_amount,
                'date'              : order.date

            })

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "list_invoice"  : list_invoice
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def addPurchaseInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        print("----------------")
        user_id             = user_data.objects.get(id=user_id)
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        voucher_series_id   = data.get('voucher_series_id','')
        voucher_series_id   = None if not voucher_series_id else voucher_series_data.objects.get(id=voucher_series_id) ##voucher series id
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        entry_type          =  data.get('entry_type')
      
        created_by          = user_data.objects.get(id=user_id.id)
        financial_year_id   = financial_year_data.objects.get(active=True)

        entity_id           = branch_id.entity_id
        debit_ledger_id     = data.get('debit_ledger_id')
        credit_ledger_id    = data.get('credit_ledger_id')
        debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)
        get_product_data    = data.get('product_data')

        # additional
        bill_by_bill_id     = data.get('bill_by_bill_id','')
        bill_description    = data.get('bill_description','')
        roundoff            = data.get('roundoff')
        shipping_address    = data.get('shipping_address','')
        receiver_address    = data.get('receiver_address','')
        # new latest fields
        discount_value      = data.get('discount_value','')
        customer_type_id    = data.get('customer_type_id','')
        customer_type_id    = None if not customer_type_id else customer_type.objects.get(id=customer_type_id)
        lut                 = data.get('lut','')
        reverse_tax         = data.get('reverse_tax','')
        reverse_tax_value   = data.get('reverse_tax_value','')
        reverse_cgst        = data.get('reverse_cgst','')
        reverse_sgst        = data.get('reverse_sgst','')
        reverse_igst        = data.get('reverse_igst','')
        ewaybill_number     = data.get('ewaybill_number','')
        transporter_id      = data.get('transporter_id','')
        vehicle_number      = data.get('vehicle_number','')
        lrno                = data.get('lrno','')
        number_of_cases     = data.get('number_of_cases','')
        transaction_type   = data.get('transaction_type','')
        weight              = data.get('weight','')
        is_parent           = 1
        manuel_invoice_number= data.get('manuel_invoice_number','')
        gstin               = data.get('gstin','')
        gst_state_id        = data.get('gst_state_id',''),
        gst_treatment_id    = data.get('gst_treatment_id','')
        if gst_treatment_id:
            gst_treatment_id    = gst_treatment_data.objects.get(id=gst_treatment_id)
        else:
            gst_treatment_id
        now                     = datetime.now()
        get_additional_charge   = data.get('additional_charge_data','')

        check_get_data      = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
        
        voucher_number      = 1

        if(check_get_data):
            get_latest_data = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
            voucher_number  = int(get_latest_data.voucher_number) + int(1)
            


        insert_voucher_number   = voucher_number_data(
                                    voucher_type_id     = voucher_series_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_series_id,
                                    voucher_number      = voucher_number,
                                    financial_year_id   = financial_year_id,
                                    created_at          = now,
                                    updated_at          = now
                                )
        insert_voucher_number.save()

        insert_invoice_data = invoice_data(
                                user_id             = user_id,
                                entity_id           = entity_id,
                                branch_id           = branch_id,
                                voucher_type_id     = voucher_series_id.voucher_type_id,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                description         = description,
                                total_amount        = total_amount,
                                # exchange_rate       = exchange_rate,
                                entry_type          = entry_type,
                                financial_year_id   = financial_year_id,
                                voucher_number_id   = insert_voucher_number,
                                voucher_series_id   = voucher_series_id,
                                created_by          = created_by,
                                debit_ledger_id     = debit_ledger_id,
                                credit_ledger_id    = credit_ledger_id,
                                transaction_type    = transaction_type,
                                created_at          = now,
                                updated_at          = now,

                                # additional
                                roundoff            = roundoff,
                                shipping_address    = shipping_address,
                                receiver_address    = receiver_address,
                                discount_value      = discount_value,
                                customer_type_id    = customer_type_id,
                                lut                 = lut,
                                reverse_tax         = reverse_tax,
                                reverse_tax_value   = reverse_tax_value,
                                reverse_cgst        = reverse_cgst,
                                reverse_sgst        = reverse_sgst,
                                reverse_igst        = reverse_igst,
                                ewaybill_number     = ewaybill_number,
                                transporter_id      = transporter_id,
                                vehicle_number      = vehicle_number,
                                lrno                = lrno,
                                number_of_cases     = number_of_cases,
                                weight              = weight,
                                is_parent           = is_parent,
                                manuel_invoice_number= manuel_invoice_number,
                                gstin               = gstin,
                                gst_state_id        = gst_state_id,
                                gst_treatment_id    = gst_treatment_id
                            )
        insert_invoice_data.save()

        if get_product_data:
            for product in get_product_data:
                # get_id          = product['id']
                product_id      = product['product_id']
                product_code    = product['product_code']
                quantity        = product['quantity']
                purchase_rate   = product['purchase_rate']
                amount          = product['amount']
                unit_id         = product['unit_id']
                unit_id         = None if not unit_id else unit_data.objects.get(id=unit_id)
                godown_id       = product.get('godown_id','')
                godown_id       = None if not godown_id else godown_data.objects.get(id=godown_id)
                rack_id         = product.get('rack_id','')
                rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
                batch_id        = product.get('batch_id','')
                batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
                tax_id          = product.get('tax_id','')
                tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)

                tax_amount      = product['tax_amount']
                entry_type      = "Credit"
                # additional
                discount_type   = product.get('discount_type','')
                discount        = product.get('discount',0)
                pretax_amount   = product.get('pretax_amount',0)
                reverse_tax     = product.get('reverse_tax',0)
                reverse_tax_value= product.get('reverse_tax_value',0)
                reverse_cgst    = product.get('reverse_cgst',0)
                reverse_sgst    = product.get('reverse_sgst',0)
                reverse_igst    = product.get('reverse_igst',0)
                hsn             = product.get('hsn','')
                sac             = product.get('sac','')
                voucher_type_id     = voucher_series_id.voucher_type_id,
                estiamted_quantity  = product.get('estiamted_quantity','')
                performa_quantity   = product.get('performa_quantity','')
                financial_year_id   = product.get('financial_year_id','')
                voucher_number_id   = insert_voucher_number
                additional_charge   = 0
                tax_value           = product.get('tax_value')


                product_id      = product_data.objects.get(id=product_id)
                entity_id       = branch_id.entity_id


                insert_data     = order_product_data(
                                invoice_id          =insert_invoice_data,
                                branch_id           =branch_id,
                                entity_id           =entity_id,
                                discount_type       =discount_type,
                                discount            =discount,
                                unit_id             =unit_id,
                                
                                godown_id           =godown_id,
                                rack_id             =rack_id,
                                tax_id              =tax_id,
                                tax_amount          =tax_amount,
                                batch_id            =batch_id,
                                product_id          =product_id,
                                product_code        =product_code,
                                quantity            =quantity,
                                po_quantity         =quantity,
                                purchase_rate       =purchase_rate,
                                amount              =amount,
                                entry_type          =entry_type,
                                created_at          =now,
                                updated_at          =now,
                                #  additional
                                pretax_amount       =pretax_amount,
                                reverse_tax         =reverse_tax,
                                reverse_tax_value=  reverse_tax_value,
                                reverse_cgst        =reverse_cgst,
                                hsn                 =hsn,
                                sac                 =sac,
                                voucher_type_id     =voucher_type_id,
                                estiamted_quantity  =estiamted_quantity,
                                performa_quantity   =performa_quantity,
                                financial_year_id   =financial_year_id,
                                voucher_number_id   =voucher_number_id,
                                additional_charge   = additional_charge,
                                tax_value           = tax_value
                                                    )
                insert_data.save()

        if get_additional_charge:
            for charge in get_additional_charge:
                # get_id          = product['id']
                product_id      = product['product_id']
                product_code    = product['product_code']
                quantity        = product['quantity']
                purchase_rate   = product['purchase_rate']
                amount          = product['amount']
                unit_id         = None

                godown_id       = godown_data.objects.filter(entity_id=entity_id,name='Main')
                godown_id       = None if not godown_id else godown_data.objects.get(entity_id=entity_id,name='Main')
                rack_id         = rack_data.objects.filter(name='Main',entity_id=entity_id)
                rack_id         = None if not rack_id else rack_data.objects.get(name='Main',entity_id=entity_id)
                batch_id        = None
                tax_id          = product['tax_id']
                tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
                tax_amount      = product['tax_amount']
                # additional
                discount_type   = product.get('discount_type','')
                discount        = product.get('discount',0)
                pretax_amount   = product.get('pretax_amount',0)
                reverse_tax     = product.get('reverse_tax',0)
                reverse_tax_value= product.get('reverse_tax_value',0)
                reverse_cgst    = product.get('reverse_cgst',0)
                reverse_sgst    = product.get('reverse_sgst',0)
                reverse_igst    = product.get('reverse_igst',0)
                hsn             = product.get('hsn','')
                sac             = product.get('sac','')
                voucher_type_id     = voucher_series_id.voucher_type_id,
                estiamted_quantity  = product.get('estiamted_quantity','')
                performa_quantity   = product.get('performa_quantity','')
                financial_year_id   = product.get('financial_year_id','')
                voucher_number_id   = insert_voucher_number
                additional_charge   = 1
                tax_value           = product.get('tax_value')
                product_id          = product_data.objects.get(id=product_id)
                unit_id         =    unit_data.objects.get(id=unit_id)

                

                insert_data     = order_product_data(
                            invoice_id          =insert_invoice_data,
                            branch_id           =branch_id,
                            entity_id           =entity_id,
                            discount_type       =discount_type,
                            discount            =discount,
                            unit_id             =unit_id,
                            
                            godown_id           =godown_id,
                            rack_id             =rack_id,
                            tax_id              =tax_id,
                            tax_amount          =tax_amount,
                            batch_id            =batch_id,
                            product_id          =product_id,
                            product_code        =product_code,
                            quantity            =quantity,
                            po_quantity         =quantity,
                            purchase_rate       =purchase_rate,
                            amount              =amount,
                            entry_type          =entry_type,
                            created_at          =now,
                            updated_at          =now,
                            #  additional
                            pretax_amount       =pretax_amount,
                            reverse_tax         =reverse_tax,
                            reverse_tax_value=  reverse_tax_value,
                            reverse_cgst        =reverse_cgst,
                            hsn                 =hsn,
                            sac                 =sac,
                            voucher_type_id     =voucher_type_id,
                            estiamted_quantity  =estiamted_quantity,
                            performa_quantity   =performa_quantity,
                            financial_year_id   =financial_year_id,
                            voucher_number_id   =voucher_number_id,
                            additional_charge   = additional_charge,
                            tax_value           = tax_value
                                                 )
            insert_data.save()

        if not bill_by_bill_id:
            insert_bill_by_bill = bill_by_bill_data(
                                    voucher_type_id     = voucher_series_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_series_id,
                                    voucher_number_id   = insert_voucher_number,
                                    financial_year_id   = financial_year_id,
                                    # exchange_rate       = exchange_rate,
                                    date                = date,
                                    due_date            = due_date,
                                    due_days            = due_days,
                                    total_amount        = total_amount,
                                    entry_type          = entry_type,
                                    invoice_id          = insert_invoice_data,
                                    debit_ledger_id     = debit_ledger_id,
                                    credit_ledger_id    = credit_ledger_id,
                                    created_by          = created_by,
                                    created_at          = now,
                                    updated_at          = now,

                                    # additional
                                    bill_description    = bill_description,

                                )
            insert_bill_by_bill.save()
        else:
            update_bill      =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now) 
         

                    
        response    =   {
                        "success"       : True,
                        "message"       : "Sucessfully Added",
                    }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



# @api_view(['POST'])
# def addVaoucherTransactionUserPortal(request):
#     data            = request.data
#     user_id         = data.get('user_id')
#     app_token       = data.get('app_token')
#     get_token       = app_auth_token_tb.objects.first()


#     # if request.session.has_key('userId') and user_id and app_token == get_token.token:
#     if user_id and app_token == get_token.token:
#         print("----------------")
#         user_id                 = user_data.objects.get(id=user_id)
#         branch_id               = data.get('branch_id')
#         branch_id               = branch_data.objects.get(id=branch_id)
#         voucher_series_id       = data.get('voucher_series_id','')
#         voucher_series_id       = None if not voucher_series_id else voucher_series_data.objects.get(id=voucher_series_id) ##voucher series id
#         date                    = data.get('date')
#         due_date                = data.get('due_date')
#         due_days                = data.get('due_days')
#         description             = data.get('description')
#         total_amount            = data.get('total_amount')
#         entry_type              = data.get('entry_type')
#         created_by              = user_data.objects.get(id=user_id.id)
#         financial_year_id       = financial_year_data.objects.get(active=True)
#         entity_id               = branch_id.entity_id
#         debit_ledger_id         = data.get('debit_ledger_id')
#         credit_ledger_id        = data.get('credit_ledger_id')
#         debit_ledger_id         = None if not debit_ledger_id else accounting_ledger_data.objects.get(id=debit_ledger_id)
#         credit_ledger_id        = None if not credit_ledger_id else accounting_ledger_data.objects.get(id=credit_ledger_id)
#         get_product_data        = data.get('product_data')

#         bill_by_bill_id         = data.get('bill_by_bill_id','')
#         bill_description        = data.get('bill_description','')
#         roundoff                = data.get('roundoff')
#         shipping_address        = data.get('shipping_address','')
#         receiver_address        = data.get('receiver_address','')
#         discount_value          = data.get('discount_value','')
#         customer_type_id        = data.get('customer_type_id','')
#         customer_type_id        = None if not customer_type_id else customer_type.objects.get(id=customer_type_id)
#         lut                     = data.get('lut','')
#         reverse_tax             = data.get('reverse_tax','')
#         reverse_tax_value       = data.get('reverse_tax_value','')
#         reverse_cgst            = data.get('reverse_cgst','')
#         reverse_sgst            = data.get('reverse_sgst','')
#         reverse_igst            = data.get('reverse_igst','')
#         ewaybill_number         = data.get('ewaybill_number','')
#         transporter_id          = data.get('transporter_id','')
#         vehicle_number          = data.get('vehicle_number','')
#         lrno                    = data.get('lrno','')
#         number_of_cases         = data.get('number_of_cases','')
#         weight                  = data.get('weight','')
#         is_parent               = True
#         manuel_invoice_number   = data.get('manuel_invoice_number','')
#         gstin                   = data.get('gstin','')
#         gst_state_id            = data.get('gst_state_id',''),
#         gst_treatment_id        = data.get('gst_treatment_id','')

#         get_credit_ledgers      = data.get('credit_ledgers')
#         get_debit_ledgers       = data.get('debit_ledgers')

#         cheque_number           = data.get('cheque_number','')
#         cheque_date             = data.get('cheque_date','')
#         exchange_rate           = data.get('exchange_rate','')
#         # missed
#         invoice_id              = data.get('invoice_id','')
#         order_id                = data.get('order_id',None)
#         if order_id:
#             order_id            = invoice_data.objects.get(pk=order_id)
#         else:
#             order_id            = None
#         against                 = data.get('against','')
#         cgst                    = data.get('cgst','')
#         sgst                    = data.get('sgst','')
#         igst                    = data.get('igst','')
#         pretax_amount           = data.get('pretax_amount','')
#         expence                 = data.get('expence','')
#         ses                     = data.get('ses','')
#         mrp                     = data.get('mrp','')
#         roundoff                = data.get('roundoff','')
#         discount_type           = data.get('discount_type','')
#         discount                = data.get('discount','')
#         is_child                = data.get('is_child',0)
#         parent_id               = data.get('parent_id','')
#         is_amented              = data.get('is_amented',0)
#         amented_upward          = data.get('amented_upward',0)
#         amented_downward        = data.get('amented_downward',0)


#         if gst_treatment_id:
#             gst_treatment_id    = gst_treatment_data.objects.get(id=gst_treatment_id)
#         else:
#             gst_treatment_id
#         now                     = datetime.now()
#         get_additional_charge   = data.get('additional_charge_data','')

#         check_get_data          = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
        
#         voucher_number          = 1

#         if(check_get_data):
#             get_latest_data     = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
#             voucher_number      = int(get_latest_data.voucher_number) + int(1)
            

#         insert_voucher_number   = voucher_number_data(
#                                     voucher_type_id     = voucher_series_id.voucher_type_id,
#                                     entity_id           = entity_id,
#                                     branch_id           = branch_id,
#                                     voucher_series_id   = voucher_series_id,
#                                     voucher_number      = voucher_number,
#                                     financial_year_id   = financial_year_id,
#                                     created_at          = now,
#                                     updated_at          = now
#                                 )
#         insert_voucher_number.save()

#         insert_invoice_data = invoice_data(
#                                 user_id                 = user_id,
#                                 entity_id               = entity_id,
#                                 branch_id               = branch_id,
#                                 voucher_type_id         = voucher_series_id.voucher_type_id,
#                                 date                    = date,
#                                 due_date                = due_date,
#                                 due_days                = due_days,
#                                 description             = description,
#                                 total_amount            = total_amount,
#                                 exchange_rate           = exchange_rate,
#                                 entry_type              = entry_type,
#                                 financial_year_id       = financial_year_id,
#                                 voucher_number_id       = insert_voucher_number,
#                                 voucher_series_id       = voucher_series_id,
#                                 created_by              = created_by,
#                                 debit_ledger_id         = debit_ledger_id,
#                                 credit_ledger_id        = credit_ledger_id,
#                                 against                 = against,
#                                 # transaction_type        = transaction_type,
#                                 invoice_id              = invoice_id,
#                                 order_id                = order_id,
#                                 cgst                    = cgst,
#                                 sgst                    = sgst,
#                                 igst                    = igst,
#                                 pretax_amount           = pretax_amount,
#                                 expence                 = expence,
#                                 ses                     = ses,
#                                 mrp                     = mrp,
#                                 discount_type           = discount_type,
#                                 discount                = discount,
#                                 is_child                = is_child,
#                                 parent_id               = parent_id,
#                                 is_amented              = is_amented,
#                                 amented_upward          = amented_upward,
#                                 amented_downward        = amented_downward,

#                                 created_at              = now,
#                                 updated_at              = now,
                                
                                

#                                 # additional
#                                 roundoff                = roundoff,
#                                 shipping_address        = shipping_address,
#                                 receiver_address        = receiver_address,
#                                 discount_value          = discount_value,
#                                 customer_type_id        = customer_type_id,
#                                 lut                     = lut,
#                                 reverse_tax             = reverse_tax,
#                                 reverse_tax_value       = reverse_tax_value,
#                                 reverse_cgst            = reverse_cgst,
#                                 reverse_sgst            = reverse_sgst,
#                                 reverse_igst            = reverse_igst,
#                                 ewaybill_number         = ewaybill_number,
#                                 transporter_id          = transporter_id,
#                                 vehicle_number          = vehicle_number,
#                                 lrno                    = lrno,
#                                 number_of_cases         = number_of_cases,
#                                 weight                  = weight,
#                                 is_parent               = is_parent,
#                                 manuel_invoice_number   = manuel_invoice_number,
#                                 gstin                   = gstin,
#                                 gst_state_id            = gst_state_id,
#                                 gst_treatment_id        = gst_treatment_id,
#                                 cheque_number           = cheque_number,
#                                 cheque_date             = cheque_date
#                             )
#         insert_invoice_data.save()

#         if get_debit_ledgers:
#             for debit_ledger in get_debit_ledgers:
#                 c_entry_tyepe       = debit_ledger['entry_type']
#                 c_debit_ledger      = debit_ledger['debit_ledger_id']
#                 c_total_amount      = debit_ledger['total_amount']
#                 c_cheque_number     = debit_ledger['cheque_number']
#                 c_cheque_date       = debit_ledger['cheque_date']
#                 c_description       = debit_ledger['description']

#                 c_debit_ledger      = None if not c_debit_ledger else accounting_ledger_data.objects.get(id=c_debit_ledger)

#                 insert_debit_ledger_data  = invoice_data(
#                                         user_id                 = user_id,
#                                         entity_id               = entity_id,
#                                         branch_id               = branch_id,
#                                         voucher_type_id         = voucher_series_id.voucher_type_id,
#                                         date                    = date,
#                                         due_date                = due_date,
#                                         due_days                = due_days,
#                                         description             = c_description,
#                                         exchange_rate           = exchange_rate,
#                                         total_amount            = c_total_amount,
#                                         entry_type              = c_entry_tyepe,
#                                         financial_year_id       = financial_year_id,
#                                         voucher_number_id       = insert_voucher_number,
#                                         voucher_series_id       = voucher_series_id,
#                                         created_by              = created_by,
#                                         debit_ledger_id         = c_debit_ledger,
#                                         credit_ledger_id        = credit_ledger_id,
#                                         invoice_id              = invoice_id,
#                                         order_id                = order_id,
#                                         cgst                    = cgst,
#                                         sgst                    = sgst,
#                                         igst                    = igst,
#                                         pretax_amount           = pretax_amount,
#                                         expence                 = expence,
#                                         ses                     = ses,
#                                         mrp                     = mrp,
#                                         discount_type           = discount_type,
#                                         discount                = discount,
#                                         is_amented              = is_amented,
#                                         amented_upward          = amented_upward,
#                                         amented_downward        = amented_downward,
#                                         # transaction_type        = transaction_type,
#                                         created_at              = now,
#                                         updated_at              = now,

#                                         # additional
#                                         roundoff                = roundoff,
#                                         shipping_address        = shipping_address,
#                                         receiver_address        = receiver_address,
#                                         discount_value          = discount_value,
#                                         customer_type_id        = customer_type_id,
#                                         lut                     = lut,
#                                         reverse_tax             = reverse_tax,
#                                         reverse_tax_value       = reverse_tax_value,
#                                         reverse_cgst            = reverse_cgst,
#                                         reverse_sgst            = reverse_sgst,
#                                         reverse_igst            = reverse_igst,
#                                         ewaybill_number         = ewaybill_number,
#                                         transporter_id          = transporter_id,
#                                         vehicle_number          = vehicle_number,
#                                         lrno                    = lrno,
#                                         number_of_cases         = number_of_cases,
#                                         weight                  = weight,
#                                         is_parent               = False,
#                                         is_child                = True,
#                                         parent_id               = insert_invoice_data,
#                                         manuel_invoice_number   = manuel_invoice_number,
#                                         gstin                   = gstin,
#                                         gst_state_id            = gst_state_id,
#                                         gst_treatment_id        = gst_treatment_id,
#                                         cheque_number           = c_cheque_number,
#                                         cheque_date             = c_cheque_date
#                                     )
#                 insert_debit_ledger_data.save()

#         if get_credit_ledgers:
#             for credit_ledger in get_credit_ledgers:
#                 d_entry_type        = credit_ledger['entry_type']
#                 d_credit_ledger     = credit_ledger['credit_ledger_id']
#                 d_total_amount      = credit_ledger['total_amount']
#                 d_cheque_number     = credit_ledger['cheque_number']
#                 d_cheque_date       = credit_ledger['cheque_date']
#                 d_description       = credit_ledger['description']

#                 d_credit_ledger     = None if not d_credit_ledger else accounting_ledger_data.objects.get(id=d_credit_ledger)

#                 insert_credit_ledger_data  = invoice_data(
#                                         user_id                 = user_id,
#                                         entity_id               = entity_id,
#                                         branch_id               = branch_id,
#                                         voucher_type_id         = voucher_series_id.voucher_type_id,
#                                         date                    = date,
#                                         due_date                = due_date,
#                                         exchange_rate           = exchange_rate,
#                                         invoice_id              = invoice_id,
#                                         order_id                = order_id,
#                                         against                 = against,
#                                         due_days                = due_days,
#                                         description             = d_description,
#                                         total_amount            = d_total_amount,
#                                         entry_type              = d_entry_type,
#                                         financial_year_id       = financial_year_id,
#                                         voucher_number_id       = insert_voucher_number,
#                                         voucher_series_id       = voucher_series_id,
#                                         created_by              = created_by,
#                                         debit_ledger_id         = debit_ledger_id,
#                                         credit_ledger_id        = d_credit_ledger,
#                                         # transaction_type        = transaction_type,
#                                         created_at              = now,
#                                         updated_at              = now,

#                                         # additional
#                                         roundoff                = roundoff,
#                                         shipping_address        = shipping_address,
#                                         receiver_address        = receiver_address,
#                                         discount_value          = discount_value,
#                                         customer_type_id        = customer_type_id,
#                                         lut                     = lut,
#                                         reverse_tax             = reverse_tax,
#                                         reverse_tax_value       = reverse_tax_value,
#                                         reverse_cgst            = reverse_cgst,
#                                         reverse_sgst            = reverse_sgst,
#                                         reverse_igst            = reverse_igst,
#                                         ewaybill_number         = ewaybill_number,
#                                         transporter_id          = transporter_id,
#                                         vehicle_number          = vehicle_number,
#                                         lrno                    = lrno,
#                                         number_of_cases         = number_of_cases,
#                                         weight                  = weight,
#                                         is_parent               = False,
#                                         is_child                = True,
#                                         parent_id               = insert_invoice_data,
#                                         manuel_invoice_number   = manuel_invoice_number,
#                                         gstin                   = gstin,
#                                         gst_state_id            = gst_state_id,
#                                         gst_treatment_id        = gst_treatment_id,
#                                         cheque_number           = d_cheque_number,
#                                         cheque_date             = d_cheque_date
#                                     )
#                 insert_credit_ledger_data.save()

#         if get_product_data:
#             for product in get_product_data:
#                 product_id          = product['product_id']
#                 product_code        = product['product_code']
#                 quantity            = product['quantity']
#                 purchase_rate       = product['purchase_rate']
#                 amount              = product['amount']
#                 unit_id             = product['unit_id']
#                 unit_id             = None if not unit_id else unit_data.objects.get(id=unit_id)
#                 godown_id           = product.get('godown_id','')
#                 godown_id           = None if not godown_id else godown_data.objects.get(id=godown_id)
#                 rack_id             = product.get('rack_id','')
#                 rack_id             = None if not rack_id else rack_data.objects.get(id=rack_id)
#                 batch_id            = product.get('batch_id','')
#                 batch_id            = None if not batch_id else batch_data.objects.get(id=batch_id)
#                 tax_id              = product.get('tax_id','')
#                 tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)

#                 tax_amount          = product['tax_amount']
#                 entry_type          = entry_type
#                 # additional
#                 discount_type       = product.get('discount_type','')
#                 discount            = product.get('discount',0)
#                 pretax_amount       = product.get('pretax_amount',0)
#                 reverse_tax         = product.get('reverse_tax',0)
#                 reverse_tax_value   = product.get('reverse_tax_value',0)
#                 reverse_cgst        = product.get('reverse_cgst',0)
#                 reverse_sgst        = product.get('reverse_sgst',0)
#                 reverse_igst        = product.get('reverse_igst',0)
#                 hsn                 = product.get('hsn','')
#                 sac                 = product.get('sac','')
#                 voucher_type_id     = voucher_series_id.voucher_type_id,
#                 estiamted_quantity  = product.get('estiamted_quantity','')
#                 performa_quantity   = product.get('performa_quantity','')
#                 financial_year_id   = product.get('financial_year_id','')
#                 voucher_number_id   = insert_voucher_number
#                 additional_charge   = 0
#                 tax_value           = product.get('tax_value')


#                 product_id          = product_data.objects.get(id=product_id)
#                 entity_id           = branch_id.entity_id


#                 insert_product_data = order_product_data(
#                                         invoice_id          =insert_invoice_data,
#                                         branch_id           =branch_id,
#                                         entity_id           =entity_id,
#                                         discount_type       =discount_type,
#                                         discount            =discount,
#                                         unit_id             =unit_id,
                                        
#                                         godown_id           =godown_id,
#                                         rack_id             =rack_id,
#                                         tax_id              =tax_id,
#                                         tax_amount          =tax_amount,
#                                         batch_id            =batch_id,
#                                         product_id          =product_id,
#                                         product_code        =product_code,
#                                         quantity            =quantity,
#                                         po_quantity         =quantity,
#                                         purchase_rate       =purchase_rate,
#                                         amount              =amount,
#                                         entry_type          =entry_type,
#                                         created_at          =now,
#                                         updated_at          =now,
#                                         #  additional
#                                         pretax_amount       =pretax_amount,
#                                         reverse_tax         =reverse_tax,
#                                         reverse_tax_value=  reverse_tax_value,
#                                         reverse_cgst        =reverse_cgst,
#                                         hsn                 =hsn,
#                                         sac                 =sac,
#                                         voucher_type_id     =voucher_type_id,
#                                         estiamted_quantity  =estiamted_quantity,
#                                         performa_quantity   =performa_quantity,
#                                         financial_year_id   =financial_year_id,
#                                         voucher_number_id   =voucher_number_id,
#                                         additional_charge   = additional_charge,
#                                         tax_value           = tax_value
#                                     )
#                 insert_product_data.save()

#         if get_additional_charge:
#             for charge in get_additional_charge:
#                 # get_id          = product['id']
#                 product_id          = product['product_id']
#                 product_code        = product['product_code']
#                 quantity            = product['quantity']
#                 purchase_rate       = product['purchase_rate']
#                 amount              = product['amount']
#                 unit_id             = None

#                 godown_id           = godown_data.objects.filter(entity_id=entity_id,name='Main')
#                 godown_id           = None if not godown_id else godown_data.objects.get(entity_id=entity_id,name='Main')
#                 rack_id             = rack_data.objects.filter(name='Main',entity_id=entity_id)
#                 rack_id             = None if not rack_id else rack_data.objects.get(name='Main',entity_id=entity_id)
#                 batch_id            = None
#                 tax_id              = product['tax_id']
#                 tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)
#                 tax_amount          = product['tax_amount']
#                 # additional
#                 discount_type       = product.get('discount_type','')
#                 discount            = product.get('discount',0)
#                 pretax_amount       = product.get('pretax_amount',0)
#                 reverse_tax         = product.get('reverse_tax',0)
#                 reverse_tax_value   = product.get('reverse_tax_value',0)
#                 reverse_cgst        = product.get('reverse_cgst',0)
#                 reverse_sgst        = product.get('reverse_sgst',0)
#                 reverse_igst        = product.get('reverse_igst',0)
#                 hsn                 = product.get('hsn','')
#                 sac                 = product.get('sac','')
#                 voucher_type_id     = voucher_series_id.voucher_type_id,
#                 estiamted_quantity  = product.get('estiamted_quantity','')
#                 performa_quantity   = product.get('performa_quantity','')
#                 financial_year_id   = product.get('financial_year_id','')
#                 voucher_number_id   = insert_voucher_number
#                 additional_charge   = 1
#                 tax_value           = product.get('tax_value')
#                 product_id          = product_data.objects.get(id=product_id)
#                 unit_id             = unit_data.objects.get(id=unit_id)

                

#                 insert_data         = order_product_data(
#                                         invoice_id          =insert_invoice_data,
#                                         branch_id           =branch_id,
#                                         entity_id           =entity_id,
#                                         discount_type       =discount_type,
#                                         discount            =discount,
#                                         unit_id             =unit_id,
                                        
#                                         godown_id           =godown_id,
#                                         rack_id             =rack_id,
#                                         tax_id              =tax_id,
#                                         tax_amount          =tax_amount,
#                                         batch_id            =batch_id,
#                                         product_id          =product_id,
#                                         product_code        =product_code,
#                                         quantity            =quantity,
#                                         po_quantity         =quantity,
#                                         purchase_rate       =purchase_rate,
#                                         amount              =amount,
#                                         entry_type          =entry_type,
#                                         created_at          =now,
#                                         updated_at          =now,
#                                         #  additional
#                                         pretax_amount       =pretax_amount,
#                                         reverse_tax         =reverse_tax,
#                                         reverse_tax_value=  reverse_tax_value,
#                                         reverse_cgst        =reverse_cgst,
#                                         hsn                 =hsn,
#                                         sac                 =sac,
#                                         voucher_type_id     =voucher_type_id,
#                                         estiamted_quantity  =estiamted_quantity,
#                                         performa_quantity   =performa_quantity,
#                                         financial_year_id   =financial_year_id,
#                                         voucher_number_id   =voucher_number_id,
#                                         additional_charge   = additional_charge,
#                                         tax_value           = tax_value
#                                     )
#                 insert_data.save()

#         if not bill_by_bill_id:
#             insert_bill_by_bill = bill_by_bill_data(
#                                     voucher_type_id     = voucher_series_id.voucher_type_id,
#                                     entity_id           = entity_id,
#                                     branch_id           = branch_id,
#                                     voucher_series_id   = voucher_series_id,
#                                     voucher_number_id   = insert_voucher_number,
#                                     financial_year_id   = financial_year_id,
#                                     # exchange_rate       = exchange_rate,
#                                     date                = date,
#                                     due_date            = due_date,
#                                     due_days            = due_days,
#                                     total_amount        = total_amount,
#                                     entry_type          = entry_type,
#                                     invoice_id          = insert_invoice_data,
#                                     debit_ledger_id     = debit_ledger_id,
#                                     credit_ledger_id    = credit_ledger_id,
#                                     created_by          = created_by,
#                                     created_at          = now,
#                                     updated_at          = now,

#                                     # additional
#                                     bill_description    = bill_description,

#                                 )
#             insert_bill_by_bill.save()
#         else:
#             update_bill =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now) 
         

                    
#         response        =   {
#                                 "success"       : True,
#                                 "message"       : "Sucessfully Added",
#                             }
#     else:

#         response        =   {
#                                 "success"   : False,
#                                 "message"   : "Invalid Token Or User",
#                             }

#     return Response(response)

@api_view(['POST'])
def getInvoiceDetails(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()
    print("----------------")


    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        invoice_id          = data.get('id')
        get_invoice_data    = invoice_data.objects.get(id=invoice_id)
        get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)
        get_branch          = get_invoice_data.branch_id.id
    
        list_product_data   =[]
        for product in get_order_product:
            get_batch       = batch_data.objects.all().filter(id=product.batch_id.id)
            tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
            tax_amount      = 0
            if tax_id:
                tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
            get_product     = product_data.objects.get(pk=product.product_id.id)
            
            list_product_data.append({
                'product_id'    : product.product_id.id,
                'product_name'  : get_product.name,
                'product_code'  : product.product_code,
                'quantity'      : product.quantity,
                'unit_id'       : None if not product.unit_id else product.unit_id.id,
                'godown_id'     : None if not product.godown_id else product.godown_id.id,
                'rack_id'       : None if not product.rack_id else product.rack_id.id,
                'tax_id'        : None if not product.tax_id else product.tax_id.id,
                'purchase_rate' : product.purchase_rate,
                'amount'        : float(product.amount) + tax_amount,
                'get_batch'     : get_batch[0].id,
                'tax_amount'    : tax_amount
            })


       
        #####--- accounting ledger
        

        invoice_id  = get_invoice_data.id if not get_invoice_data.invoice_id else get_invoice_data.invoice_id.id

        response    =   {
                            "success"           : True,
                            "branch_id"         : get_invoice_data.branch_id.id,
                            "entity_id"         : get_invoice_data.entity_id.id,
                            "voucher_series_id" : get_invoice_data.voucher_series_id.id,
                            "shipping_address"  : get_invoice_data.shipping_address,
                            "receiver_address"  : get_invoice_data.receiver_address,
                            "date"              : get_invoice_data.date,
                            "due_date"          : get_invoice_data.due_days,
                            "description"       : get_invoice_data.description,
                            "debit_ledger_id"   : None if get_invoice_data.debit_ledger_id else get_invoice_data.debit_ledger_id.id,
                            "credit_ledger_id"  : None if get_invoice_data.credit_ledger_id else get_invoice_data.credit_ledger_id.id,
                            "roundoff"          : get_invoice_data.roundoff,
                            "discount"          : get_invoice_data.discount,
                            "cheque_number"     : get_invoice_data.cheque_number,
                            "cheque_date"       : get_invoice_data.cheque_date,
                            "entry_type"        : get_invoice_data.entry_type,
                            "invoice_id"        : invoice_id,
                            "list_product_data" : list_product_data,
                        }

    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def generatePurchaseInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        user_id             = user_data.objects.get(id=user_id)
        order_id            = data.get('id')
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        voucher_type_id     = data.get('voucher_type_id')
        voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id) ##voucher series id
        order_number        = data.get('order_number')
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        order_id            = order_data.objects.get(id=order_id)
        entry_type          = 'Credit'
        created_by          = user_data.objects.get(id=request.session['userId'])
        financial_year_id   = financial_year_data.objects.get(active=True)
        entity_id           = branch_id.entity_id
        debit_ledger_id     = data.get('debit_ledger_id')
        credit_ledger_id    = data.get('credit_ledger_id')
        product_data        = data.get('product_data')


        debit_ledger_id         = accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id        = accounting_ledger_data.objects.get(id=credit_ledger_id)

        now                     = datetime.now()


        update_data             = order_data.objects.filter(id=order_id.id).update(generate_invoice=True,updated_at=now)
        
        insert_voucher_number   = voucher_number_data(
                                    voucher_type_id     = voucher_type_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_type_id,
                                    voucher_number      = voucher_number,
                                    financial_year_id   = financial_year_id,
                                    created_at          = now,
                                    updated_at          = now
                                )
        insert_voucher_number.save()

        insert_invoice_data     = invoice_data(
                                    user_id             = user_id,
                                    order_id            = order_id,
                                    branch_id           = branch_id,
                                    voucher_type_id     = voucher_type_id.voucher_type_id,
                                    date                = date,
                                    due_date            = due_date,
                                    due_days            = due_days,
                                    description         = description,
                                    total_amount        = total_amount,
                                    # exchange_rate       = exchange_rate,
                                    entry_type          = entry_type,
                                    financial_year_id   = financial_year_id,
                                    voucher_number_id   = insert_voucher_number,
                                    voucher_series_id   = voucher_type_id,
                                    created_by          = created_by,
                                    debit_ledger_id     = debit_ledger_id,
                                    credit_ledger_id    = credit_ledger_id,
                                    created_at          = now,
                                    updated_at          = now
                                )
        insert_invoice_data.save()

        for product in product_data:
            get_id          = product['id']
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']
            godown_id       = product['godown_id']
            rack_id         = product['rack_id']
            batch_id        = product['batch_id']
            tax_id          = product['tax_id']
            tax_amount      = product['tax_amount']
            entry_type      = "Credit"

            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)
            godown_id       = godown_data.objects.get(id=godown_id)
            rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
            tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
            batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
            entity_id       = branch_id.entity_id

            insert_data     = order_product_data(order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
            insert_data.save()


        insert_bill_by_bill = bill_by_bill_data(
                                order_id            = order_id,
                                voucher_type_id     = voucher_type_id.voucher_type_id,
                                entity_id           = entity_id,
                                branch_id           = branch_id,
                                voucher_series_id   = voucher_type_id,
                                voucher_number_id   = insert_voucher_number,
                                financial_year_id   = financial_year_id,
                                # exchange_rate       = exchange_rate,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                total_amount        = total_amount,
                                entry_type          = entry_type,
                                invoice_id          = insert_invoice_data,
                                created_by          = created_by,
                                created_at          = now,
                                updated_at          = now
                            )
        insert_bill_by_bill.save()


        response    =   {
                            "success"       : True,
                            "message"       : "",
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def deletePurchaseOrderProductInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_id          = data.get('id')

        now             = datetime.now()

        product_data    = order_product_data.objects.get(id=get_id)
        
        total_amount    = product_data.amount
        get_order_data  = product_data.order_id

        total_amount    = float(get_order_data.total_amount) - float(total_amount)

        update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

        fromReg         = order_product_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            response    =   {
                            "success"       : True,
                            "message"       : "",
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def updatePurchaseInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        invoice_id          = data.get('id')
        invoice_id          = invoice_data.objects.get(id=invoice_id)
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        voucher_type_id     = data.get('voucher_type_id')
        voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        order_id            = invoice_id.order_id
        entry_type          = 'Credit'
        debit_ledger_id     = data.get('debit_ledger_id')
        credit_ledger_id    = data.get('credit_ledger_id')

        debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)
        get_product_data    = data.get('product_data')

        now                 = datetime.now()
            
        insert_invoice_data = invoice_data(
                                order_id            = order_id,
                                branch_id           = branch_id,
                                voucher_type_id     = voucher_type_id.voucher_type_id,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                description         = description,
                                total_amount        = total_amount,
                                invoice_id          = invoice_id,
                                entry_type          = entry_type,
                                debit_ledger_id     = debit_ledger_id,
                                credit_ledger_id    = credit_ledger_id,
                                voucher_series_id   = voucher_type_id,
                                created_at          = now,
                                updated_at          = now
                            )
        insert_invoice_data.save()

        for product in get_product_data:
            get_id          = product['id']
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']
            godown_id       = product['godown_id']
            rack_id         = product['rack_id']
            batch_id        = product['batch_id']
            tax_id          = product['tax_id']
            tax_amount      = product['tax_amount']
            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)
            godown_id       = godown_data.objects.get(id=godown_id)
            rack_id         = None if not rack_id else  rack_data.objects.get(id=rack_id)
            tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
            batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
            entity_id       = branch_id.entity_id
            order_product_id= None if not get_id else order_product_data.objects.get(id=get_id)
            
            insert_data     = order_product_data(order_product_id=order_product_id,order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
            insert_data.save()
                    
            response        =   {
                                    "success"       : True,
                                    "message"       : "",
                                }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def listSalesOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:

        get_data    = order_data.objects.all().filter(user_id=user_id,entry_type='Debit').order_by('-id')
        list_orders = []

        for order in get_data:
            get_invoice_data= invoice_data.objects.all().filter(order_id=order.id,invoice_id=None).exists()
            
            invoice_id      = None
            if get_invoice_data:
                invoice_id  = invoice_data.objects.get(order_id=order.id,invoice_id=None)
                invoice_id  = invoice_id.id

            list_orders.append({
                'id'                : order.id,
                'order_number'      : order.order_number,
                'branch_id'         : order.branch_id,
                'voucher_type_id'   : order.voucher_type_id,
                'total_amount'      : order.total_amount,
                'generate_invoice'  : order.generate_invoice,
                'invoice_id'        : invoice_id,
                'date'              : order.date
            })


        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "list_orders"   : list_orders
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def addNewSalesOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:

        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        exchange_rate       = data.get('exchange_rate')
        entry_type          = "Debit"
        product_data        = data.get('product_data')
        now                 = datetime.now()

        insert_order_data   = order_data(
                                branch_id       = branch_id,
                                date            = date,
                                due_date        = due_date,
                                due_days        = due_days,
                                description     = description,
                                total_amount    = total_amount,
                                exchange_rate   = exchange_rate,
                                entry_type      = entry_type,
                                created_at      = now,
                                updated_at      = now
                            )
        insert_order_data.save()
        

        for product in product_data:
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']

            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)

            insert_data     = order_product_data(order_id=insert_order_data,unit_id=unit_id,product_id=product_id,product_code=product_code,so_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
            insert_data.save()

        response    =   {
                            "success"   : True,
                            "message"   : ""
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def updateSalesOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:

        order_id            = data.get('id')
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        exchange_rate       = data.get('exchange_rate')
        product_data        = data.get('product_data')
        entry_type          = "Debit"
        now                 = datetime.now()

        update_data         = order_data.objects.filter(id=order_id).update(
                                branch_id       = branch_id,
                                date            = date,
                                due_date        = due_date,
                                due_days        = due_days,
                                description     = description,
                                total_amount    = total_amount,
                                exchange_rate   = exchange_rate,
                                entry_type      = entry_type,
                                updated_at      = now
                            )
        
        print(dict(request.POST.items()))

        for product in product_data:
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']
            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)

            order_id        = order_data.objects.get(id=order_id)

            insert_data     = order_product_data(order_id=order_id,unit_id=unit_id,product_id=product_id,product_code=product_code,so_quantity=quantity,purchase_rate=purchase_rate,amount=amount,created_at=now,updated_at=now)
            insert_data.save()


        response    =   {
                            "success"   : True,
                            "message"   : ""
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def deleteSalesOrderProductUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:

    if user_id and app_token == get_token.token:

        get_id          = data.get('id')
        now             = datetime.now()

        product_data    = order_product_data.objects.get(id=get_id)
        
        total_amount    = product_data.amount
        get_order_data  = product_data.order_id

        total_amount    = float(get_order_data.total_amount) - float(total_amount)

        update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

        fromReg         = order_product_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():

            response    =   {
                                "success"   : True,
                                "message"   : ""
                            }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def deleteSalesOrderUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:

        get_id      = data.get('id')
        fromReg     = order_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            response    =   {
                                "success"   : True,
                                "message"   : ""
                            }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def listSalesInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:

    if user_id and app_token == get_token.token:
        get_data    = invoice_data.objects.all().filter(user_id=user_id,entry_type='Debit',invoice_id=None).order_by('-id')

        for order in get_data:
            list_orders.append({
                'id'                : order.id,
                'order_number'      : order.order_number,
                'branch_id'         : order.branch_id,
                'voucher_type_id'   : order.voucher_type_id,
                'total_amount'      : order.total_amount,
                'date'              : order.date

            })

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "list_orders"   : list_orders
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)







@api_view(['POST'])
def addSalesInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_product_data    = data.get('product_data')

        # additional check for quantity available
        for product in get_product_data:
            product_id      = product['product_id']
            rack_id         = product['rack_id']
            quantity        = product['quantity']


            product_details = product_data.objects.get(id=product_id)
            sum_debit_product   = 0
            sum_credit_product  = 0
            credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,entry_type="Credit")
            print(credit_product)
            print("----------------")
            if credit_product:
                sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,entry_type="Debit")
            print(debit_product)
            if debit_product:
                sum_debit_product       = debit_product.aggregate(total_so_quantity=Sum('quantity'))['total_so_quantity']
            
            balance_quantity  = sum_credit_product - sum_debit_product
            rack_name         = rack_data.objects.get(id=rack_id).name
            if balance_quantity<quantity:
                response    ={
                        "success"   :False,
                        "message"   :f"{product_details.name} left Only {balance_quantity} on rack {rack_name}"
                }

                return Response(response)


        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        voucher_series_id   = data.get('voucher_series_id','')
        voucher_series_id   = None if not voucher_series_id else voucher_series_data.objects.get(id=voucher_series_id) ##voucher series id 
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        entry_type          = 'Debit'
        transaction_type    = 'Sales'
        shipping_address    = data.get('shipping_address','')
        receiver_address    = data.get('receiver_address','')

        created_by          = user_data.objects.get(id=request.session['userId'])
        financial_year_id   = financial_year_data.objects.get(active=True)
        entity_id           = branch_id.entity_id

        debit_ledger_id     = data.get('debit_ledger_id')
        credit_ledger_id    = data.get('credit_ledger_id')
        
        debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

        now                 = datetime.now()

        # additional
        bill_by_bill_id      = data.get('bill_by_bill_id','')
        bill_description     = data.get('bill_description','')
        roundoff            = data.get('roundoff')
        check_get_data      = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
        
        voucher_number      = 1

        if(check_get_data):
            get_latest_data = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
            voucher_number  = int(get_latest_data.voucher_number) + int(1)

            
        insert_voucher_number   = voucher_number_data(
                                    voucher_type_id     = voucher_series_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_series_id,
                                    voucher_number      = voucher_number,
                                    financial_year_id   = financial_year_id,
                                    created_at          = now,
                                    updated_at          = now
                                )
        insert_voucher_number.save()

        user_id = user_data.objects.get(id=user_id)
        insert_invoice_data = invoice_data(
                                user_id             = user_id,
                                entity_id           = entity_id,
                                branch_id           = branch_id,
                                voucher_type_id     = voucher_series_id.voucher_type_id,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                description         = description,
                                total_amount        = total_amount,
                                entry_type          = entry_type,
                                financial_year_id   = financial_year_id,
                                voucher_number_id   = insert_voucher_number,
                                voucher_series_id   = voucher_series_id,
                                created_by          = created_by,
                                debit_ledger_id     = debit_ledger_id,
                                credit_ledger_id    = credit_ledger_id,
                                transaction_type    = transaction_type,
                                created_at          = now,
                                updated_at          = now,
                                # additional
                                roundoff            = roundoff,
                                shipping_address    = shipping_address,
                                receiver_address    = receiver_address

                            )
        insert_invoice_data.save()

        for product in get_product_data:
            product_id      = product['product_id']
            print(product_id)
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']
            godown_id       = product['godown_id']
            rack_id         = product['rack_id']
            batch_id        = product['batch_id']
            tax_id          = product['tax_id']
            tax_amount      = product['tax_amount']
            entry_type      = "Debit"
            # additional
            discount_type   = product.get('discount_type','')
            discount        = product.get('discount',0)
            pretax_amount   = product.get('pretax_amount',0)
                    
            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)
            godown_id       = godown_data.objects.get(id=godown_id)
            rack_id         = None if rack_id == 'null' else rack_id
            rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
            tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
            batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
            entity_id       = branch_id.entity_id

            insert_data     = order_product_data(invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
            insert_data.save()


        if not bill_by_bill_id:
                    insert_bill_by_bill = bill_by_bill_data(
                                            voucher_type_id     = voucher_series_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_series_id,
                                            voucher_number_id   = insert_voucher_number,
                                            financial_year_id   = financial_year_id,
                                            # exchange_rate       = exchange_rate,
                                            date                = date,
                                            due_date            = due_date,
                                            due_days            = due_days,
                                            total_amount        = total_amount,
                                            entry_type          = entry_type,
                                            invoice_id          = insert_invoice_data,
                                            debit_ledger_id     = debit_ledger_id,
                                            credit_ledger_id    = credit_ledger_id,
                                            created_by          = created_by,
                                            created_at          = now,
                                            updated_at          = now,
                                            # additional
                                            bill_description    = bill_description,

                                        )
                    insert_bill_by_bill.save()
        else:
            update_bill         =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now)
                

                    
        response    =   {
                            "success"       : True,
                            "message"       : "Success",
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def getSaleInvoiceDetails(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        invoice_id          = data.get('id')
        get_invoice_data    = invoice_data.objects.get(id=invoice_id)
        get_order_product   = order_product_data.objects.filter(invoice_id=invoice_id)
        get_branch          = branch_data.objects.get(id=get_invoice_data.branch_id)
    
        list_voucher_series_id  =get_invoice_data.voucher_series_id.id
        list_product_data   =[]
        for product in get_order_product:
            get_batch       = batch_data.objects.all().filter(id=product.batch_id.id)
            tax_id          = product.product_id.tax_id if not product.tax_id else product.tax_id
            tax_amount      = 0
            if tax_id:
                tax_amount  = is_what_percent_of(float(tax_id.rate_perc), float(product.purchase_rate))
            get_product     = product_data.objects.get(pk=product.product_id.id)
            
            list_product_data.append({
                'product_id'    : product.product_id.id,
                'product_name'  : get_product.name,
                'product_code'  : product.product_code,
                'quantity'      : product.quantity,
                'unit_id'       : None if not product.unit_id else product.unit_id.id,
                'godown_id'     : None if not product.godown_id else product.godown_id.id,
                'rack_id'       : None if not product.rack_id else product.rack_id.id,
                'tax_id'        : None if not product.tax_id else product.tax_id.id,
                'purchase_rate' : product.purchase_rate,
                'amount'        : float(product.amount) + tax_amount,
                'get_batch'     : get_batch[0].id,
                'tax_amount'    : tax_amount
            })


       
        #####--- accounting ledger
        

        invoice_id  = get_invoice_data.id if not get_invoice_data.invoice_id else get_invoice_data.invoice_id.id

        response    =   {
                            "success"           : True,
                            "branch_id"         : get_invoice_data.branch_id.id,
                            "entity_id"         : get_invoice_data.entity_id.id,
                            "voucher_series_id" : get_invoice_data.voucher_series_id.id,
                            "shipping_address"  : get_invoice_data.shipping_address,
                            "receiver_address"  : get_invoice_data.receiver_address,
                            "date"              : get_invoice_data.date,
                            "due_date"          : get_invoice_data.due_days,
                            "description"       : get_invoice_data.description,
                            "debit_ledger_id"   : None if get_invoice_data.debit_ledger_id else get_invoice_data.debit_ledger_id.id,
                            "credit_ledger_id"  : None if get_invoice_data.credit_ledger_id else get_invoice_data.credit_ledger_id.id,
                            "roundoff"          : get_invoice_data.roundoff,
                            "discount"          : get_invoice_data.discount,
                            "list_product_data" : list_product_data,
                            "list_voucher_series_id":list_voucher_series_id
                        }

    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def generateSalesInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        order_id            = data.get('id')
        branch_id           = data.get('branch_id')    
        branch_id           = branch_data.objects.get(id=branch_id)
        voucher_type_id     = data.get('voucher_type_id')
        voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id) ##voucher series id
        order_number        = data.get('order_number')
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
        order_id            = order_data.objects.get(id=order_id)
        entry_type          = 'Debit'
        created_by          = user_data.objects.get(id=request.session['userId'])
        financial_year_id   = financial_year_data.objects.get(active=True)
        entity_id           = branch_id.entity_id
        product_data        = data.get('product_data')

        debit_ledger_id     = data.get('debit_ledger_id')
        credit_ledger_id    = data.get('credit_ledger_id')
        debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)
        now                 = datetime.now()

        update_data             = order_data.objects.filter(id=order_id.id).update(generate_invoice=True,updated_at=now)
        
        insert_voucher_number   = voucher_number_data(
                                    voucher_type_id     = voucher_type_id.voucher_type_id,
                                    entity_id           = entity_id,
                                    branch_id           = branch_id,
                                    voucher_series_id   = voucher_type_id,
                                    voucher_number      = voucher_number,
                                    financial_year_id   = financial_year_id,
                                    created_at          = now,
                                    updated_at          = now
                                )
        insert_voucher_number.save()

        insert_invoice_data = invoice_data(
                                order_id            = order_id,
                                branch_id           = branch_id,
                                voucher_type_id     = voucher_type_id.voucher_type_id,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                description         = description,
                                total_amount        = total_amount,
                                entry_type          = entry_type,
                                financial_year_id   = financial_year_id,
                                voucher_number_id   = insert_voucher_number,
                                voucher_series_id   = voucher_type_id,
                                created_by          = created_by,
                                debit_ledger_id     = debit_ledger_id,
                                credit_ledger_id    = credit_ledger_id,
                                created_at          = now,
                                updated_at          = now
                            )
        insert_invoice_data.save()

        for product in product_data:
            get_id          = product['id']
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']
            godown_id       = product['godown_id']
            rack_id         = product['rack_id']
            batch_id        = product['batch_id']
            tax_id          = product['tax_id']
            tax_amount      = product['tax_amount']
            entry_type      = "Debit"

            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)
            godown_id       = godown_data.objects.get(id=godown_id)
            rack_id         = None if not rack_id else rack_data.objects.get(id=rack_id)
            tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
            batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
            entity_id       = branch_id.entity_id

            insert_data     = order_product_data(order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
            insert_data.save()


        insert_bill_by_bill = bill_by_bill_data(
                                order_id            = order_id,
                                voucher_type_id     = voucher_type_id.voucher_type_id,
                                entity_id           = entity_id,
                                branch_id           = branch_id,
                                voucher_series_id   = voucher_type_id,
                                voucher_number_id   = insert_voucher_number,
                                financial_year_id   = financial_year_id,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                total_amount        = total_amount,
                                entry_type          = entry_type,
                                invoice_id          = insert_invoice_data,
                                created_by          = created_by,
                                created_at          = now,
                                updated_at          = now
                            )
        insert_bill_by_bill.save()

                    
        response    =   {
                            "success"       : True,
                            "message"       : "",
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def updateSalesInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        invoice_id          = data.get('id')
        invoice_id          = invoice_data.objects.get(id=invoice_id)
        branch_id           = data.get('branch_id')
        branch_id           = branch_data.objects.get(id=branch_id)
        voucher_type_id     = data.get('voucher_type_id')
        voucher_type_id     = voucher_series_data.objects.get(id=voucher_type_id)
        date                = data.get('date')
        due_date            = data.get('due_date')
        due_days            = data.get('due_days')
        description         = data.get('description')
        total_amount        = data.get('total_amount')
            
        order_id            = invoice_id.order_id
        entry_type          = 'Debit'
        debit_ledger_id     = data.get('debit_ledger_id')
        credit_ledger_id    = data.get('credit_ledger_id')
        product_data        = data.get('product_data')

        debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
        credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

        now                 = datetime.now()
        
        insert_invoice_data = invoice_data(
                                order_id            = order_id,
                                branch_id           = branch_id,
                                voucher_type_id     = voucher_type_id.voucher_type_id,
                                date                = date,
                                due_date            = due_date,
                                due_days            = due_days,
                                description         = description,
                                total_amount        = total_amount,
                                invoice_id          = invoice_id,
                                entry_type          = entry_type,
                                debit_ledger_id     = debit_ledger_id,
                                credit_ledger_id    = credit_ledger_id,
                                voucher_series_id   = voucher_type_id,
                                created_at          = now,
                                updated_at          = now
                            )
        insert_invoice_data.save()

        for product in product_data:
            get_id          = product['id']
            product_id      = product['product_id']
            product_code    = product['product_code']
            quantity        = product['quantity']
            purchase_rate   = product['purchase_rate']
            amount          = product['amount']
            unit_id         = product['unit_id']
            godown_id       = product['godown_id']
            rack_id         = product['rack_id']
            batch_id        = product['batch_id']
            tax_id          = product['tax_id']
            tax_amount      = product['tax_amount']
                
            product_id      = product_data.objects.get(id=product_id)
            unit_id         = unit_data.objects.get(id=unit_id)
            godown_id       = godown_data.objects.get(id=godown_id)
            rack_id         = None if not rack_id else  rack_data.objects.get(id=rack_id)
            tax_id          = None if not tax_id else tax_data.objects.get(id=tax_id)
            batch_id        = None if not batch_id else batch_data.objects.get(id=batch_id)
            entity_id       = branch_id.entity_id
            order_product_id= None if not get_id else order_product_data.objects.get(id=get_id)
            
            insert_data     = order_product_data(order_product_id=order_product_id,order_id=order_id,invoice_id=insert_invoice_data,branch_id=branch_id,entity_id=entity_id,unit_id=unit_id,godown_id=godown_id,rack_id=rack_id,tax_id=tax_id,tax_amount=tax_amount,batch_id=batch_id,product_id=product_id,product_code=product_code,quantity=quantity,purchase_rate=purchase_rate,amount=amount,entry_type=entry_type,created_at=now,updated_at=now)
            insert_data.save()
                    
        response    =   {
                            "success"       : True,
                            "message"       : "",
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def deleteSalesOrderProductInvoiceUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:

        get_id          = data.get('id')
        now             = datetime.now()

        product_data    = order_product_data.objects.get(id=get_id)
        
        total_amount    = product_data.amount
        get_order_data  = product_data.order_id

        total_amount    = float(get_order_data.total_amount) - float(total_amount)

        update_order    = order_data.objects.filter(id=product_data.order_id.id).update(total_amount=total_amount,updated_at=now)

        fromReg         = order_product_data.objects.all().filter(id=get_id)
        fromReg.delete()

        if fromReg.delete():
            response    =   {
                                "success"   : True,
                                "message"   : "",
                            }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def listPaymentVoucherUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_data    = invoice_data.objects.all().filter(user_id=user_id,entry_type='Payment',invoice_id=None).order_by('-id')

        for order in get_data:
            list_orders.append({
                'id'                : order.id,
                'order_number'      : order.order_number,
                'branch_id'         : order.branch_id,
                'voucher_type_id'   : order.voucher_type_id,
                'total_amount'      : order.total_amount,
                'date'              : order.date

            })

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "list_orders"   : list_orders
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def getUserBranchInUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_data    = user_data.objects.get(id=user_id)

        branch_data =   {
                            'id'            : get_data.branch_id.id,
                            'name'          : get_data.branch_id.name,
                            'branch_code'   : get_data.branch_id.branch_code,
                            'address'       : get_data.branch_id.address,
                            'city'          : get_data.branch_id.city,
                            'state'         : get_data.branch_id.state,
                            'country'       : get_data.branch_id.country,
                            'pincode'       : get_data.branch_id.pincode
                        }

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "branch_data"   : branch_data
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



@api_view(['POST'])
def userPortalListProductUnits(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    # if request.session.has_key('userId') and user_id and app_token == get_token.token:
    if user_id and app_token == get_token.token:
        get_data    = unit_data.objects.all().order_by('-id')

        list_unit   = []

        for data in get_data:
            list_unit.append({
                'id'                    : data.id,
                'unit'                  : data.unit,
                'description'           : data.description,
                'formal_name'           : data.formal_name,
                'no_of_decimal_place'   : data.no_of_decimal_place

            })

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "list_unit"     : list_unit
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)



# api additional

@api_view(['POST'])
def UserPortalget_ledger_of_supplier_customer(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        ledger_type          = data.get('ledger_type')
        id                   = data.get('id')
        print("-------------------")
        print(id)
        if ledger_type=='supplier':
            accounting_ledger = accounting_ledger_data.objects.filter(supplier_id=id)
            if accounting_ledger:
                accounting_ledger = accounting_ledger_data.objects.get(supplier_id=id)
                response={
                            "success"       : True,
                            "message"       : "ledger Id exist",
                            "account_ledger_id"   : accounting_ledger.id
                }
            else:
                response={
                            "success"       : True,
                            "message"       : "No ledger Id exist",
                }
        if ledger_type=='customer':
            accounting_ledger = accounting_ledger_data.objects.filter(customer_id=id)
            if accounting_ledger:
                accounting_ledger = accounting_ledger_data.objects.get(customer_id=id)
                response={
                            "success"       : True,
                            "message"       : "ledger Id exist",
                            "account_ledger_id"   : accounting_ledger.id
                }
            else:
                response={
                            "success"       : True,
                            "message"       : "No ledger Id exist",
                }  
    
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User"
        }

    return Response(response)



@api_view(['POST'])
def userPortalgetExpenseLedger(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()
    if user_id and app_token == get_token.token:
        branch_id       = data.get('branch_id')
        print(branch_id)
        expense_group   = []
        accgroup    = accounting_ledger_data.objects.filter(branch_id=branch_id,additional_expense=True)   
        if accgroup:
            expense_group   = list(accgroup.values())        
    return JsonResponse({'expense_group':expense_group})


@api_view(['POST'])
def userPortalgetProductData(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        product_id          = data.get('product_id')
        debit_ledger_id     = data.get('debit_ledger_id','')
        credit_ledger_id    = data.get('credit_ledger_id','')

        get_product_data    = product_data.objects.get(id=product_id)

        get_batch           = batch_data.objects.all().filter(product_id=product_id).order_by('expiry_date')

        
        sum_so_quantity     = 0
        sum_credit_product  = 0
        sum_debit_product   = 0
        credit_product      = order_product_data.objects.filter(product_id=product_id,entry_type="Credit")
        if credit_product:
            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
        debit_product       = order_product_data.objects.filter(product_id=product_id,entry_type="Debit")
        if debit_product:
            sum_debit_product       = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']
        
        available_quantity  = sum_credit_product - sum_debit_product

        get_batch_data      = []
        if get_batch:
            for batch in get_batch:
                sum_so_quantity     = 0
                sum_credit_product  = 0
                sum_debit_product   = 0
                credit_product      = order_product_data.objects.filter(product_id=product_id,batch_id=batch,entry_type="Credit")
                if credit_product:
                    sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                debit_product       = order_product_data.objects.filter(product_id=product_id,batch_id=batch,entry_type="Debit")
                if debit_product:
                    sum_debit_product       = debit_product.aggregate(total_so_quantity=Sum('quantity'))['total_so_quantity']
                
                balance_quantity  = sum_credit_product - sum_debit_product

                get_batch_data.append({
                    'id'    : batch.id,
                    'name'  : batch.name,
                    'available_quantity':balance_quantity,
                    'expiry_date':batch.expiry_date
                })
        
        # product_dict        = model_to_dict(get_product_data)

        ####--- get previous product
        previous_dict           = []
        if debit_ledger_id:
            get_previous_data   = order_product_data.objects.filter(product_id=product_id,invoice_id__debit_ledger_id=debit_ledger_id).order_by('-id')[:5]

            for previous_data in get_previous_data:
                previous_dict.append({   
                                        'id'                : previous_data.id,
                                        'product_id'        : previous_data.product_id.id,
                                        'product_name'      : previous_data.product_id.name,
                                        'product_code'      : previous_data.product_id.product_code,
                                        'amount'            : previous_data.amount,
                                        'created_at'        : previous_data.created_at,
                                    })
        elif credit_ledger_id:
            get_previous_data   = order_product_data.objects.filter(product_id=product_id,invoice_id__credit_ledger_id=credit_ledger_id).order_by('-id')[:5]

            for previous_data in get_previous_data:
                previous_dict.append({   
                                        'id'                : previous_data.id,
                                        'product_id'        : previous_data.product_id.id,
                                        'product_name'      : previous_data.product_id.name,
                                        'product_code'      : previous_data.product_id.product_code,
                                        'amount'            : previous_data.amount,
                                        'created_at'        : previous_data.created_at,
                                    })
        ####-- 

        ##---get godown , rack and tax
        list_godown         = godown_data.objects.all()
        list_rack           = rack_data.objects.all()
        list_tax            = tax_data.objects.all()

        get_godown_ids      = [] if not get_product_data.godown_id else get_product_data.godown_id.split(',')
        get_rack_ids        = [] if not get_product_data.rack_id else get_product_data.rack_id.split(',')

        all_godown          = []

        for godown_id in get_godown_ids:
            godown= godown_data.objects.filter(pk=godown_id)
            if godown:
                godown= godown_data.objects.get(pk=godown_id)
                all_godown.append({
                    'id'    : godown.pk,
                    'name'  : godown.name,
                })


        all_rack            = []

       
        for rack_id in get_rack_ids:
                rack        = rack_data.objects.filter(pk=rack_id)
                if rack:
                    rack    = rack_data.objects.get(pk=rack_id)
                    sum_so_quantity     = 0
                    sum_credit_product  = 0
                    sum_debit_product   = 0
                    csum_free_quantity  = 0
                    dsum_free_quantity  = 0

                    credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id)
                    if credit_product:
                        sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                        csum_free_quantity      = credit_product.aggregate(total_free=Sum('free'))['total_free']
                    debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id)
                    if debit_product:
                        sum_debit_product       = debit_product.aggregate(total_so_quantity=Sum('so_quantity'))['total_so_quantity']
                        dsum_free_quantity      = debit_product.aggregate(total_free=Sum('free'))['total_free']
                    
                    balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)

                    all_rack.append({
                        'id'        : rack.id,
                        'name'      : rack.name,
                        'balance_quantity':balance_quantity,
                    })


        all_tax             = []
        for tax in list_tax:
            selected        = ''
            if get_product_data.tax_id: 
                if tax.id == get_product_data.tax_id: 
                    selected= 'selected'

            all_tax.append({
                'id'        : tax.id,
                'tax'       : tax.tax,
                'rate_perc' : tax.rate_perc,
                'cgst'      : tax.cgst,
                'sgst'      : tax.sgst,
                'igst'      : tax.igst,
                'selected'  : selected
            })
        ##--
        sum_credit_product_quantity = 0
        sum_debit_product_quantity  = 0  
        sum_credit_product_amount   = 0
        sum_debit_product_amount    = 0
        avg_sale_price      = 0
        avg_purchase_price  = 0
        
        get_product_data    = product_data.objects.get(pk=product_id)
        credit_product      = order_product_data.objects.filter(product_id=get_product_data.id,latest=1,entry_type="Credit",status='Approved')
        print(credit_product)
        if credit_product:
            sum_credit_product_quantity     = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            sum_credit_product_amount       = credit_product.aggregate(total_credit_amount=Sum('amount'))['total_credit_amount']
            print(sum_credit_product_quantity,sum_credit_product_amount)
            print("@@@@@@@22")
            print(sum_credit_product_amount)
            if sum_credit_product_amount:
                avg_purchase_price              = int(sum_credit_product_amount)/int(sum_credit_product_quantity)
        
        debit_product       = order_product_data.objects.filter(product_id=get_product_data.id,latest=1,entry_type="Debit",status='Approved')
        if debit_product:
            sum_debit_product_quantity      = debit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            sum_debit_product_amount        = debit_product.aggregate(total_debit_amount=Sum('amount'))['total_debit_amount']
            

            print(sum_debit_product_amount)
            if sum_debit_product_amount:

                avg_sale_price                  = int(sum_debit_product_amount)/int(sum_debit_product_quantity)

        product_dict        =   {
                                    'product_code'      : get_product_data.product_code,
                                    'product_name'      : get_product_data.name,
                                    'available_quantity': available_quantity,
                                    'mrp'               : get_product_data.mrp,
                                    'discount_type_id'  : get_product_data.discount_type,
                                    'discount'          : get_product_data.discount,
                                    'discount_name'     : get_product_data.discount,
                                    'product_code'      : get_product_data.product_code,
                                    'unit_id'           : get_product_data.unit_id.id,
                                    'unit'              : get_product_data.unit_id.unit,
                                    'unit_formal_name'  : get_product_data.unit_id.formal_name,
                                    'purchase_rate'     : get_product_data.purchase_rate,
                                    'sac'               : get_product_data.sac,
                                    'hsn'               : get_product_data.hsn,
                                    'discount_value'    : get_product_data.discount_value,
                                    'warehouse_id'      : None if not get_product_data.warehouse_id else get_product_data.warehouse_id.id,
                                    'size_id'           : get_product_data.size_id.id,
                                    'model_number_id'   : get_product_data.model_number_id.id,  
                                    'unit_id'           : get_product_data.unit_id.id,
                                    'unit'              : get_product_data.unit_id.unit,
                                    'unit_formal_name'  : get_product_data.unit_id.formal_name,
                                    'sales_rate'        : get_product_data.sales_rate,
                                    'tax_id'            : None if not get_product_data.tax_id else get_product_data.tax_id.id,
                                    'tax'               : None if not get_product_data.tax_id else get_product_data.tax_id.tax,
                                    'tax_rate'          : None if not get_product_data.tax_id else get_product_data.tax_id.rate_perc,
                                    'cgst'              : None if not get_product_data.tax_id else get_product_data.tax_id.cgst,
                                    'sgst'              : None if not get_product_data.tax_id else get_product_data.tax_id.sgst,
                                    'igst'              : None if not get_product_data.tax_id else get_product_data.tax_id.igst,
                                    'all_godown'        : all_godown,
                                    'all_rack'          : all_rack,
                                    'all_tax'           : all_tax,
                                    'batch_data'        : get_batch_data,
                                    'previous_product'  : previous_dict,
                                    'avg_sale_price'    : avg_sale_price,
                                    'avg_purchase_price': avg_purchase_price
                                }
        print(product_dict)
        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "models_to_return"   : product_dict
                        }
          
    
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User"
        }

    return Response(response)


@api_view(['POST'])
def UserportalGetPreviousProductData(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        product_id          = data.get('id')

        get_previous_data   = order_product_data.objects.get(id=product_id)
        list_tax            = tax_data.objects.all()

        all_tax             = []
        for tax in list_tax:
            selected        = ''
            if get_previous_data.tax_id: 
                if tax.id == get_previous_data.tax_id: 
                    selected= 'selected'

            all_tax.append({
                'id'        : tax.id,
                'tax'       : tax.tax,
                'rate_perc' : tax.rate_perc,
                'cgst'      : tax.cgst,
                'sgst'      : tax.sgst,
                'igst'      : tax.igst,
                'selected'  : selected
            })

        previous_data       =   {   
                                    'id'                : get_previous_data.id,
                                    'product_id'        : get_previous_data.product_id.id,
                                    'product_name'      : get_previous_data.product_id.name,
                                    'product_code'      : get_previous_data.product_id.product_code,
                                    'amount'            : get_previous_data.amount,
                                    'discount_type'     : get_previous_data.discount_type,
                                    'discount'          : get_previous_data.discount,
                                    'pretax_amount'     : get_previous_data.pretax_amount,
                                    'product_rate'      : get_previous_data.product_rate,
                                    'cgst'              : get_previous_data.cgst,
                                    'sgst'              : get_previous_data.sgst,
                                    'igst'              : get_previous_data.igst,
                                    'po_quantity'       : get_previous_data.po_quantity,
                                    'so_quantity'       : get_previous_data.so_quantity,
                                    'created_at'        : get_previous_data.created_at,
                                    'tax_amount'        : get_previous_data.tax_amount,
                                    'all_tax'           : all_tax
                                }

        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "previous_data"   : previous_data
                        }
        
    
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User"
        }

    return Response(response)


@api_view(['POST'])
def UserPortalgetAvailableProductQuantity(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        product_id          = data.get('product_id')
        batch_id            = data.get('batch_id')
        sum_debit_product   = 0
        sum_credit_product  = 0
        credit_product      = order_product_data.objects.filter(product_id=product_id,batch_id=batch_id,entry_type="Credit")
        if credit_product:
            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
        debit_product       = order_product_data.objects.filter(product_id=product_id,batch_id=batch_id,entry_type="Debit")
        if debit_product:
            sum_debit_product       = debit_product.aggregate(total_so_quantity=Sum('quantity'))['total_so_quantity']
        
        balance_quantity  = sum_credit_product - sum_debit_product
        
        
        response    =   {
                            "success"       : True,
                            "message"       : "",
                            "available_quantity"   : balance_quantity
                        }
        
    
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User"
        }

    return Response(response)


@api_view(['POST'])
def UserPortalAddProduct(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        branch_id           = data.get('branch_id')
        entity_id           = data.get('entity_id')
        entity_id           = entity_data.objects.get(id=entity_id)
        branch_id           = branch_data.objects.get(id=branch_id)
        name                = data.get('name')
        product_group_id    = data.get('product_group_id')
        product_group_id    = None if not product_group_id else product_group_data.objects.get(id=product_group_id)
        brand_id            = data.get('brand_id')
        brand_id            = None if not brand_id else brand_data.objects.get(id=brand_id)
        unit_id             = data.get('unit_id')
        unit_id             = None if not unit_id else unit_data.objects.get(id=unit_id)
        size_id             = data.get('size_id')
        size_id             = None if not size_id else size_data.objects.get(id=size_id)
        model_number_id     = data.get('model_number_id')
        model_number_id     = None if not model_number_id else model_number_data.objects.get(id=model_number_id)
        godown_id           = data.get('godown_id')
        rack_id             = data.get('rack_id')
        discount_type       = data.get('discount_type')
        discount            = data.get('discount')
        warehouse_id        = data.get('warehouse_id')
        warehouse_id        = None if not warehouse_id else warehouse_data.objects.get(id=warehouse_id)
        purchase_rate       = data.get('purchase_rate')
        mrp                 = data.get('mrp')
        sales_rate          = data.get('sales_rate')
        reorder_level       = data.get('reorder_level')
        minimum_stock       = data.get('minimum_stock')
        maximum_stock       = data.get('maximum_stock')
        tax_id              = data.get('tax_id')
        tax_id              = None if not tax_id else tax_data.objects.get(id=tax_id)
        bom                 = data.get('bom')
        bar_code            = data.get('bar_code')
        now                 = datetime.now()

        get_series          = series_data.objects.get(type="Product")
        latest_id           = 1 if not product_data.objects.all().exists() else int(product_data.objects.latest('id').id)+1
        product_code        = get_series.pre_text+str(latest_id)+get_series.post_text

        insert_data         = product_data(
                                entity_id       =entity_id,
                                branch_id       = branch_id,
                                name            = name,
                                product_code    = product_code,
                                product_group_id= product_group_id,
                                brand_id        = brand_id,
                                unit_id         = unit_id,
                                size_id         = size_id,
                                model_number_id = model_number_id,
                                godown_id       = godown_id,
                                rack_id         = rack_id,
                                warehouse_id    = warehouse_id,
                                purchase_rate   = purchase_rate,
                                mrp             = mrp,
                                sales_rate      = sales_rate,
                                reorder_level   = reorder_level,
                                minimum_stock   = minimum_stock,
                                maximum_stock   = maximum_stock,
                                tax_id          = tax_id,
                                bom             = bom,
                                bar_code        = bar_code,
                                discount_type   = discount_type,
                                discount        = discount,
                                created_at      = now,
                                updated_at      = now
                            )
        insert_data.save()

        product=product_data.objects.filter(pk=insert_data.id)
        product=list(product.values())

        response    =   {
                        "success"       : True,
                        "message"       : f"Added Successfully {product_code}", 
                        "details"       :product
                        }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }
    return Response(response)


@api_view(['POST'])
def UserPortalAddBatch(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        try:
            entity_id = data.get('entity_id')
            entity = None if not entity_id else entity_data.objects.get(id=entity_id)
            branch_id = data.get('branch_id')
            branch = None if not branch_id else branch_data.objects.get(id=branch_id)
            name = data.get('name')
            product_id = data.get('product_id')
            product = None if not product_id else product_data.objects.get(id=product_id)
            manufacture_date = data.get('manufacture_date')
            expiry_date = data.get('expiry_date')
            description = data.get('description')
            now = datetime.now()

            
            batch = batch_data.objects.create(
                entity_id=entity,
                branch_id=branch,
                name=name,
                product_id=product,
                manufacture_date=manufacture_date,
                expiry_date=expiry_date,
                description=description,
                created_at=now,
                updated_at=now
            )

            batch=batch_data.objects.filter(pk=batch.id)
            batch=list(batch.values())
            
            response = {
                "success": True,
                "message": "Batch added successfully",
                "Batch Details": batch
            }

        except ObjectDoesNotExist:
            response = {
                "success": False,
                "message": "Invalid entity, branch, or product ID"
            }
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User"
        }

    return Response(response)


@api_view(['POST'])
def get_bill_by_bill(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        entry_type  = data.get('entry_type')
        print(print(entry_type))
        get_bill_by_bill                    = bill_by_bill_data.objects.filter(entry_type__in=entry_type)
        get_bill_by_bill                    = list(get_bill_by_bill.values())

        response = {
                "success": True,
                "message": "Bill by bill data",
                "bill_details": get_bill_by_bill
            }
    else:    
        response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User"
            }

    return Response(response)



@api_view(['POST'])
def get_account_ledgers(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()


    if user_id and app_token == get_token.token:
        voucher_type            = data.get('voucher_type')
        branch_id               = data.get('branch_id')
        check_golden_rule       = golden_rules.objects.filter(voucher_type_id__name=voucher_type).exists()


        if check_golden_rule:
            get_puchase_rules               = golden_rules.objects.get(voucher_type_id__name=voucher_type)

            credit_accounting_group_ids     = get_puchase_rules.credit_account_group_ids.split(",")

            debit_accounting_group_ids      = get_puchase_rules.debit_account_group_ids.split(",")


            get_debit_account_ledger        = accounting_ledger_data.objects.filter(branch_id=branch_id,accounting_group_id__in=debit_accounting_group_ids)

            get_credit_account_ledger       = accounting_ledger_data.objects.filter(branch_id=branch_id,accounting_group_id__in=credit_accounting_group_ids)
            
            debit_ledgers                   = []
            credit_ledgers                  = []
            if get_debit_account_ledger:
                for debit_ledger in get_debit_account_ledger:
                    
                    if debit_ledger.supplier_id:
                        debit_ledgers.append(
                            {
                            'pk':debit_ledger.id,
                            'name':debit_ledger.name,
                            'address':debit_ledger.supplier_id.address,
                             'gst_state':debit_ledger.supplier_id.state_code,
                             'supplier_type_id':debit_ledger.supplier_id.supplier_type_id.id,
                             'gst_treatment':None if not debit_ledger.supplier_id.gst_treatment else debit_ledger.supplier_id.gst_treatment.id
                             }
                        )
                    elif debit_ledger.customer_id:
                            debit_ledgers.append(
                                {
                                'pk':debit_ledger.id,
                                'name':debit_ledger.name,
                                'address':debit_ledger.customer_id.address,
                                'customer_type_id':debit_ledger.customer_id.customer_type_id.id,
                                'gst_state':debit_ledger.customer_id.state_code,
                                'gst_treatment':None if not debit_ledger.customer_id.gst_treatment else debit_ledger.customer_id.gst_treatment.id,
                                'pricing_level':None if not debit_ledger.pricing_level else debit_ledger.pricing_level.id
                                }
                            )
                    
                    else:
                        debit_ledgers.append(
                            {
                            'pk':debit_ledger.id,
                            'name':debit_ledger.name    
                             })

                    
            if get_credit_account_ledger:
                for credit_ledger in get_credit_account_ledger:
                    
                    if credit_ledger.supplier_id:
                        credit_ledgers.append(
                            {
                            'pk':credit_ledger.id,
                            'name':credit_ledger.name,
                            'address':credit_ledger.supplier_id.address,
                            'supplier_type_id':credit_ledger.supplier_id.supplier_type_id.id,
                             'gst_state':credit_ledger.supplier_id.state_code,
                             'gst_treatment':None if not credit_ledger.supplier_id.gst_treatment else credit_ledger.supplier_id.gst_treatment.id
                             }
                        )
                    elif credit_ledger.customer_id:
                        credit_ledgers.append(
                            {
                            'pk':credit_ledger.id,
                            'name':credit_ledger.name,
                            'address':credit_ledger.customer_id.address,
                            'customer_type_id':credit_ledger.customer_id.customer_type_id.id,
                            'gst_state':credit_ledger.customer_id.state_code,
                            'gst_treatment':None if not credit_ledger.customer_id.gst_treatment else credit_ledger.customer_id.gst_treatment.id

                             }
                        )
                    else:
                        credit_ledgers.append({
                        'pk':credit_ledger.id,
                        'name':credit_ledger.name,
                    })



            response    =   {
                                "success"       : True,
                                "message"       :  f"A/c ledger of voucher type {voucher_type}",
                                "debit_ledger"  : debit_ledgers,
                                "credit_ledger" : credit_ledgers
                            }
    else:    
        response        =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User"
                            }

    return Response(response)


@api_view(['POST'])
def UserPortalAddPaymentVoucher(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
            entity_id           = data.get('entity_id')
            entity_id           = entity_data.objects.get(id=entity_id)
            branch_id           = data.get('branch_id')
            branch_id           = branch_data.objects.get(id=branch_id)
            voucher_series_id   = data.get('voucher_series_id')
            voucher_series_id   = voucher_series_data.objects.get(id=voucher_series_id)
            date                = data.get('date')
            description         = data.get('description')
            total_amount        = data.get('total_amount')
            entry_type          = 'Payment'
            entity_id           = branch_id.entity_id
            financial_year_id   = financial_year_data.objects.get(active=True)
            created_by          = user_data.objects.get(id=user_id)
            debit_ledger_id     = data.get('debit_ledger_id')
            credit_ledger_id    = data.get('credit_ledger_id')
            against             = data.get('against')
            cheque_number       = data.get('cheque_number')
            cheque_date         = data.get('cheque_date')

            debit_ledger_id     = accounting_ledger_data.objects.get(id=debit_ledger_id)
            credit_ledger_id    = accounting_ledger_data.objects.get(id=credit_ledger_id)

            check_get_data      = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).exists()
        
            voucher_number      = 1
            now                 = datetime.now()
            bill_by_bill_id     = data.get('bill_by_bill_id','')
            bill_description    = data.get('bill_description','')



            if(check_get_data):
                get_latest_data = voucher_number_data.objects.all().filter(voucher_series_id=voucher_series_id).latest('created_at')
                voucher_number  = int(get_latest_data.voucher_number) + int(1)

            insert_voucher_number   = voucher_number_data(
                                            voucher_type_id     = voucher_series_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_series_id,
                                            voucher_number      = voucher_number,
                                            financial_year_id   = financial_year_id,
                                            created_at          = now,
                                            updated_at          = now
                                        )
            insert_voucher_number.save()

            insert_invoice_data = invoice_data(
                                        entity_id           =entity_id,
                                        branch_id           = branch_id,
                                        voucher_type_id     = voucher_series_id.voucher_type_id,
                                        date                = date,
                                        description         = description,
                                        total_amount        = total_amount,
                                        entry_type          = entry_type,
                                        financial_year_id   = financial_year_id,
                                        voucher_number_id   = insert_voucher_number,
                                        voucher_series_id   = voucher_series_id,
                                        debit_ledger_id     = debit_ledger_id,
                                        credit_ledger_id    = credit_ledger_id,
                                        against             = against,
                                        cheque_number       = cheque_number,
                                        cheque_date         = cheque_date,
                                        created_by          = created_by,
                                        created_at          = now,
                                        updated_at          = now,
                                        user_id             = user_data.objects.get(pk=user_id)
                                    )
            insert_invoice_data.save()

            if not bill_by_bill_id:
                    insert_bill_by_bill = bill_by_bill_data(
                                            voucher_type_id     = voucher_series_id.voucher_type_id,
                                            entity_id           = entity_id,
                                            branch_id           = branch_id,
                                            voucher_series_id   = voucher_series_id,
                                            voucher_number_id   = insert_voucher_number,
                                            financial_year_id   = financial_year_id,
                                            date                = date,
                                            total_amount        = total_amount,
                                            entry_type          = entry_type,
                                            invoice_id          = insert_invoice_data,
                                            debit_ledger_id     = debit_ledger_id,
                                            credit_ledger_id    = credit_ledger_id,
                                            created_by          = created_by,
                                            created_at          = now,
                                            updated_at          = now,
                                            # additional
                                            bill_description    = bill_description,

                                        )
                    insert_bill_by_bill.save()
            else:
                update_bill         =  bill_by_bill_data.objects.filter(id=bill_by_bill_id).update(close=True,close_invoice_id=insert_invoice_data,bill_description= bill_description,updated_at= now)

            response = {
                "success": True,
                "message": "Payment Vocher added successfully",
            }

        
    else:

        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User"
        }

    return Response(response)

# filter api section

@api_view(['POST'])
def listEntityTypeUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        entity_type_list    = entity_type.objects.all().order_by('-id')
        searched_name    = data.get('searched_type','')
            
        if searched_name:      
            entity_type_list             = entity_type_list.filter(type__istartswith=searched_name).order_by('-id')
                

        #Download Section 
        if 'download' in data:
            
            if 'entity_type_list' in request.session and json.loads(request.session['entity_type_list']):
                responce    = download(request.session['entity_type_list'])
                return responce
            
            
            
        #Session set for query result for excel based on last search    
        request.session['entity_type_list']  =json.dumps(list(entity_type_list.values('type','description')), cls=DjangoJSONEncoder)

        listEntity                   =list(entity_type_list.values('pk','type','description'))
        
        response                ={
                                    "success"   :True,
                                    "listEntity_type"  :listEntity,
                                    "searched_type":searched_name
                                 }
    
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)




@api_view(['POST'])
def listEntityCategoryUserPortal(request):
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        entity_category_list    = entity_category.objects.all().order_by('-id')

        #Download Section 
        if 'download' in data:
            
            if 'entity_category_list' in request.session and json.loads(request.session['entity_category_list']):
                responce    = download(request.session['entity_category_list'])
                return responce

        searched_name    = request.data.get('searched_catgory','')
            
        if searched_name:      
            entity_category_list             = entity_category_list.filter(category__istartswith=searched_name).order_by('-id')
                
  
        #Session set for query result for excel based on last search    
        request.session['entity_category_list']         = json.dumps(list(entity_category_list.values('category','description')), cls=DjangoJSONEncoder)

        listenity_category                              = list(entity_category_list.values('pk','category','description'))               

        response                                        ={
                                                            "success"   :True,
                                                            "listEntity_category"  :listenity_category,                                               
                                                        }
                            
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)


@api_view(['POST'])
def listEntityUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
        entity_list             = entity_data.objects.all().order_by('-id')

        
        if 'download' in data:
            
            if 'entity_list' in request.session and json.loads(request.session['entity_list']):
                responce=download(request.session['entity_list'])
                return responce


        # search filtering
       
        selected_entity_type     = int(data.get('entity_type_id',0))
        search_enitity_name      = data.get('searched_entity','')    
        if selected_entity_type or search_enitity_name:    
                            
            if selected_entity_type and search_enitity_name:     
                
                entity_list             = entity_list.filter(entity_type_id=selected_entity_type,name__istartswith=search_enitity_name).order_by('-id')
                    
            elif  selected_entity_type:   
                entity_list             = entity_list.filter(entity_type_id=selected_entity_type).order_by('-id')
                        
            else:      
                entity_list             = entity_list.filter(name__istartswith=search_enitity_name).order_by('-id')
                
        request.session['entity_list']=json.dumps(list(entity_list.values('name','description',entity_type=F('entity_type_id_id__type'))), cls=DjangoJSONEncoder)
  
        entity_list=list(entity_list.values('pk','name','description','entity_type_id',entity_type=F('entity_type_id_id__type')))
       
        response                ={
                                    "success"   :True,
                                    "list_Entity"  :entity_list,
                                    "selected_entity_type_id":selected_entity_type,
                                    "search_enitity_name":search_enitity_name      
                                 }
    
    else:
        response    =   {
                            "success"   : False,
                            "message"   : "Invalid Token Or User",
                        }

    return Response(response)


@api_view(['POST'])
def listBranchUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
        branch_list             = branch_data.objects.all().order_by('-id')
       
        #Download Section 
        if 'download' in data:
            
            if 'branch_list' in request.session and json.loads(request.session['branch_list']):
                responce=download(request.session['branch_list'])
                return responce
        
            
        selected_enitity        = int(data.get('select_entity',0))
        search_branch_name      = data.get('searched_branch','')    
        if selected_enitity or search_branch_name:    
                        
            if selected_enitity and search_branch_name:     
                branch_list             = branch_list.filter(entity_id=selected_enitity,name__istartswith=search_branch_name).order_by('-id')
                    
            elif  selected_enitity:   
                branch_list             = branch_list.filter(entity_id_id=selected_enitity).order_by('-id')
                        
            else:      
                branch_list             = branch_list.filter(name__istartswith=search_branch_name).order_by('-id')
                            
        
            
        #Session set for query result for excel based on last search    
        request.session['branch_list']=json.dumps(list(branch_list.values('pk','name','branch_code','address','city','state','country','pincode',entity=F('entity_id_id__name'))), cls=DjangoJSONEncoder)
        
        branch_list                     =list(branch_list.values('pk','name','branch_code','address','city','state','country','pincode',entity=F('entity_id_id__name')))               
        response                        ={
                                            "success"   :True,
                                            "list_branch"  :branch_list,
                                            "selected_entity_type_id":selected_enitity,
                                            "search_branch_name":search_branch_name      
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def listUserRoleUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
        get_user_roles  = user_roles.objects.all().exclude(role="Super Admin").order_by('-id')

        #Download Section 
        if 'download' in data:
            
            if 'get_user_roles' in request.session and json.loads(request.session['get_user_roles']):
                responce    = download(request.session['get_user_roles'])
                return responce
            

        searched_role    = data.get('searched_role','')
            
        if searched_role:      
            get_user_roles             = get_user_roles.filter(role__istartswith=searched_role).exclude(role="Super Admin").order_by('-id')           

            
        #Session set for query result for excel based on last search    
        request.session['get_user_roles']=json.dumps(list(get_user_roles.values('role','description')), cls=DjangoJSONEncoder)

        get_user_roles                  =list(get_user_roles.values('pk','role','description'))
        
        response                        ={
                                            "success"   :True,
                                            "user_role_list"  :get_user_roles,
                                            "searched_role"  :searched_role,   
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def listUsersUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
        user_list           = user_data.objects.all().exclude(id=user_id).order_by('-id')
        
        #Download Section 
        if 'download' in data:
            
            if 'user_list' in request.session and json.loads(request.session['user_list']):
                responce    = download(request.session['user_list'])
                return responce

        selected_enitity        = int(data.get('selected_entity',0))
        searched_user           = data.get('searched_user','') 
        selected_role           = int(data.get('selected_role',0)) 
        selected_branch         = int(data.get('selected_branch',0))
        
        if selected_enitity or searched_user or selected_role or selected_branch:    
                
            if selected_enitity and searched_user: 
                print(searched_user)    
                user_list             = user_list.filter(entity_id=selected_enitity,name__istartswith=searched_user).order_by('-id')
                    
            elif  selected_enitity:   
                user_list             = user_list.filter(entity_id=selected_enitity).order_by('-id')
                        
            else:      
                user_list             = user_list.filter(name__istartswith=searched_user).order_by('-id')

            
            if selected_role:
                user_list               =user_list.filter(user_role_id__id=selected_role)

            if selected_branch:
                user_list               =user_list.filter(branch_id__id=selected_branch)

        print(list(user_list.values()))
            
        #Session set for query result for excel based on last search    
        request.session['user_list']    = json.dumps(list(user_list.values('name','user_role_id__role','email','active','branch_id')), cls=DjangoJSONEncoder)
        user_list                       = list(user_list.values('name','user_role_id','user_role_id__role','email','active','entity_id','branch_id'))       
       
        
        response                        ={
                                            "success"           :True,
                                            "user_list"         :user_list,
                                            "searched_role"     :searched_user,   
                                            "selected_role_id"  :selected_role,
                                            "selected_branch_id":selected_branch,
                                            "selected_enitity"  :selected_enitity
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)




@api_view(['POST'])
def filterDownloadaccountgroupUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
        accounts_list           = accounting_group_data.objects.all().order_by('-id')
        selected_branch         = int(data.get('selected_branch',0))
        search_name             = data.get('search_name','')
        selected_group          = int(data.get('selected_group_id',0)) 

        if selected_branch or selected_group or search_name:    

            if selected_branch and search_name and selected_group:     
                accounts_list             = accounts_list.filter(branch_id=selected_branch,name__istartswith=search_name,under_group=selected_group).order_by('-id')
                    
            elif  selected_branch and search_name:   
                accounts_list             = accounts_list.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                
            elif  selected_branch and selected_group:   
                accounts_list             = accounts_list.filter(branch_id=selected_branch,under_group=selected_group).order_by('-id')
                    
            elif  search_name and selected_group:   
                accounts_list             = accounts_list.filter(name__istartswith=search_name,under_group=selected_group).order_by('-id')
                
            elif  search_name:   
                accounts_list             = accounts_list.filter(name__istartswith=search_name).order_by('-id')
                
            elif  selected_group:   
                accounts_list             = accounts_list.filter(under_group=selected_group).order_by('-id')
                
            else:      
                accounts_list             = accounts_list.filter(branch_id=selected_branch).order_by('-id')
                                
            #Download Section 
        if 'download' in data:
            
            if 'accounts_list' in request.session and json.loads(request.session['accounts_list']):
                responce=download(request.session['accounts_list'])
                return responce
                
            #Session set for query result for excel based on last search   
            # 
            
        request.session['accounts_list']=json.dumps(list(accounts_list.annotate(
            under_group_id_name=Case(
                When(under_group__isnull=True, then=Value(None)),
                default=F('under_group__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('pk','name', 'description', 'nature', 'affect_gross_profit', 'under_group_id_name','branch_id__id')), cls=DjangoJSONEncoder)

        accounts_list   = list(accounts_list.annotate(
            under_group_id_name=Case(
                When(under_group__isnull=True, then=Value(None)),
                default=F('under_group__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('pk','name', 'description', 'nature', 'affect_gross_profit','under_group_id', 'under_group_id_name','branch_id__id','branch_id__name'))
        

        response                        ={
                                            "success"   :True,
                                            "accounts_list"  :accounts_list,   
                                            "selected_branch_id":selected_branch,
                                            'selected_group_id':selected_group,
                                            'search_name':search_name,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)




@api_view(['POST'])
def filterAccountLedgerUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        
        listledger              = accounting_ledger_data.objects.all().order_by('-id')       
        selected_acc_group      = int(data.get('selected_acc_group',0))
        search_name             = data.get('search_name','') 
        end_date                = data.get('end','')
        start_date              = data.get('start','')  
        if selected_acc_group or search_name or start_date or end_date:    
                # we got pk from html post we need to get name to diaplay on popups
                            
            if selected_acc_group and search_name:     
                listledger             = listledger.filter(accounting_group_id=selected_acc_group,name__istartswith=search_name).order_by('-id')
                    
            elif  selected_acc_group:   
                listledger             = listledger.filter(accounting_group_id=selected_acc_group).order_by('-id')
                    
            else:      
                listledger             = listledger.filter(name__istartswith=search_name).order_by('-id')

            if  start_date and end_date:   
                listledger                = listledger.filter(created_at__range=(start_date,end_date))
                        
            elif start_date:   
                listledger                = listledger.filter(created_at__gte=start_date)

            elif end_date:
                listledger                = listledger.filter(created_at__lte=end_date)
                                 
        #Download Section 
        if 'download' in data:
            
            if 'listledger' in request.session and json.loads(request.session['listledger']):
                responce    = download(request.session['listledger'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['listledger']   = json.dumps(list(listledger.values('name','accounting_group_id','opening_balance','entry_type','bill_by_bill',entity=F('accounting_group_id_id__name'))), cls=DjangoJSONEncoder)
        listledger                      =list(listledger.values('pk','name','accounting_group_id','opening_balance','entry_type','bill_by_bill',entity=F('accounting_group_id_id__name')))


        response                        ={
                                            "success"   :True,
                                            "ledger_list"  :listledger,
                                            "selected_acc_group"  :selected_acc_group,   
                                            "search_name":search_name,
                                            "end_date":end_date,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)




@api_view(['POST'])
def filterFinancialYearUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        list_financial_year    = financial_year_data.objects.all().order_by('-id')

        #Download Section 
        if 'download' in data:
            
            if json.loads(request.session['get_data']):
                responce=download(request.session['get_data'])
                return responce
            

        selected_branch        = int(data.get('selected_branch',0))
        selected_status        = int(data.get('selected_status',1))
        
                            
        if selected_branch:     
            list_financial_year             = list_financial_year.filter(branch_id=selected_branch,active=selected_status).order_by('-id')
                        
        else:      
            list_financial_year             = list_financial_year.filter(active=selected_status).order_by('-id')    
            
        #Session set for query result for excel based on last search    
        request.session['get_data']=json.dumps(list(list_financial_year.values('branch_id_id__name','from_date','to_date','active')), cls=DjangoJSONEncoder)
        list_financial_year        =list(list_financial_year.values('pk','branch_id','branch_id_id__name','from_date','to_date','active'))

        response                        ={
                                            "success"   :True,
                                            "ledger_list"  :list_financial_year,
                                            "selected_branch"  :selected_branch,   
                                            "selected_status":selected_status,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterSeriesUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        list_series_data             = series_data.objects.all().order_by('-id')

        if 'download' in data:
            
            if 'list_series_data' in request.session and json.loads(request.session.get('list_series_data')):
                responce    = download(request.session['list_series_data'])
                return responce
            else:
                 return Response({"success": False,
                                 "message": "No related Sessions"})
            
        searched_series         = data.get('searched_series','')
            
        if searched_series:      
            list_series_data             = list_series_data.filter(type__istartswith=searched_series).order_by('-id')           

        #Download Section 
        
        #Session set for query result for excel based on last search    
        request.session['list_series_data']  =json.dumps(list(list_series_data.values('type','pre_text','post_text')), cls=DjangoJSONEncoder)
        list_series_data                     =list(list_series_data.values('pk','type','pre_text','post_text'))

        response                        ={
                                            "success"   :True,
                                            "list_series_data"  :list_series_data,
                                            "searched_series"  :searched_series,   
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterCustomerTypeUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()
    try:
        if user_id and app_token == get_token.token:
            customer_type_list  = customer_type.objects.all().order_by('-id')
            searched_name       = data.get('searched_type','')
            
            #Download Section 
            if 'download' in data:
                
                if 'customer_type_list' in request.session and json.loads(request.session.get('customer_type_list')):
                    responce    = download(request.session['customer_type_list'])
                    return responce
                
            if searched_name:

                customer_type_list             = customer_type_list.filter(type__istartswith=searched_name).order_by('-id')
            
                
            #Session set for query result for excel based on last search    
            request.session['get_data'] =json.dumps(list(customer_type_list.values('type','description')), cls=DjangoJSONEncoder)
            customer_type_list          =list(customer_type_list.values('pk','type','description'))


            response                        ={
                                                "success"   :True,
                                                "customer_type_list"  :customer_type_list,
                                                "searched_type"     :searched_name,   
                                            }
            
        else:
                response    =   {
                                    "success"   : False,
                                    "message"   : "Invalid Token Or User",
                                }

        return Response(response)
    
    except Exception as e:
        return Response({"success": False,
                                "message": "An error occurred: {}".format(str(e))})
    


@api_view(['POST'])
def filterLocationUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        location_list    = location_data.objects.all().order_by('-id')
        searched_name    = data.get('searched_name','')
            
        if searched_name:      
            location_list             = location_list.filter(location__istartswith=searched_name).order_by('-id')           

        #Download Section 
        if 'download' in data:
            
            if 'location_list' in request.session and json.loads(request.session['location_list']):
                responce    = download(request.session['location_list'])
                return responce
            
        #Session set for query result for excel based on last search    
        request.session['location_list']=json.dumps(list(location_list.values('location','created_at')), cls=DjangoJSONEncoder)
        location_list                   =list(location_list.values('pk','location','created_at'))


        response                        ={
                                            "success"   :True,
                                            "location_list"         :location_list,
                                            "searched_name"         :searched_name,   
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterCustomerUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        customer_list       = customer_data.objects.all().order_by('-id')
        selected_type       = int(data.get('selected_type',0))
        search_name         = data.get('name','') 
        start_date          = data.get('start','')
        end_date            = data.get('end','')
            
        if selected_type or search_name or start_date or end_date:    
        
            if selected_type and search_name:     
                customer_list             = customer_list.filter(customer_type_id=selected_type,name__istartswith=search_name).order_by('-id')
                    
            elif  selected_type:   
                customer_list             = customer_list.filter(customer_type_id=selected_type).order_by('-id')
                    
            elif  search_name:   
                customer_list             = customer_list.filter(name__istartswith=search_name).order_by('-id')

            if  start_date and end_date: 
                customer_list             = customer_list.filter(created_at__range=(start_date,end_date))
                        
            elif start_date:   
                customer_list             = customer_list.filter(created_at__gte=start_date)

            elif end_date:
                customer_list             = customer_list.filter(created_at__lte=end_date)
                    
            
                         
        #Download Section 
        if 'download' in data:
            
            if 'customer_list' in request.session and json.loads(request.session['customer_list']):
                responce=download(request.session['customer_list'])
                return responce
                   
        #Session set for query result for excel based on last search    
        request.session['customer_list']=json.dumps(list(customer_list.values('name','phone','email','customer_code','address','opening_balance','entry_type','bill_by_bill','credit_period','credit_limit','city','state','country','pincode','account_number','branch_name','branch_code')), cls=DjangoJSONEncoder)
        customer_list                   =list(customer_list.values('pk','name','phone','email','customer_code','customer_type_id','customer_type_id__type','address','opening_balance','entry_type','bill_by_bill','credit_period','credit_limit','city','state','country','pincode','account_number','branch_name','branch_code'))

        response                        ={
                                            "success"   :True,
                                            "customer_list"         :customer_list,
                                            "selected_type"         :selected_type,   
                                            "search_name"           :search_name,
                                            "start_date"            :start_date,
                                            "end_date"              :end_date
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }
    return Response(response)


@api_view(['POST'])
def filterSupplier_typeUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        supplier_type_list  = supplier_type.objects.all().order_by('-id')
        name                        = data.get('type','')
        if  name:    
            supplier_type_list             = supplier_type_list.filter(type__istartswith=name).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'supplier_type_list' in request.session and json.loads(request.session['supplier_type_list']):
                responce=download(request.session['supplier_type_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['supplier_type_list']=json.dumps(list(supplier_type_list.values('type','description')), cls=DjangoJSONEncoder)
        supplier_type_list                   =supplier_type_list.values('pk','type','description')
        response                        ={
                                            "success"   :True,
                                            "supplier_type_list"    :supplier_type_list,
                                            "name"         :name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterSupplierUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        supplier_list       = supplier_data.objects.all().order_by('-id')
        selected_type    = int(data.get('selected_type',0))
        name             = data.get('name','') 
        start_date       = data.get('start_date','') 
        end_date         = data.get('end_date','')

        if selected_type or name or start_date or end_date:    
                            
            if selected_type and name:     
                supplier_list             = supplier_list.filter(supplier_type_id=selected_type,name__istartswith=name).order_by('-id')
                    
            elif  selected_type:   
                
                supplier_list             = supplier_list.filter(supplier_type_id=selected_type).order_by('-id')
                    
            else:      
                supplier_list             = supplier_list.filter(name__istartswith=name).order_by('-id')

            if  start_date and end_date:
                supplier_list             = supplier_list.filter(created_at__range=(start_date,end_date))
                        
            elif start_date:   
                supplier_list             = supplier_list.filter(created_at__gte=start_date)

            elif end_date:
                supplier_list             = supplier_list.filter(created_at__lte=end_date)
                                
        #Download Section 
        if 'download' in data:
            
            if 'supplier_list' in request.session and json.loads(request.session['supplier_list']):
                responce=download(request.session['supplier_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['supplier_list']=json.dumps(list(supplier_list.values('name','phone','email','address','city','state','country','pincode','account_number','supplier_code','opening_balance','entry_type','bill_by_bill','credit_period','credit_limit')), cls=DjangoJSONEncoder)
        supplier_list                   =list(supplier_list.values('pk','name','phone','email','address','city','state','country','pincode','account_number','supplier_code','opening_balance','supplier_type_id','supplier_type_id__type','entry_type','bill_by_bill','credit_period','credit_limit'))
        response                        ={
                                            "success"   :True,
                                            "supplier_type_list"    :supplier_list,
                                            "selected_type"         :selected_type,
                                            "name"                  :name,
                                            "start_date"            :start_date,
                                            "end_date"              :end_date
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterUnitUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        unit_list    = unit_data.objects.all().order_by('-id')
        searched_name    = data.get('name','')
            
        if searched_name:      
            unit_list             = unit_list.filter(unit__istartswith=searched_name).order_by('-id')           

        #Download Section 
        if 'download' in data:
            
            if 'unit_list' in request.session and json.loads(request.session['unit_list']):
                responce    = download(request.session['unit_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['unit_list']    =json.dumps(list(unit_list.values('unit','description','formal_name','no_of_decimal_place')), cls=DjangoJSONEncoder)
        unit_list                       =list(unit_list.values('pk','unit','description','formal_name','no_of_decimal_place'))
        response                        ={
                                            "success"               :True,
                                            "unit_list"             :unit_list,
                                            "name"                  :searched_name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterSizeUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        size_list          = size_data.objects.all().order_by('-id')

        searched_name      = data.get('name','')
            
        if searched_name:      
            size_list             = size_list.filter(size__istartswith=searched_name).order_by('-id')           

        #Download Section 
        if 'download' in data:
            
            if 'size_list' in request.session and json.loads(request.session['size_list']):
                responce    = download(request.session['size_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['size_list']=json.dumps(list(size_list.values('pk','size','description')), cls=DjangoJSONEncoder)
        size_list                   =list(size_list.values('pk','size','description'))
        response                        ={
                                            "success"               :True,
                                            "size_list"             :size_list,
                                            "searched_name"         :searched_name
                                        }
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }
    return Response(response)



@api_view(['POST'])
def filterBrandUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        brand_list          = brand_data.objects.all().order_by('-id')
        searched_name       = data.get('name','')   
        if searched_name:      
            brand_list             = brand_list.filter(name__istartswith=searched_name).order_by('-id')
        #Download Section 
        if 'download' in data:    
            if 'brand_list' in request.session and json.loads(request.session['brand_list']):
                responce    = download(request.session['brand_list'])
                return responce      
        #Session set for query result for excel based on last search    
        request.session['brand_list']=json.dumps(list(brand_list.values('name','manufacture','description')), cls=DjangoJSONEncoder)
        brand_list                   =list(brand_list.values('pk','name','manufacture','description'))
        response                        ={
                                            "success"               :True,
                                            "brand_list"             :brand_list,
                                            "searched_name"         :searched_name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterModelUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        model_number        = model_number_data.objects.all().order_by('-id')
        searched_name       =  ''

        searched_name    = data.get('name','')
            
        if searched_name:      
            model_number             = model_number.filter(model_number__istartswith=searched_name).order_by('-id')
                

        #Download Section 
        if 'download' in data:
            
            if 'model_number' in request.session and json.loads(request.session['model_number']):
                responce    = download(request.session['model_number'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['model_number']=json.dumps(list(model_number.values('model_number','description')), cls=DjangoJSONEncoder)
        model_number                   =list(model_number.values('pk','model_number','description'))
        response                        ={
                                            "success"                   :True,
                                            "model_number_list"         :model_number,
                                            "searched_name"             :searched_name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)


@api_view(['POST'])
def filterGodownUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        godown_data_list    = godown_data.objects.all().order_by('-id')
        
        
        name                        = data.get('name','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        
        if selected_branch or name:    
                            
            if selected_branch and name:     
                godown_data_list             = godown_data_list.filter(name__istartswith=name,branch_id=selected_branch).order_by('-id')
                    
            elif  selected_branch:
                
                godown_data_list             = godown_data_list.filter(branch_id=selected_branch).order_by('-id')
                        
            else:      
                godown_data_list             = godown_data_list.filter(name__istartswith=name).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'godown_data_list' in request.session and json.loads(request.session['godown_data_list']):
                responce=download(request.session['godown_data_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['godown_data_list']=json.dumps(list(godown_data_list.values('name','description','branch_id__name')), cls=DjangoJSONEncoder)
        godown_data_list                   =  list(godown_data_list.values('pk','name','description','branch_id__name','branch_id')) 
        response                        ={
                                            "success"                   :True,
                                            "godown_data_list"          :godown_data_list,
                                            "name"                      :name,
                                            "selected_branch_id"        :selected_branch
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterRackUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        racklist                = rack_data.objects.all().order_by('-id')

        selected_branch     = int(data.get('selected_branch_id',0))
        search_name         = data.get('name','') 
        selected_godown     = int(data.get('selected_godown_id',0))    
        if selected_branch or selected_godown or search_name:    
                # we got pk from html post we need to get name to diaplay on popups
            
            if selected_branch and search_name and selected_godown:     
                racklist             = racklist.filter(branch_id=selected_branch,name__istartswith=search_name,godown_id=selected_godown).order_by('-id')
                    
            elif  selected_branch and search_name:   
                racklist             = racklist.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                
            elif  selected_branch and selected_godown:   
                racklist             = racklist.filter(branch_id=selected_branch,godown_id=selected_godown).order_by('-id')
                    
            elif  search_name and selected_godown:   
                racklist             = racklist.filter(name__istartswith=search_name,godown_id=selected_godown).order_by('-id')
                
            elif  search_name:   
                racklist             = racklist.filter(name__istartswith=search_name).order_by('-id')
                
            elif  selected_godown:   
                racklist             = racklist.filter(godown_id=selected_godown).order_by('-id')     

            else:   
                racklist             = racklist.filter(branch_id=selected_branch).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'racklist' in request.session and json.loads(request.session['racklist']):
                responce=download(request.session['racklist'])
                return responce
                   
        #Session set for query result for excel based on last search   
        # 
        
        request.session['racklist']=json.dumps(list(racklist.values('name','description','godown_id__name')), cls=DjangoJSONEncoder)
        racklist                   =  list(racklist.values('pk','name','description','godown_id__name','branch_id','branch_id__name'))
        response                        ={
                                            "success"                   :True,
                                            "racklist"                  :racklist,
                                            "selected_godown_id"           :selected_godown,
                                            "search_name"               :search_name,
                                            "selected_branch_id"           :selected_branch
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterProductGroupUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        product_group_list          =product_group_data.objects.all().order_by('id')         
        selected_product_grp        = int(data.get('selected_product_grp',0))
        search_name                 = data.get('search_name','') 
            
        if selected_product_grp or search_name:    
                # we got pk from html post we need to get name to diaplay on popups
            
            if selected_product_grp and search_name:     
                product_group_list             = product_group_list.filter(name__istartswith=search_name,under_group=selected_product_grp).order_by('-id')
                    
            elif  search_name:   
                product_group_list             = product_group_list.filter(name__istartswith=search_name).order_by('-id')   

            else:      
                product_group_list             = product_group_list.filter(under_group=selected_product_grp).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'product_group_list' in request.session and json.loads(request.session['product_group_list']):
                responce=download(request.session['product_group_list'])
                return responce
                   
        #Session set for query result for excel based on last search   
        # 
        
        request.session['product_group_list']=json.dumps(list(product_group_list.annotate(
            under_group_name=Case(
                When(under_group__isnull=True, then=Value(None)),
                default=F('under_group__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('name', 'description', 'under_group_name')), cls=DjangoJSONEncoder)

        product_group_list=list(product_group_list.annotate(
            under_group_name=Case(
                When(under_group__isnull=True, then=Value(None)),
                default=F('under_group__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('pk','name', 'description', 'under_group_name','under_group'))

        response                        ={
                                            "success"                   :True,
                                            "product_group_list"        :product_group_list,
                                            "selected_product_grp"      :selected_product_grp,
                                            "search_name"               :search_name,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterPriceLvlUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        price_level_list    = pricing_level_data.objects.all().order_by('-id')
        branch_list         = branch_data.objects.all().order_by('-id')

        name                        = data.get('search_name','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name:    
                            
            if selected_branch and name:     
                price_level_list             = price_level_list.filter(name__istartswith=name,branch_id=selected_branch).order_by('-id')
                    
            elif  selected_branch:   
                price_level_list             = price_level_list.filter(branch_id=selected_branch).order_by('-id')
                        
            else:      
                price_level_list             = price_level_list.filter(name__istartswith=name).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'price_level_list' in request.session and json.loads(request.session['price_level_list']):
                responce=download(request.session['price_level_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['price_level_list']=json.dumps(list(price_level_list.values('name','description','branch_id__name')), cls=DjangoJSONEncoder)
        price_level_list                   =list(price_level_list.values('pk','name','description','branch_id__name','branch_id'))
        response                        ={
                                            "success"                   :True,
                                            "price_level_list"          : price_level_list,
                                            "search_name"               :name,
                                            "selected_branch_id"        :selected_branch,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterProductUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        product_list                = product_data.objects.all().order_by('-id')
        start_date                  = data.get('start_date','')
        end_date                    = data.get('end_date','')
        name                        = data.get('search_name','')
        selected_group              = int(data.get('selected_group_id',0)) 
        branch_id                   = int(data.get('branch_id',0))
        product_type                = data.get('product_type','')
        inv_date                    = data.get('inv_date')
        
        if branch_id:
            product_list             = product_list.filter(branch_id=branch_id)
            print(product_list)
        if selected_group:     
            product_list             = product_list.filter(product_group_id=selected_group)
        if product_type:
            product_list             = product_list.filter(product_type=product_type)
        if name:
            product_list             = product_list.filter(name__istartswith=name)
        if  start_date and end_date:   

            product_list             = product_list.filter(created_at__range=(start_date,end_date))
                    
        elif start_date:    
            product_list             = product_list.filter(created_at__gte=start_date)

        elif end_date:
            product_list             = product_list.filter(created_at__lte=end_date)

        

        

        
                            
        #Download Section 
        if 'download' in data:
            
            if 'product_list' in request.session and json.loads(request.session['product_list']):
                responce=download(request.session['product_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['product_list']=json.dumps(list(product_list.values('pk','name', 'branch_id__id', 'product_code','product_group_id','product_group_id__name','purchase_rate','mrp','sales_rate','reorder_level','minimum_stock','maximum_stock','bom','bar_code','unit_id','created_at','rack_id','godown_id')), cls=DjangoJSONEncoder)
        
        products                  =list(product_list.values('pk','name', 'branch_id__id', 'product_code','product_group_id','product_group_id__name','purchase_rate','mrp','sales_rate','reorder_level','minimum_stock','maximum_stock','bom','bar_code','unit_id','created_at','rack_id','godown_id'))
        
        product_list                = []
        for product in products:

            sum_credit_product_quantity = 0
            sum_debit_product_quantity  = 0  
            sum_credit_product_amount   = 0
            sum_debit_product_amount    = 0
            avg_sale_price      = 0
            avg_purchase_price  = 0
            
            get_product_data    = product_data.objects.get(pk=product['pk'])
            print(get_product_data)
            credit_product      = order_product_data.objects.filter(product_id=get_product_data.id,latest=1,entry_type="Credit",status='Approved')
            print(credit_product)
            if credit_product:
                sum_credit_product_quantity     = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                sum_credit_product_amount       = credit_product.aggregate(total_credit_amount=Sum('amount'))['total_credit_amount']
                print(sum_credit_product_quantity,sum_credit_product_amount)
                print("@@@@@@@22")
                print(sum_credit_product_amount)
                if sum_credit_product_amount:
                    avg_purchase_price              = int(sum_credit_product_amount)/int(sum_credit_product_quantity)
            
            debit_product       = order_product_data.objects.filter(product_id=get_product_data.id,latest=1,entry_type="Debit",status='Approved')
            if debit_product:
                sum_debit_product_quantity      = debit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                sum_debit_product_amount        = debit_product.aggregate(total_debit_amount=Sum('amount'))['total_debit_amount']
                

                if sum_debit_product_amount:

                    avg_sale_price                  = int(sum_debit_product_amount)/int(sum_debit_product_quantity)
            
            get_rack_ids        = [] if not get_product_data.rack_id else get_product_data.rack_id.split(',')

            if get_rack_ids:
                for rack_id in get_rack_ids:
                    rack                =rack_data.objects.get(pk=rack_id)
                    sum_so_quantity     = 0
                    sum_credit_product  = 0
                    sum_debit_product   = 0
                    csum_free_quantity  = 0
                    dsum_free_quantity  = 0

                    product_id          = product['pk']
                    if inv_date:
                        credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved',date__lte=inv_date)
                        print("credd")
                        print(credit_product)
                        if credit_product:
                            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                            csum_free_quantity              = credit_product.aggregate(total_free=Sum('free'))['total_free']

                        debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Debit",status='Approved',date__lte=inv_date)
                        print("debit")
                        print(debit_product)
                        if debit_product:
                            sum_debit_product       = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
                            dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']
                            
                    else:
                        credit_product      = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Credit",status='Approved')


                        if credit_product:
                            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                            csum_free_quantity              = credit_product.aggregate(total_free=Sum('free'))['total_free']
                    
                        debit_product       = order_product_data.objects.filter(product_id=product_id,rack_id=rack_id,latest=1,entry_type="Debit",status='Approved')
                        if debit_product:
                            sum_debit_product       = debit_product.aggregate(total_so_quantity=Sum('so_quantity'))['total_so_quantity']
                            dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']
                    print(dsum_free_quantity)
                    print("#######")
                    balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)

                    product_list.append({
                            'pk':product['pk'],
                            'name':product['name'],
                            'balance_quantity':balance_quantity,
                            'branch_id':product['branch_id__id'],
                            'rack_id':rack_id,
                            'mrp':product['mrp'],
                            'rack_name':rack.name,
                            'avg_sale_price':avg_sale_price,
                            'avg_purchase_price':avg_purchase_price
                    })
            else:
                product_list.append({
                            'pk':product['pk'],
                            'name':product['name'],          
                            'branch_id':product['branch_id__id'],
                            'mrp':product['mrp'],
                    })

                    
            
            

        response                        ={
                                            "success"               :True,
                                            "product_list"          :product_list,
                                            "name"                  :name,
                                            "start_date"            :start_date,
                                            "end_date"              :end_date,
                                            "selected_group"        :selected_group
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }
    return Response(response)


@api_view(['POST'])
def filterVoucherTypeUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        voucher_type_list           = voucher_type_data.objects.all().order_by('-id')

        selected_branch     = int(data.get('selected_branch_id',0))
        search_name         = data.get('name','') 
        selected_voucher    = int(data.get('selected_type_id',0))     
        if selected_branch or selected_voucher or search_name:    
                # we got pk from html post we need to get name to diaplay on popups
            

            if selected_branch and search_name and selected_voucher:     
                voucher_type_list             = voucher_type_list.filter(branch_id=selected_branch,name__istartswith=search_name,type_of_voucher=selected_voucher).order_by('-id')
                    
            elif  selected_branch and search_name:   
                voucher_type_list             = voucher_type_list.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                
            elif  selected_branch and selected_voucher:   
                voucher_type_list             = voucher_type_list.filter(branch_id=selected_branch,type_of_voucher=selected_voucher).order_by('-id')
                    
            elif  search_name and selected_voucher:   
                voucher_type_list             = voucher_type_list.filter(name__istartswith=search_name,type_of_voucher=selected_voucher).order_by('-id')
                

            elif  search_name:   
                voucher_type_list             = voucher_type_list.filter(name__istartswith=search_name).order_by('-id')
                
            elif  selected_voucher:   
                voucher_type_list             = voucher_type_list.filter(type_of_voucher=selected_voucher).order_by('-id')
                

            else:      
                voucher_type_list             = voucher_type_list.filter(branch_id=selected_branch).order_by('-id')
                            
        #Download Section 
        if 'download' in data:
            
            if 'voucher_type_list' in request.session and json.loads(request.session['voucher_type_list']):
                responce=download(request.session['voucher_type_list'])
                return responce
                   
        #Session set for query result for excel based on last search   
        # 
        
        request.session['voucher_type_list']=json.dumps(list(voucher_type_list.annotate(
            type_of_voucher_name=Case(
                When(type_of_voucher__isnull=True, then=Value(None)),
                default=F('type_of_voucher__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('name', 'branch_id__id', 'description', 'start_index', 'type_of_voucher_name')), cls=DjangoJSONEncoder)

        voucher_type_list   =list(voucher_type_list.annotate(
            type_of_voucher_name=Case(
                When(type_of_voucher__isnull=True, then=Value(None)),
                default=F('type_of_voucher__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('pk','name', 'branch_id__id','branch_id__name', 'description', 'start_index', 'type_of_voucher_name'))


        
        response                        ={
                                            "success"               :True,
                                            "voucher_type_list"          :voucher_type_list,
                                            "selected_branch"            :selected_branch,
                                            "search_name"                   :search_name,
                                            "selected_voucher_id"           :selected_voucher,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterVoucherSeriesUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        voucher_series_list         = voucher_series_data.objects.all().order_by('-id')
   
        selected_branch     = int(data.get('selected_branch_id',0))
        search_name         = data.get('name','') 
        selected_voucher    = int(data.get('selected_voucher_type_id',0)) 
        if selected_branch or selected_voucher or search_name:    
                # we got pk from html post we need to get name to diaplay on popups
            

            if selected_branch and search_name and selected_voucher:     
                voucher_series_list             = voucher_series_list.filter(branch_id=selected_branch,name__istartswith=search_name,voucher_type_id=selected_voucher).order_by('-id')
                    
            elif  selected_branch and search_name:   
                voucher_series_list             = voucher_series_list.filter(branch_id=selected_branch,name__istartswith=search_name).order_by('-id')
                
            elif  selected_branch and selected_voucher:   
                voucher_series_list             = voucher_series_list.filter(branch_id=selected_branch,voucher_type_id=selected_voucher).order_by('-id')
                    
            elif  search_name and selected_voucher:   
                voucher_series_list             = voucher_series_list.filter(name__istartswith=search_name,voucher_type_id=selected_voucher).order_by('-id')
                

            elif  search_name:   
                
                voucher_series_list             = voucher_series_list.filter(name__istartswith=search_name).order_by('-id')
                
            elif  selected_voucher:   
                voucher_series_list             = voucher_series_list.filter(voucher_type_id=selected_voucher).order_by('-id')
                

            else:      
                voucher_series_list             = voucher_series_list.filter(branch_id=selected_branch).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'voucher_series_list' in request.session and json.loads(request.session['voucher_series_list']):
                responce=download(request.session['voucher_series_list'])
                return responce
                   
        #Session set for query result for excel based on last search   
        # 
        
        request.session['voucher_series_list']=json.dumps(list(voucher_series_list.annotate(
            type_of_voucher_name=Case(
                When(voucher_type_id__isnull=True, then=Value(None)),
                default=F('voucher_type_id__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('name','branch_id__name', 'description','starting_number','voucher_type_id__name','prefix','postfix','starting_number','type_of_voucher_name')), cls=DjangoJSONEncoder)
        
        
        voucher_series_list =list(voucher_series_list.annotate(
            type_of_voucher_name=Case(
                When(voucher_type_id__isnull=True, then=Value(None)),
                default=F('voucher_type_id__name'),
                output_field=CharField()  # Adjust the field type accordingly
            )
        ).values('pk','name',  'branch_id','branch_id__name', 'description','starting_number','voucher_type_id__name','prefix','postfix','starting_number','type_of_voucher_name'))

        
        response                        ={
                                            "success"                   :True,
                                            "voucher_series_list"        :voucher_series_list,
                                            "search_name"               :search_name,
                                            "selected_voucher_id"       :selected_voucher,
                                            "selected_branch"           :selected_branch
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterTaxUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        tax_list            = tax_data.objects.filter(active=1).order_by('-id')
        
        name                        = data.get('name','')
        selected_status             = int(data.get('selected_status',1))
        print(selected_status) 
        
        if  name:   
            tax_list                =  tax_data.objects.filter(tax__istartswith=name,active=selected_status).order_by('-id')                
        else:  
            tax_list                =  tax_data.objects.filter(active=selected_status).order_by('-id')
                
                                   
        #Download Section 
        if 'download' in data:
            
            if 'tax_list' in request.session and json.loads(request.session['tax_list']):
                responce=download(request.session['tax_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['tax_list']=json.dumps(list(tax_list.values('tax','rate_perc','description','active','branch_id__name')), cls=DjangoJSONEncoder)
        tax_list                   = list(tax_list.values('tax','rate_perc','description','active','branch_id__name','branch_id'))              
        response                        ={
                                            "success"                   :True,
                                            "tax_list"                  :tax_list,
                                            "name"                      :name,
                                            "selected_status"           :selected_status,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterWarehouseUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        warehouse_list            = warehouse_data.objects.all().order_by('-id')
      
       
        name                        = data.get('name','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name:    
                            
            if selected_branch and name:     
                warehouse_list             = warehouse_list.filter(name__istartswith=name,branch_id=selected_branch).order_by('-id')
                    
            elif  selected_branch:
                
                warehouse_list             = warehouse_list.filter(branch_id=selected_branch).order_by('-id')
                        
            else:      
                warehouse_list             = warehouse_list.filter(name__istartswith=name).order_by('-id')
                               
        #Download Section 
        if 'download' in data:
            
            if 'warehouse_list' in request.session and json.loads(request.session['warehouse_list']):
                responce=download(request.session['warehouse_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['warehouse_list']=json.dumps(list(warehouse_list.values('name','address','city','state','country','pincode','branch_id__name')), cls=DjangoJSONEncoder)       
        warehouse_list                  =list(warehouse_list.values('pk','name','address','city','state','country','pincode','branch_id__name','branch_id'))
        response                        ={
                                            "success"                   :True,
                                            "warehouse_list"            :warehouse_list,
                                            "name"                      :name,
                                            "selected_branch_id"        :selected_branch,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterBatcheUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        batch_list        = batch_data.objects.all().order_by('-id')
       
        name                        = data.get('name','')
        selected_product             = int(data.get('selected_product_id',0)) 
        
        if selected_product or name:    
                            
            if selected_product and name:     
                batch_list             = batch_list.filter(name__istartswith=name,branch_id=selected_product).order_by('-id')
                    
            elif  selected_product:   
                batch_list             = batch_list.filter(product_id=selected_product).order_by('-id')
                        
            else:      
                batch_list             = batch_list.filter(name__istartswith=name).order_by('-id')
                            
        #Download Section 
        if 'download' in data:
            
            if 'batch_list' in request.session and json.loads(request.session['batch_list']):
                responce=download(request.session['batch_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['batch_list']=json.dumps(list(batch_list.values('name','manufacture_date','expiry_date','description','active','created_at',product_name=F('product_id__name'))), cls=DjangoJSONEncoder)
        batch_list                   =list(batch_list.values('pk','name','manufacture_date','expiry_date','description','active','created_at','product_id',product_name=F('product_id__name')))
        response                        ={
                                            "success"                   :True,
                                            "batch_list"            :batch_list,
                                            "name"                      :name,
                                            "selected_product_id"        :selected_product,
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterPurchaseOrderPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        list_orders    = order_data.objects.all().filter(entry_type='Credit').order_by('-id')

        start_date                  =data.get('start','')
        end_date                    =data.get('end','')
        name                        = data.get('order_id','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                list_orders             = list_orders.filter(branch_id=selected_branch)
            
            if name:
                list_orders             = list_orders.filter(pk__istartswith=name)
                print(list_orders)

            if  start_date and end_date:   

                list_orders             = list_orders.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                list_orders             = list_orders.filter(date__gte=start_date)

            elif end_date:
                list_orders             = list_orders.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'list_orders' in request.session and json.loads(request.session['list_orders']):
                responce=download(request.session['list_orders'])
                return responce
        
        list_orders_ids = list_orders.values_list('id', flat=True)
        print(list_orders_ids)
        matching_order_products = order_product_data.objects.filter(order_id__in=list_orders_ids)
        

        print(matching_order_products)
            
        #Session set for query result for excel based on last search    
        request.session['list_orders']=json.dumps(list(matching_order_products.values('order_id','order_id__voucher_type_id__name', 'order_id__order_number', 'order_id__exchange_rate','order_id__date','order_id__due_days','order_id__description','order_id__total_amount','order_id__generate_invoice','order_id__entry_type','order_id__order_number', 'branch_id__name', 'product_id__name','quantity',purchase_quantity=F('po_quantity'))), cls=DjangoJSONEncoder)
        list_orders                   =list(matching_order_products.values('order_id','order_id__voucher_type_id__name', 'order_id__order_number', 'order_id__exchange_rate','order_id__date','order_id__due_days','order_id__description','order_id__total_amount','order_id__generate_invoice','order_id__entry_type','order_id__order_number', 'branch_id__name', 'product_id__name','quantity',purchase_quantity=F('po_quantity')))
        response                        ={
                                            "success"                   :True,
                                            "list_porders"               :list_orders,
                                            "order_id"                  :name,
                                            "selected_branch"           :selected_branch,
                                            "start_date"                :start_date,
                                            "end_date"                  :end_date
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterPurchaseInvoicePortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        list_invoices            = invoice_data.objects.all().filter(entry_type='Credit',invoice_id=None).order_by('-id')
        

        start_date                  =data.get('start','')
        end_date                    =data.get('end','')
        name                        = data.get('name','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        selected_type               = int(data.get('selected_vouchertype_id',0)) 
        print("%%%%")
        if selected_branch or name or start_date or end_date or selected_type:                         
            if selected_branch:     
                list_invoices             = list_invoices.filter(branch_id=selected_branch)
           
            if name:
                
                list_invoices             = list_invoices.filter(voucher_number_id__voucher_number__istartswith=name)

            if selected_type:
                list_invoices             = list_invoices.filter(voucher_type_id=selected_type)


            if  start_date and end_date:   

                list_invoices             = list_invoices.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                list_invoices             = list_invoices.filter(date__gte=start_date)

            elif end_date:
                list_invoices             = list_invoices.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'list_invoices' in request.session and json.loads(request.session['list_invoices']):
                responce=download(request.session['list_invoices'])
                return responce

          
            
        #Session set for query result for excel based on last search    
        request.session['list_invoices']=json.dumps(list(list_invoices.values('order_id__order_number', 'branch_id__name', 'exchange_rate','date','due_days','description','total_amount','against','entry_type','cheque_number')), cls=DjangoJSONEncoder)
        list_invoices                   =list(list_invoices.values('voucher_number_id__voucher_number','branch_id', 'branch_id__name', 'exchange_rate','date','due_days','description','total_amount','against','entry_type','cheque_number'))
        response                        ={
                                            "success"                   :True,
                                            "list_invoices"             :list_invoices,
                                            "name"                      :name,
                                            "selected_branch_id"        :selected_branch,
                                            "selected_vouchertype_id"   :selected_type,
                                            "start_date"                :start_date,
                                            "end_date"                  :end_date
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)




@api_view(['POST'])
def filterSalesOrderPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        sales_order_list            = order_data.objects.all().filter(entry_type='Debit').order_by('-id')
        start_date                  = data.get('start_date','')
        end_date                    = data.get('end_date','')
        name                        = data.get('searched_order','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                sales_order_list             = sales_order_list.filter(branch_id=selected_branch)
            
            if name:
                sales_order_list             = sales_order_list.filter(pk__istartswith=name)
                print(sales_order_list)

            if  start_date and end_date:   

                sales_order_list             = sales_order_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                sales_order_list             = sales_order_list.filter(date__gte=start_date)

            elif end_date:
                sales_order_list             = sales_order_list.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'sales_order_list' in request.session and json.loads(request.session['sales_order_list']):
                responce=download(request.session['sales_order_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['sales_order_list']=json.dumps(list(sales_order_list.values('order_number', 'branch_id__name', 'order_number', 'exchange_rate','date','due_days','description','total_amount','generate_invoice','entry_type')), cls=DjangoJSONEncoder)
        sales_order_list                   =list(sales_order_list.values('pk','order_number', 'branch_id','branch_id__name', 'order_number', 'exchange_rate','date','due_days','description','total_amount','generate_invoice','entry_type'))
        
        response                        ={
                                            "success"                   :True,
                                            "sales_order_list"          :sales_order_list,
                                            "start_date"                :start_date,
                                            "end_date"                  :end_date,
                                            "selected_branch_id"        :selected_branch,
                                            "searched_order"            :name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterSalesInvoicePortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        sales_invoice_list  = invoice_data.objects.all().filter(entry_type='Debit',invoice_id=None).order_by('-id')
        # filter section
       
        start_date                  =data.get('start_date','')
        end_date                    =data.get('end_date','')
        name                        = data.get('voucher_number','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                sales_invoice_list             = sales_invoice_list.filter(branch_id=selected_branch)
            
            if name:
                sales_invoice_list             = sales_invoice_list.filter(voucher_number_id__voucher_number__istartswith=name)
                print(sales_invoice_list)

            if  start_date and end_date:   

                sales_invoice_list             = sales_invoice_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                sales_invoice_list             = sales_invoice_list.filter(date__gte=start_date)

            elif end_date:
                sales_invoice_list             = sales_invoice_list.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'sales_invoice_list' in request.session and json.loads(request.session['sales_invoice_list']):
                responce=download(request.session['sales_invoice_list'])
                return responce
            
        
        #Session set for query result for excel based on last search    
        request.session['sales_invoice_list']=json.dumps(list(sales_invoice_list.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
        sales_invoice_list              =list(sales_invoice_list.values('voucher_number_id__voucher_number','branch_id' ,'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status'))
        response                        ={
                                            "success"                   :True,
                                            "sales_invoice_list"        :sales_invoice_list,
                                            "start_date"                :start_date,
                                            "end_date"                  :end_date,
                                            "selected_branch_id"        :selected_branch,
                                            "voucher_number"            :name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)


@api_view(['POST'])
def filterPaymentVoucherInvoicePortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        payment_voucher_list    = invoice_data.objects.all().filter(entry_type='Payment',invoice_id=None).order_by('-id')
    
        start_date                  =data.get('start_date','')
        end_date                    =data.get('end_date')
        name                        = data.get('voucher_number','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                payment_voucher_list             = payment_voucher_list.filter(branch_id=selected_branch)
            
            if name:
                payment_voucher_list             = payment_voucher_list.filter(voucher_number_id__voucher_number__istartswith=name)
                print(payment_voucher_list)

            if  start_date and end_date:   

                payment_voucher_list             = payment_voucher_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                payment_voucher_list             = payment_voucher_list.filter(date__gte=start_date)

            elif end_date:
                payment_voucher_list             = payment_voucher_list.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'payment_voucher_list' in request.session and  json.loads(request.session['payment_voucher_list']):
                responce=download(request.session['payment_voucher_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['payment_voucher_list']=json.dumps(list(payment_voucher_list.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
        payment_voucher_list=list(payment_voucher_list.values('order_id__order_number','branch_id' ,'branch_id__name','voucher_type_id' ,'voucher_type_id__name', 'voucher_number_id__voucher_number','exchange_rate','date','due_days','description','total_amount','approved_by','status'))
        response                        ={
                                            "success"                       :True,
                                            "payment_voucher_list"          :payment_voucher_list,
                                            "start_date"                    :start_date,
                                            "end_date"                      :end_date,
                                            "selected_branch_id"            :selected_branch,
                                            "voucher_number"                :name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterReceiptVoucherPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        receipt_voucher_list    = invoice_data.objects.all().filter(entry_type='Receipt',invoice_id=None).order_by('-id')
       
        start_date                  =data.get('start_date','')
        end_date                    =data.get('end_date','')
        name                        =data.get('voucher_number','')       
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                receipt_voucher_list             = receipt_voucher_list.filter(branch_id=selected_branch)
            
            if name:
                receipt_voucher_list             = receipt_voucher_list.filter(voucher_number_id__voucher_number__istartswith=name)
                print(receipt_voucher_list)

            if  start_date and end_date:   

                receipt_voucher_list             = receipt_voucher_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                print(start_date)
                print(type(start_date))
                receipt_voucher_list             = receipt_voucher_list.filter(date__gte=start_date)
                print(receipt_voucher_list)


            elif end_date:
                receipt_voucher_list             = receipt_voucher_list.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'receipt_voucher_list' in request.session and json.loads(request.session['receipt_voucher_list']):
                responce=download(request.session['receipt_voucher_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['receipt_voucher_list']=json.dumps(list(receipt_voucher_list.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
        receipt_voucher_list            =list(receipt_voucher_list.values('voucher_number_id__voucher_number','branch_id' ,'branch_id__name','voucher_type_id' ,'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status'))
        
        response                        ={
                                            "success"                       :True,
                                            "receipt_voucher_list"          :receipt_voucher_list,
                                            "start_date"                    :start_date,
                                            "end_date"                      :end_date,
                                            "selected_branch_id"            :selected_branch,
                                            "voucher_number"                :name
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterCreditnotePortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        creditnote_list            = invoice_data.objects.all().filter(entry_type='Creditnote',invoice_id=None).order_by('-id')
        
        start_date                  =data.get('start_date','')
        end_date                    =data.get('end_date','')
        name                        = data.get('voucher_number','')
        selected_branch             = int(data.get('selected_branch_id',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                creditnote_list             = creditnote_list.filter(branch_id=selected_branch)
            
            if name:
                creditnote_list             = creditnote_list.filter(voucher_number_id__voucher_number__istartswith=name)
                print(creditnote_list)

            if  start_date and end_date:   
                creditnote_list             = creditnote_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                creditnote_list             = creditnote_list.filter(date__gte=start_date)

            elif end_date:
                creditnote_list             = creditnote_list.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'creditnote_list' in request.session and json.loads(request.session['creditnote_list']):
                responce=download(request.session['creditnote_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['creditnote_list']  =json.dumps(list(creditnote_list.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name', 'voucher_number_id__voucher_number','exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
        creditnote_list                     =creditnote_list.values('order_id__order_number', 'branch_id','branch_id__name','voucher_type_id' ,'voucher_type_id__name', 'voucher_number_id__voucher_number','exchange_rate','date','due_days','description','total_amount','approved_by','status')
        response                            ={
                                                "success"                       :True,
                                                "creditnote_list"               :creditnote_list,
                                                "start_date"                    :start_date,
                                                "end_date"                      :end_date,
                                                "selected_branch_id"            :selected_branch,
                                                "voucher_number"                :name
                                            }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)




@api_view(['POST'])
def filterDebitNotenotePortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        debitnote_list    = invoice_data.objects.all().filter(entry_type='Debitnote',invoice_id=None).order_by('-id')

       
       
        start_date                  =data.get('start_date','')
        end_date                    =data.get('end_date','')
        name                        = data.get('voucher_number','')
        selected_branch             = int(data.get('selected_branch',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                debitnote_list             = debitnote_list.filter(branch_id=selected_branch)
            
            if name:
                debitnote_list             = debitnote_list.filter(voucher_number_id__voucher_number__istartswith=name)
                print(debitnote_list)

            if  start_date and end_date:   

                debitnote_list             = debitnote_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                debitnote_list             = debitnote_list.filter(date__gte=start_date)

            elif end_date:
                debitnote_list             = debitnote_list.filter(date__lte=end_date)
                            
        #Download Section 
        if 'download' in data:
            
            if 'debitnote_list' in request.session and  json.loads(request.session['debitnote_list']):
                responce=download(request.session['debitnote_list'])
                return responce
            
            
        #Session set for query result for excel based on last search 
        request.session['debitnote_list']=json.dumps(list(debitnote_list.values('order_id__order_number', 'branch_id__name', 'voucher_type_id__name','voucher_number_id' ,'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)
        debitnote_list                   =list(debitnote_list.values('order_id__order_number','branch_id' ,'branch_id__name','voucher_type_id' ,'voucher_type_id__name','voucher_number_id' ,'exchange_rate','date','due_days','description','total_amount','approved_by','status'))
        
        response                            ={
                                                "success"                       :True,
                                                "debitnote_list"                :debitnote_list,
                                                "start_date"                    :start_date,
                                                "end_date"                      :end_date,
                                                "selected_branch_id"            :selected_branch,
                                                "voucher_number"                :name
                                            }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterGoldenRulePortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        golden_rule_list    = golden_rules.objects.all().order_by('-id')
     
        list_rules  = []

        # filterstart 
        selected_voucher    = int(data.get('selected_voucher_type_id',0))
            
        if selected_voucher:      
            golden_rule_list             = golden_rule_list.filter(voucher_type_id=selected_voucher).order_by('-id')           

        #Download Section 
        if 'download' in data:
            
            if 'golden_rule_list' in request.session and  json.loads(request.session['golden_rule_list']):
                responce    = download(request.session['golden_rule_list'])
                return responce
        
        for data in golden_rule_list:
            ###-- Debit account group ids
            comma_separated_ids = data.debit_account_group_ids
            ids_list            = comma_separated_ids.split(',')
            mapping_objects     = accounting_group_data.objects.filter(id__in=ids_list)

            id_to_name_mapping  = {obj.id: obj.name for obj in mapping_objects}

            types_list          = [id_to_name_mapping[int(id)] for id in ids_list]

            # Join the types into a comma-separated string
            types_string        = ' , '.join(types_list)
            ###-- Debit account group ids

            ###-- Credit account group ids
            credit_comma_separated_ids = data.credit_account_group_ids
            credit_ids_list            = credit_comma_separated_ids.split(',')
            credit_mapping_objects     = accounting_group_data.objects.filter(id__in=credit_ids_list)

            credit_id_to_name_mapping  = {obj.id: obj.name for obj in credit_mapping_objects}

            credit_types_list          = [credit_id_to_name_mapping[int(id)] for id in credit_ids_list]

            # Join the types into a comma-separated string
            credit_types_string        = ' , '.join(credit_types_list)
            ###-- Credit account group ids

            list_rules.append({
                'id'                        : data.id,
                'voucher_type_id'           : data.voucher_type_id.id,
                'debit_accounting_groups'   : types_string,
                'credit_accounting_groups'  : credit_types_string,
            })

        print(list_rules)

        request.session['golden_rule_list']=json.dumps(list_rules, cls=DjangoJSONEncoder)
        
        response                            ={
                                                "success"                       :True,
                                                "list_rules"                    :list_rules,
                                                "selected_voucher_type_id"      :selected_voucher
                                            }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)





@api_view(['POST'])
def filterJournalUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        journal_list    = invoice_data.objects.all().filter(entry_type='Journal',invoice_id=None).order_by('-id')

        

        start_date                  = data.get('start','')
        end_date                    = data.get('end','')
        name                        = data.get('name','')
        selected_branch             = int(data.get('selected_branch',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                journal_list             = journal_list.filter(branch_id=selected_branch)
            
            if name:
                journal_list             = journal_list.filter(voucher_number_id__voucher_number__istartswith=name)
                print(journal_list)

            if  start_date and end_date:   

                journal_list             = journal_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                journal_list             = journal_list.filter(date__gte=start_date)

            elif end_date:
                journal_list             = journal_list.filter(date__lte=end_date)
                               
        #Download Section 
        if 'download' in data:
            
            if 'journal_list' in request.session and json.loads(request.session['journal_list']):
                responce=download(request.session['journal_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['journal_list']=json.dumps(list(journal_list.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

        journal_list                 =list(journal_list.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status'))
        response                            ={
                                                "success"                       :True,
                                                "journal_list"                  :journal_list,
                                                "start_date"                    :start_date,
                                                "end_date"                      :end_date,
                                                "selected_branch_id"            :selected_branch,
                                                "voucher_number"                :name
                                            }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)



@api_view(['POST'])
def filterContraUserPortal(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
       
        contra_list    = invoice_data.objects.all().filter(entry_type='Contra',invoice_id=None).order_by('-id')

        

        start_date                  = data.get('start','')
        end_date                    = data.get('end','')
        name                        = data.get('name','')
        selected_branch             = int(data.get('selected_branch',0)) 
        
        if selected_branch or name or start_date or end_date:                         
            if selected_branch:     
                contra_list             = contra_list.filter(branch_id=selected_branch)
            
            if name:
                contra_list             = contra_list.filter(voucher_number_id__voucher_number__istartswith=name)

            if  start_date and end_date:   

                contra_list             = contra_list.filter(date__range=(start_date,end_date))
                        
            elif start_date:    
                contra_list             = contra_list.filter(date__gte=start_date)

            elif end_date:
                contra_list             = contra_list.filter(date__lte=end_date)
                               
        #Download Section 
        if 'download' in data:
            
            if 'contra_list' in request.session and json.loads(request.session['contra_list']):
                responce=download(request.session['contra_list'])
                return responce
            
            
        #Session set for query result for excel based on last search    
        request.session['contra_list']=json.dumps(list(contra_list.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status')), cls=DjangoJSONEncoder)

        contra_list                 =list(contra_list.values('voucher_number_id__voucher_number', 'branch_id__name', 'voucher_type_id__name', 'exchange_rate','date','due_days','description','total_amount','approved_by','status'))
        
        response                            ={
                                                "success"                       :True,
                                                "contra_list"                   :contra_list,
                                                "start_date"                    :start_date,
                                                "end_date"                      :end_date,
                                                "selected_branch_id"            :selected_branch,
                                                "voucher_number"                :name
                                            }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }

    return Response(response)

# filter api end





# reportsss



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_stock_summary(request):
    if request.session.has_key('userId'):
        user_id         = request.session.get('userId')
        user_details        = user_data.objects.get(id=user_id)
        list_entity         = entity_data.objects.all()
        list_branch         = branch_data.objects.all()

        user_entity         = user_details.entity_id
        if user_entity:
            user_entities   = user_details.entity_id.split(',')
            
            list_entity = list_entity.filter(pk__in=user_entities)
           
            enitity_pks = list(list_entity.values_list('pk',flat=True))
            list_branch = branch_data.objects.filter(entity_id__in=enitity_pks)
        
        user_branch         = user_details.branch_id
        if user_branch:
            user_branches   = user_details.branch_id.split(',')
            
            list_branch     = list_branch.filter(pk__in=user_branches)
        
        branch_filter   = list_branch.values('pk','name')  
        branch_pks      = list(list_branch.values_list('pk', flat=True))
       
        get_data        = []
        product_list    = product_data.objects.filter(branch_id__in=branch_pks)
        
        data_to_display = []
        products_filter = product_list.values('pk','name')
        search_product  = 0
        search_branch   = 0

        if 'download' in request.POST:
            
            responce        = downloadexcel("Stock Balance",request.session['headings'],request.session['data_to_display'])
            return responce
        
        
        if 'search' in request.POST:
            search_product  = int(request.POST.get('search_product',0))
            search_branch   = int(request.POST.get('search_branch',0))
            print(search_product)
        else:
            search_product  = int(request.GET.get('search_product',0))
            search_branch   = int(request.GET.get('search_branch',0))

        if search_product:
            product_list = product_list.filter(pk=search_product)
        if search_branch:
            product_list = product_list.filter(branch_id=search_branch) 

        print(product_list)
        
        headings        = ['Product Name','Sale Price','Purchase Price','Stock Quantity']
        for product in product_list:
           
            data_to_display_child       = []
            sum_credit_product_quantity = 0
            sum_debit_product_quantity  = 0  
            sum_credit_product_amount   = 0
            sum_debit_product_amount    = 0
            avg_sale_price              = 0
            avg_purchase_price          = 0
            sum_credit_product          = 0
            sum_debit_product           = 0
            csum_free_quantity          = 0
            dsum_free_quantity          = 0
            balance_quantity            = 0

            # avg sale and purchase
            
            # credit_product      = order_product_data.objects.filter(product_id=product.id,latest=1,entry_type="Credit",status='Approved')
            # print(credit_product)
            # if credit_product:
            #     sum_credit_product_quantity     = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            #     sum_credit_product_amount       = credit_product.aggregate(total_credit_amount=Sum('amount'))['total_credit_amount']
            #     print(sum_credit_product_quantity,sum_credit_product_amount)
            #     print("@@@@@@@22")
            #     print(sum_credit_product_amount)
            #     if sum_credit_product_amount:
            #         avg_purchase_price              = int(sum_credit_product_amount)/int(sum_credit_product_quantity)

            # debit_product       = order_product_data.objects.filter(product_id=product.id,latest=1,entry_type="Debit",status='Approved')
            # if debit_product:
            #     sum_debit_product_quantity      = debit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            #     sum_debit_product_amount        = debit_product.aggregate(total_debit_amount=Sum('amount'))['total_debit_amount']
                

            #     if sum_debit_product_amount:

            #         avg_sale_price                  = int(sum_debit_product_amount)/int(sum_debit_product_quantity)

            get_invoices    = order_product_data.objects.filter(product_id=product.id,latest=1,status='Approved')
                
            credit_product      = get_invoices.filter(entry_type="Credit")
            
            if credit_product:
                sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                csum_free_quantity              = credit_product.aggregate(total_free=Sum('free'))['total_free']

            debit_product       = get_invoices.filter(entry_type="Debit")
            
            if debit_product:
                sum_debit_product               = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
                dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']
                    

            balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)

            data_to_display_child.extend([product.name,product.sales_rate,product.purchase_rate,balance_quantity])
            data_to_display.extend([data_to_display_child])

        request.session['data_to_display'] = data_to_display
        request.session['headings']         = headings

        page_number     = request.GET.get("page",1)

        paginator           = Paginator(data_to_display, 10)
        data_to_display     = paginator.get_page(page_number)

        
        return render(request,'users/pages/report_stock_summary.html',{'headings':headings,'get_data':data_to_display,'products_filter':products_filter,'search_product':search_product,'branch_filter':branch_filter,'search_branch':search_branch})
    else:
        return redirect('user-login')


# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_lowstock_summary(request):
    if request.session.has_key('userId'):
        user_id         = request.session.get('userId')
        user_details        = user_data.objects.get(id=user_id)
        list_entity         = entity_data.objects.all()
        list_branch         = branch_data.objects.all()

        user_entity         = user_details.entity_id
        if user_entity:
            user_entities   = user_details.entity_id.split(',')
            
            list_entity = list_entity.filter(pk__in=user_entities)
           
            enitity_pks = list(list_entity.values_list('pk',flat=True))
            list_branch = branch_data.objects.filter(entity_id__in=enitity_pks)
        
        user_branch         = user_details.branch_id
        if user_branch:
            user_branches   = user_details.branch_id.split(',')
            
            list_branch     = list_branch.filter(pk__in=user_branches)
        
        branch_filter   = list_branch.values('pk','name')  
        branch_pks      = list(list_branch.values_list('pk', flat=True))
       
        get_data        = []
        product_list    = product_data.objects.filter(branch_id__in=branch_pks)
        
        data_to_display = []
        products_filter = product_list.values('pk','name')
        search_product  = 0
        search_branch   = 0

        if 'download' in request.POST:
            
            responce        = downloadexcel("Low Stock Report",request.session['headings'],request.session['data_to_display'])
            return responce
        
        
        if 'search' in request.POST:
            search_product  = int(request.POST.get('search_product',0))
            search_branch   = int(request.POST.get('search_branch',0))
            print(search_product)
        else:
            search_product  = int(request.GET.get('search_product',0))
            search_branch   = int(request.GET.get('search_branch',0))

        if search_product:
            product_list = product_list.filter(pk=search_product)
        if search_branch:
            product_list = product_list.filter(branch_id=search_branch) 

        print(product_list)
        
        headings        = ['Product Code','Product Name','Product Group','Unit','Minimum Stock','Stock Quantity']
        for product in product_list:
           
            data_to_display_child       = []
            sum_credit_product_quantity = 0
            sum_debit_product_quantity  = 0  
            sum_credit_product_amount   = 0
            sum_debit_product_amount    = 0
            avg_sale_price              = 0
            avg_purchase_price          = 0
            sum_credit_product          = 0
            sum_debit_product           = 0
            csum_free_quantity          = 0
            dsum_free_quantity          = 0
            balance_quantity            = 0

            # avg sale and purchase
            
            # credit_product      = order_product_data.objects.filter(product_id=product.id,latest=1,entry_type="Credit",status='Approved')
            # print(credit_product)
            # if credit_product:
            #     sum_credit_product_quantity     = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            #     sum_credit_product_amount       = credit_product.aggregate(total_credit_amount=Sum('amount'))['total_credit_amount']
            #     print(sum_credit_product_quantity,sum_credit_product_amount)
            #     print("@@@@@@@22")
            #     print(sum_credit_product_amount)
            #     if sum_credit_product_amount:
            #         avg_purchase_price              = int(sum_credit_product_amount)/int(sum_credit_product_quantity)

            # debit_product       = order_product_data.objects.filter(product_id=product.id,latest=1,entry_type="Debit",status='Approved')
            # if debit_product:
            #     sum_debit_product_quantity      = debit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            #     sum_debit_product_amount        = debit_product.aggregate(total_debit_amount=Sum('amount'))['total_debit_amount']
                

            #     if sum_debit_product_amount:

            #         avg_sale_price                  = int(sum_debit_product_amount)/int(sum_debit_product_quantity)

            get_invoices    = order_product_data.objects.filter(product_id=product.id,latest=1,status='Approved')
                
            credit_product      = get_invoices.filter(entry_type="Credit")
            
            if credit_product:
                sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                csum_free_quantity              = credit_product.aggregate(total_free=Sum('free'))['total_free']

            debit_product       = get_invoices.filter(entry_type="Debit")
            
            if debit_product:
                sum_debit_product               = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
                dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']
                    

            balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)
            if not product.minimum_stock:
                minimum = 0
            else:
                minimum = int(product.minimum_stock)
            if balance_quantity<=minimum:
                data_to_display_child.extend([product.product_code,product.name,'Nil' if not product.product_group_id else product.product_group_id.name,"Nil" if not product.unit_id  else product.unit_id.unit,product.minimum_stock,balance_quantity])
                data_to_display.extend([data_to_display_child])

        request.session['data_to_display'] = data_to_display
        request.session['headings']         = headings

        page_number     = request.GET.get("page",1)

        paginator           = Paginator(data_to_display, 10)
        data_to_display     = paginator.get_page(page_number)

        
        return render(request,'users/pages/report_lowstock_summary.html',{'headings':headings,'get_data':data_to_display,'products_filter':products_filter,'search_product':search_product,'branch_filter':branch_filter,'search_branch':search_branch})
    else:
        return redirect('user-login')



# @cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_stock_summary_category(request):
    if request.session.has_key('userId'):
        user_id         = request.session.get('userId')
        user_details        = user_data.objects.get(id=user_id)
        list_entity         = entity_data.objects.all()
        list_branch         = branch_data.objects.all()

        user_entity         = user_details.entity_id
        if user_entity:
            user_entities   = user_details.entity_id.split(',')
            
            list_entity     = list_entity.filter(pk__in=user_entities)
           
            enitity_pks     = list(list_entity.values_list('pk',flat=True))
            list_branch     = branch_data.objects.filter(entity_id__in=enitity_pks)
        
        user_branch         = user_details.branch_id
        if user_branch:
            user_branches   = user_details.branch_id.split(',')
            
            list_branch     = list_branch.filter(pk__in=user_branches)
        
        branch_filter       = list_branch.values('pk','name')  
        branch_pks          = list(list_branch.values_list('pk', flat=True))
       
        get_data            = []
        product_group_list  = product_group_data.objects.all()
        
        data_to_display = []
        products_group_filter = product_group_list.values('pk','name')
        

        if 'download' in request.POST:
            
            responce        = downloadexcel("Stock Balance",request.session['headings'],request.session['data_to_display'])
            return responce
        
        
        if 'search' in request.POST:
            search_product_group  = int(request.POST.get('search_product_group',0))
            search_branch           = int(request.POST.get('search_branch',0))
        else:
            search_product_group  = int(request.GET.get('search_product_group',0))
            search_branch   = int(request.GET.get('search_branch',0))

        
        if search_product_group:
            product_group_list  = product_group_list.filter(pk=search_product_group)
        
        
        headings        = ['Product Group','Stock Quantity']
        for product_group in product_group_list:
           
            data_to_display_child       = []
            sum_credit_product_quantity = 0
            sum_debit_product_quantity  = 0  
            sum_credit_product_amount   = 0
            sum_debit_product_amount    = 0
            avg_sale_price              = 0
            avg_purchase_price          = 0
            sum_credit_product          = 0
            sum_debit_product           = 0
            csum_free_quantity          = 0
            dsum_free_quantity          = 0
            balance_quantity            = 0

            # avg sale and purchase
            
            # credit_product      = order_product_data.objects.filter(product_id=product.id,latest=1,entry_type="Credit",status='Approved')
            # print(credit_product)
            # if credit_product:
            #     sum_credit_product_quantity     = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            #     sum_credit_product_amount       = credit_product.aggregate(total_credit_amount=Sum('amount'))['total_credit_amount']
            #     print(sum_credit_product_quantity,sum_credit_product_amount)
            #     print("@@@@@@@22")
            #     print(sum_credit_product_amount)
            #     if sum_credit_product_amount:
            #         avg_purchase_price              = int(sum_credit_product_amount)/int(sum_credit_product_quantity)

            # debit_product       = order_product_data.objects.filter(product_id=product.id,latest=1,entry_type="Debit",status='Approved')
            # if debit_product:
            #     sum_debit_product_quantity      = debit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            #     sum_debit_product_amount        = debit_product.aggregate(total_debit_amount=Sum('amount'))['total_debit_amount']
                

            #     if sum_debit_product_amount:

            #         avg_sale_price                  = int(sum_debit_product_amount)/int(sum_debit_product_quantity)

            get_invoices    = order_product_data.objects.filter(product_group=product_group.id,latest=1,status='Approved')
            if search_branch:
                get_invoices    = get_invoices.filter(branch_id=search_branch)

            credit_product      = get_invoices.filter(entry_type="Credit")
            
            if credit_product:
                sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
                csum_free_quantity              = credit_product.aggregate(total_free=Sum('free'))['total_free']

            debit_product       = get_invoices.filter(entry_type="Debit")
            
            if debit_product:
                sum_debit_product               = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
                dsum_free_quantity              = debit_product.aggregate(total_free=Sum('free'))['total_free']
                    

            balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)

            data_to_display_child.extend([product_group.name,balance_quantity])
            data_to_display.extend([data_to_display_child])

        request.session['data_to_display'] = data_to_display
        request.session['headings']         = headings

        page_number     = request.GET.get("page",1)

        paginator           = Paginator(data_to_display, 10)
        data_to_display     = paginator.get_page(page_number)

        
        return render(request,'users/pages/report_stock_summary_category.html',{'headings':headings,'get_data':data_to_display,'products_group_filter':products_group_filter,'search_product_group':search_product_group,'branch_filter':branch_filter,'search_branch':search_branch})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_daybook(request):
    if request.session.has_key('userId'):
       

        return render(request,'users/pages/report_daybook.html',{'get_data':'just'})
    else:
        return redirect('user-login')




@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_trail_balance(request):
    if request.session.has_key('userId'):
        get_entity = entity_data.objects.all()
        user_id         = request.session.get('userId')
        get_user_data   = user_data.objects.get(id=user_id)

        return render(request,'users/pages/report_trail_balance.html',{'get_data':'just','get_entity':get_entity})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_balance_sheet(request):
    if request.session.has_key('userId'):
       

        return render(request,'users/pages/report_balance_sheet.html',{'get_data':'just'})
    else:
        return redirect('user-login')




def AccountLedger_balance(ledger_id,start_date,end_date):
           
        ledger_id               = ledger_id
        getledger               = accounting_ledger_data.objects.get(pk=ledger_id)
        branch_id               = getledger.branch_id 
        end_date                = end_date
        start_date              = start_date
        invoice_data_list       = invoice_data.objects.filter(latest=1,status="Approved")
        

        list_invoice_data   = invoice_data_list.filter(
                (Q(debit_ledger_id=ledger_id) | Q(credit_ledger_id=ledger_id))
            )
        print(list_invoice_data)

        if start_date or end_date:
            pass

        else:
            financial    = financial_year_data.objects.filter(active=1,branch_id=branch_id).order_by('-id')
            if financial:
                start_date  = financial[0].from_date
                to_data     = financial[0].to_date

        if  start_date and end_date:   
                list_invoice_data                = list_invoice_data.filter(date__range=(start_date,end_date))
                        
        elif start_date:   
            list_invoice_data                = list_invoice_data.filter(date__gte=start_date)

        elif end_date:
            list_invoice_data                = list_invoice_data.filter(date__lte=end_date)
   
       
        if getledger.opening_balance:
            opening_balance     = float(getledger.opening_balance)
        else:
            opening_balance     = 0.0

        balance     = opening_balance
       
        for row in list_invoice_data:
            amount  = row.total_amount
            if not amount:
                amount  = 0

            row_debit_ledger_id = None if not row.debit_ledger_id else row.debit_ledger_id.id
            row_credit_ledger_id = None if not row.credit_ledger_id else row.credit_ledger_id.id
            
            if row_debit_ledger_id==ledger_id:
                
                if getledger.entry_type=='Dr':
                    balance = balance+ float(amount)
                else:
                    balance = balance - float(amount)      
    
            else:
                if row_debit_ledger_id and row.is_child:
                    pass 
                elif getledger.entry_type=='Cr':
                    balance = balance+ float(amount)
                else:
                    balance = balance - float(amount)  
            

   
        return balance




def plgetProduct_balance(product_id,start_date,end_date,batch_id):
          
    product_id                       = product_id
    start_date                       = start_date
    end_date                         = end_date
    batch_id                         = batch_id
    
    get_product_transactions        = order_product_data.objects.filter(product_id=product_id,batch_id=batch_id,latest=1,status='Approved')

    if  start_date and end_date:   
            get_product_transactions            = get_product_transactions.filter(date__range=(start_date,end_date))
                    
    elif start_date:   
        get_product_transactions                = get_product_transactions.filter(date__gt=start_date)

    elif end_date:
        get_product_transactions                = get_product_transactions.filter(date__lt=end_date)



    sum_credit_product_quantity = 0
    sum_debit_product_quantity  = 0  
    sum_credit_product_amount   = 0
    csum_free_quantity          = 0
    dsum_free_quantity          = 0
    avg_purchase_price          = 0
    credit_product              = get_product_transactions.filter(entry_type="Credit")
    if credit_product:
        sum_credit_product_quantity      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
        csum_free_quantity               = credit_product.aggregate(total_free=Sum('free'))['total_free']
        sum_credit_product_amount        = credit_product.aggregate(total_credit_amount=Sum('amount'))['total_credit_amount']
        
        if sum_credit_product_amount:
            avg_purchase_price              = float(sum_credit_product_amount)/float(sum_credit_product_quantity)
       
        
    debit_product               = get_product_transactions.filter(entry_type="Debit")
    if debit_product:
        sum_debit_product_quantity   = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
        dsum_free_quantity      = debit_product.aggregate(total_free=Sum('free'))['total_free']    
        
    print(sum_debit_product_quantity)
    balance_quantity    = (sum_credit_product_quantity+csum_free_quantity) - (sum_debit_product_quantity+dsum_free_quantity)
    current_stock_value = balance_quantity*avg_purchase_price

    purchase_amount     = sum_credit_product_amount
    return (current_stock_value,purchase_amount)


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_profit_andloss(request):
    if request.session.has_key('userId'):
        user_id         = request.session.get('userId')
        user_details        = user_data.objects.get(id=user_id)
        list_entity         = entity_data.objects.all()
        list_branch         = branch_data.objects.all()

        user_entity         = user_details.entity_id
        if user_entity:
            user_entities   = user_details.entity_id.split(',')
            
            list_entity     = list_entity.filter(pk__in=user_entities)
           
            enitity_pks     = list(list_entity.values_list('pk',flat=True))
            list_branch     = branch_data.objects.filter(entity_id__in=enitity_pks)
        
        user_branch         = user_details.branch_id
        
        if user_branch:
            user_branches   = user_details.branch_id.split(',')
            
            list_branch     = list_branch.filter(pk__in=user_branches)
            
        
        branch_filter       = list_branch.values('pk','name')  
        branch_pks          = list(list_branch.values_list('pk', flat=True))
        parent_account      = []
        total_income        = 0
        expense_parent_account =[]
        total_expense = 0
        search_branch = 0

        if 'search' in request.POST:
            search_branch   = request.POST.get('search_branch')
            from_date       = request.POST.get('from_date') 
            to_date         = request.POST.get('to_date')

        else:
            from_date       = ''
            to_date         = ''
            search_branch   = branch_pks[0]
            financial    = financial_year_data.objects.filter(active=1,branch_id=search_branch).order_by('-id')
            if financial:
                
                from_date  = financial[0].from_date
                to_date     = financial[0].to_date
        
            

        if search_branch:
          
            get_acc_group_income   = accounting_group_data.objects.filter(Q(nature="Income") & Q(under_group__isnull=True) & Q(branch_id=search_branch))
            
            total_income = 0
            if get_acc_group_income:
                
                parent_account  = list(get_acc_group_income.values('id','name'))
                print(parent_account)
                
                
                parent_counter = 0
                
                parent_balance      = 0
                for parent_account_group in get_acc_group_income:
                    
                    parent_account[parent_counter]['amount'] = 0
                    child_acc   = accounting_group_data.objects.filter(under_group=parent_account_group.id)
                    if child_acc: 
                        parent_account[parent_counter]['childs']=list(child_acc.values('id','name'))
                             
                        child_counter= 0
                        for child in child_acc:
                            acc_ledgers   = accounting_ledger_data.objects.filter(accounting_group_id=child.id)
                            parent_account[parent_counter]['childs'][child_counter]['amount']=0
                            if acc_ledgers:
                                        
                                parent_account[parent_counter]['childs'][child_counter]['accledgers']= list(acc_ledgers.values('id','name'))
                                
                                ledger_counter            =0 
                                total_of_child_acc_ledger = 0
                                for ledger in acc_ledgers:
                                    balance = AccountLedger_balance(ledger.id,from_date,to_date)
                                        
                                    total_income = float(total_income)+float(balance)
                      
                                    parent_account[parent_counter]['childs'][child_counter]['accledgers'][ledger_counter]['amount']=balance
                                    total_of_child_acc_ledger = float(total_of_child_acc_ledger)+float(balance)
                                    

                                parent_account[parent_counter]['childs'][child_counter]['amount']=total_of_child_acc_ledger
                                parent_balance = float(parent_balance)+float(total_of_child_acc_ledger)
                                
                            child_counter= child_counter+1

                    parent_account[parent_counter]['amount']=parent_balance
                    parent_counter= parent_counter+1
                                
            
        # expense
       
            get_acc_group_expense   = accounting_group_data.objects.filter(Q(nature="Expenses") & Q(under_group__isnull=True))
            
            if get_acc_group_expense:
                
                expense_parent_account  = list(get_acc_group_expense.values('id','name'))
                print(expense_parent_account)
                
                
                parent_counter = 0
                
                parent_balance      = 0
                for expense_parent_account_group in get_acc_group_expense:
                    
                    expense_parent_account[parent_counter]['amount'] = 0
                    child_acc   = accounting_group_data.objects.filter(under_group=expense_parent_account_group.id)
                    if child_acc:
                        
                        expense_parent_account[parent_counter]['childs']=list(child_acc.values('id','name'))
                                
                        child_counter= 0
                        for child in child_acc:
                            acc_ledgers   = accounting_ledger_data.objects.filter(accounting_group_id=child.id)
                            expense_parent_account[parent_counter]['childs'][child_counter]['amount']=0
                            if acc_ledgers:
                                        
                                expense_parent_account[parent_counter]['childs'][child_counter]['accledgers']= list(acc_ledgers.values('id','name'))
                                
                                ledger_counter            =0 
                                total_of_child_acc_ledger = 0
                                for ledger in acc_ledgers:
                                    balance = AccountLedger_balance(ledger.id,from_date,to_date)
                                        
                                    total_expense = float(total_expense)+float(balance)
                                    print(balance)
                                    expense_parent_account[parent_counter]['childs'][child_counter]['accledgers'][ledger_counter]['amount']=balance
                                    total_of_child_acc_ledger = float(total_of_child_acc_ledger)+float(balance)
                                    

                                expense_parent_account[parent_counter]['childs'][child_counter]['amount']=total_of_child_acc_ledger
                                parent_balance = float(parent_balance)+float(total_of_child_acc_ledger)
                                
                            child_counter= child_counter+1
                    
                    expense_parent_account[parent_counter]['amount']=parent_balance
                    parent_counter= parent_counter+1
        



        income_before_stock = total_income - total_expense
        # stock value

        product_list    = product_data.objects.filter(branch_id=search_branch)
        # opening stcok balance
        
        opening_stock   = 0

        # stock value = balance(purchase-sell) * avg_purchase
        for product in product_list:
            batch_list                          = batch_data.objects.filter(product_id=product.id)
            if batch_list:
                for batch in batch_list:
                    stock_value,purchase_amount         = plgetProduct_balance(product.id,'',from_date,batch.id)
                    opening_stock                       = float(opening_stock) + float(stock_value)
                

        # current stock balance  
        purchase_total      = 0
        closing_stock        = 0
        product_list        = [6]
        for product in product_list: 
            batch_list                          = batch_data.objects.filter(product_id=product) 
            if batch_list:
                for batch in batch_list: 
                    stock_value,purchase_amount         = plgetProduct_balance(product,from_date,to_date,batch.id)
                    closing_stock                       = float(closing_stock) + float(stock_value)
                    purchase_total                      = purchase_total+purchase_amount


        print("opening :",opening_stock)
        print("purchase_total : ",purchase_total)
        print("closing_stock : ",closing_stock)
        gross_profit    = opening_stock + purchase_total - closing_stock

        cogs    = opening_stock+purchase_total-closing_stock

        gross_profit    = income_before_stock - cogs
        print(parent_account)
        

        return render(request,'users/pages/report_profit_andloss.html',{'income_accounts':parent_account,'expense_accounts':expense_parent_account,'total_income':total_income,'total_expense':total_expense,'search_branch':search_branch,'branch_filter':branch_filter,'from_date':from_date,'to_date':to_date,'income_before_stock':income_before_stock,'opening_stock':opening_stock,'closing_stock':closing_stock,'cogs':cogs,'gross_profit':gross_profit})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_account_group(request):
    if request.session.has_key('userId'):
       

        return render(request,'users/pages/report_account_group.html',{'get_data':'just'})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_account_ledger(request):
    if request.session.has_key('userId'):
        user_id         = request.session.get('userId')
        user_details        = user_data.objects.get(id=user_id)
        list_entity         = entity_data.objects.all()
        list_branch         = branch_data.objects.all()

        user_entity         = user_details.entity_id
        if user_entity:
            user_entities   = user_details.entity_id.split(',')
            
            list_entity     = list_entity.filter(pk__in=user_entities)
           
            enitity_pks     = list(list_entity.values_list('pk',flat=True))
            list_branch     = branch_data.objects.filter(entity_id__in=enitity_pks)
        
        user_branch         = user_details.branch_id
        
        if user_branch:
            user_branches   = user_details.branch_id.split(',')
            
            list_branch     = list_branch.filter(pk__in=user_branches)
            
        
        branch_filter       = list_branch.values('pk','name')  
        branch_pks          = list(list_branch.values_list('pk', flat=True))
        
        get_data            = []
        account_ledger_list = accounting_ledger_data.objects.filter(branch_id__in=branch_pks)
        
        data_to_display     = []
        account_ledger_filter = account_ledger_list.values('pk','name')
        

        if 'download' in request.POST:
            if request.session.get('report_name'):
                responce        = downloadexcel(request.session['report_name'],request.session['headings'],request.session['data_to_display'])
                return responce
        
        
        if 'search' in request.POST:
            search_acc_ledger       = int(request.POST.get('search_acc_ledger',0))
            search_branch           = int(request.POST.get('search_branch',0))
        else:
            search_acc_ledger       = int(request.GET.get('search_acc_ledger',0))
            search_branch   = int(request.GET.get('search_branch',0))

        
        if search_branch:
            account_ledger_list  = account_ledger_list.filter(pk=search_branch)
            

        
        
        headings        = ['Debit Account','Credit Account','Transaction Details','Reference','Amount','Balance']
        
        if search_acc_ledger:
            get_account_ledger  = accounting_ledger_data.objects.get(pk=search_acc_ledger)
            request.session['report_name']= get_account_ledger.name +"Transaction Report"
            acc_type            = get_account_ledger.entry_type
            opening_balance     = get_account_ledger.opening_balance
            if not opening_balance:
                opening_balance = 0.0
            
            data_to_display.extend([['','','','','opening balance',opening_balance]])
            print(data_to_display)
            invoice_data_list   = invoice_data.objects.filter(latest=1,status="Approved")
            list_invoice_data   = invoice_data_list.filter(
                (Q(debit_ledger_id=search_acc_ledger) | Q(credit_ledger_id=search_acc_ledger))
                )
            balance     = float(opening_balance)
            for row in list_invoice_data:
                print(row)
                data_to_display_child = []
                description = row.description
                reference       = row.voucher_number_appended
                debit_account   = row.debit_ledger_id.name
                credit_account  = row.credit_ledger_id.name
                amount          = row.total_amount
                
                if not amount:
                    amount = 0

                if row.debit_ledger_id==search_acc_ledger:
                    
                    if acc_type=='Dr':
                        balance = balance+ float(amount)
                    else:
                        balance = balance - float(amount)      
     
                else:
                    if acc_type=='Cr':
                        balance = balance+ float(amount)
                    else:
                        balance = balance - float(amount)  



                data_to_display_child.extend([debit_account,credit_account,description,reference,amount,balance])
                data_to_display.extend([data_to_display_child])


        print(data_to_display)
        print("heyyy")

        request.session['data_to_display'] = data_to_display
        request.session['headings']         = headings

        page_number     = request.GET.get("page",1)

        paginator           = Paginator(data_to_display, 10)
        data_to_display     = paginator.get_page(page_number)

       

        return render(request,'users/pages/report_account_ledger.html',{'headings':headings,'get_data':data_to_display,'account_ledger_filter':account_ledger_filter,'search_acc_ledger':search_acc_ledger,'branch_filter':branch_filter,'search_branch':search_branch})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_gstr1(request):
    if request.session.has_key('userId'):
       

        return render(request,'users/pages/report_gstr1.html',{'get_data':'just'})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_gstr2(request):
    if request.session.has_key('userId'):
       

        return render(request,'users/pages/report_gstr2.html',{'get_data':'just'})
    else:
        return redirect('user-login')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_gstn3(request):
    if request.session.has_key('userId'):
       

        return render(request,'users/pages/report_gstn3.html',{'get_data':'just'})
    else:
        return redirect('user-login')



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def report_gstn9(request):
    if request.session.has_key('userId'):
       
        return render(request,'users/pages/report_gstn9.html',{'get_data':'just'})
    else:
        return redirect('user-login')



from django.db import connection
from django.apps import apps


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def get_branch_details(request):
    branch_id    = request.POST['branch_id']
    
    branch     = branch_data.objects.get(pk=branch_id)

    address=''
    address =str(branch.address)+' '+str(branch.city)

    return JsonResponse({'address': address})







@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def get_AccountLedger_balance(request):
           
        ledger_id               = request.POST.get('ledger_id') 
        getledger               = accounting_ledger_data.objects.get(pk=ledger_id)
        branch_id               = getledger.branch_id 
        end_date                = request.POST.get('end','')
        start_date              = request.POST.get('start','')
        invoice_data_list       = invoice_data.objects.filter(latest=1,status="Approved")
        

        list_invoice_data   = invoice_data_list.filter(
                (Q(debit_ledger_id=ledger_id) | Q(credit_ledger_id=ledger_id))
            )
        print(list_invoice_data)

        if start_date or end_date:
            pass

        else:
            financial    = financial_year_data.objects.filter(active=1,branch_id=branch_id).order_by('-id')
            if financial:
                start_date  = financial[0].from_date
                to_data     = financial[0].to_date

        if  start_date and end_date:   
                list_invoice_data                = list_invoice_data.filter(date__range=(start_date,end_date))
                        
        elif start_date:   
            list_invoice_data                = list_invoice_data.filter(date__gte=start_date)

        elif end_date:
            list_invoice_data                = list_invoice_data.filter(date__lte=end_date)

        print(list_invoice_data)
       
        if getledger.opening_balance:
            opening_balance     = float(getledger.opening_balance)
        else:
            opening_balance     = 0

        balance     = opening_balance
        for row in list_invoice_data:
            amount  = row.total_amount
            if not amount:
                amount  = 0

            row_debit_ledger_id = None if not row.debit_ledger_id else row.debit_ledger_id.id
            row_credit_ledger_id = None if not row.credit_ledger_id else row.credit_ledger_id.id
            
            if row_debit_ledger_id==ledger_id:
                
                if getledger.entry_type=='Dr':
                    balance = balance+ float(amount)
                else:
                    balance = balance - float(amount)      
    
            else:
                if row_debit_ledger_id and row.is_child:
                    pass 
                elif getledger.entry_type=='Cr':
                    balance = balance+ float(amount)
                else:
                    balance = balance - float(amount)  
            

   
        return JsonResponse({'balance':balance})




@api_view(['POST'])
def getProduct_balance(request):
         
    data            = request.data
    user_id         = data.get('user_id')
    app_token       = data.get('app_token')
    get_token       = app_auth_token_tb.objects.first()

    if user_id and app_token == get_token.token:
        product_id                       = data.get('product_id')
        get_product_data                 = product_data.objects.get(pk=product_id)
        start_date                       = data.get('start_date','')
        end_date                         = data.get('end_date','')
        
        get_product_transactions        = order_product_data.objects.filter(product_id=product_id,latest=1,status='Approved')

        if  start_date and end_date:   
                get_product_transactions            = get_product_transactions.filter(date__range=(start_date,end_date))
                        
        elif start_date:   
            get_product_transactions                = get_product_transactions.filter(date__gte=start_date)

        elif end_date:
            get_product_transactions                = get_product_transactions.filter(date__lte=end_date)

        sum_credit_product_quantity = 0
        sum_debit_product_quantity  = 0  
        credit_product      = get_product_transactions.filter(entry_type="Credit")
        if credit_product:
            sum_credit_product      = credit_product.aggregate(total_credit_quantity=Sum('quantity'))['total_credit_quantity']
            csum_free_quantity      = credit_product.aggregate(total_free=Sum('free'))['total_free']
        debit_product       = order_product_data.objects.filter(entry_type="Debit")
        if debit_product:
            sum_debit_product       = debit_product.aggregate(total_debit_quantity=Sum('quantity'))['total_debit_quantity']  
            dsum_free_quantity      = debit_product.aggregate(total_free=Sum('free'))['total_free']    
            
                       
        balance_quantity  = (sum_credit_product+csum_free_quantity) - (sum_debit_product+dsum_free_quantity)

        
        response                        ={
                                            "success"               :True,
                                            "balance_quantity"      : balance_quantity
                                        }
        
    else:
            response    =   {
                                "success"   : False,
                                "message"   : "Invalid Token Or User",
                            }
    return Response(response)



def listcustom_reports(request):
        

        list_custom_reports = custom_reports.objects.all()
        
        return render(request,'users/pages/list_custom_reports.html',{'custom_reports':list_custom_reports})
   


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def addnewcustom_report(request):
        
        if 'submit' in request.POST:
            report_name                 = request.POST.get('report_name')
            table                       = request.POST.get('table')
            length                      = request.POST.get('length')
            filter_financial_year       = 1 if request.POST.get('filter_financial') else 0
            vtype                       = request.POST.get('vtype')
            filter_voucher_type         = None if not vtype else voucher_type_data.objects.get(pk=vtype)
            filter_branch               = 1 if request.POST.get('filter_branch') else 0
            filter_entity               = 1 if request.POST.get('filter_entity') else 0

            if length:
                new_report  = custom_reports.objects.create(name=report_name,table_name=table,filter_voucher_type=filter_voucher_type,filter_branch=filter_branch,filter_financial_year=filter_financial_year,filter_entity=filter_entity)
                for i in range (int(length)):
                    i               = str(i)
                    add_on_report   = 1 if request.POST.get('add_on_report_'+i) else 0
                    field_name      = request.POST.get('field_name_'+i)
                    label           = request.POST.get('label_'+i)
                    field_type      = request.POST.get('field_type_'+i)
                    model_name      = request.POST.get('model_name_'+i)
                    add_filter      = 1 if request.POST.get('add_filter_'+i) else 0
                    fkfield         = request.POST.get('fields_'+i)
                    filter          = request.POST.get('filter_'+i)
                    apply_sum       =1 if  request.POST.get('sum_'+i) else 0
                    print(filter)
                    add_custom_reports_field    = custom_reports_fields(label=label,
                                                                                field_type  =field_type,
                                                                                field_name  =field_name,
                                                                                model_name  =model_name,
                                                                                fkfield     =fkfield,
                                                                                add_filter  =add_filter,
                                                                                add_on_report=add_on_report,
                                                                                custom_report= new_report,
                                                                                default_filter = filter,
                                                                                apply_sum   =apply_sum
                                                                                )
                    add_custom_reports_field.save()
                return redirect('list-custom-reports')


                

        custom_apps = []
        # get custom apps names 
        for app_config in apps.get_app_configs():
            if not app_config.name.startswith('django.contrib'):
                custom_apps.append(app_config.name)


        # for repeatation remove use set
        custom_tables = set()  # Use a set to store table names temporarily

        with connection.cursor() as cursor:
            cursor.execute("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';")
            for row in cursor.fetchall():
                table_name = row[0]
            
                # Check if the table belongs to any installed app
                for app_name in custom_apps:
                    if table_name.lower().startswith(app_name.lower() + '_'):
                        # Remove custom app name prefix and add to the set
                        table_name_without_prefix = table_name.split('_', 1)[1]
                        custom_tables.add(table_name_without_prefix)

        # Convert the set back to a list for consistent output
        custom_tables_list = list(custom_tables)

        voucher_types   = voucher_type_data.objects.all()
        
        return render(request,'users/pages/add_custom_reports.html',{'custom_tables':custom_tables,'voucher_types':voucher_types})
  



@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def deletecustomreport(request):
    
    get_id                  = request.POST['id']
    get_data                = custom_reports.objects.filter(id=get_id)
    get_data.delete()
    if get_data.delete():
        messages.success(request, 'Successfully Deleted.')
        return redirect('list-custom-reports')
    else:
        messages.error(request, 'Something went to wrong')
        return redirect('list-custom-reports')


@cache_control(no_cache=True,must_revalidate=True,no_store=True)
def updatecustomreport(request):
        
        if request.method=="POST":
            report_name     = request.POST.get('report_name')
            table           = request.POST.get('table')
            length          = request.POST.get('length')
            get_report      = custom_reports.objects.filter(pk=request.GET.get('id'))
            filter_financial_year       = 1 if request.POST.get('filter_financial') else 0
            vtype                       = request.POST.get('vtype')
            filter_voucher_type         = None if not vtype else voucher_type_data.objects.get(pk=vtype)
            filter_branch               = 1 if request.POST.get('filter_branch') else 0
            filter_entity               = 1 if request.POST.get('filter_entity') else 0
            
            print("******")
            print(filter_financial_year)
            if length:
                report      = get_report.update(name=report_name,filter_voucher_type=filter_voucher_type,filter_branch=filter_branch,filter_financial_year=filter_financial_year,filter_entity=filter_entity)
                # get all related custom_reports_fields  to delete
                print(get_report[0].get_fields.all().delete())
                for i in range (1,int(length)+1):
                    i               = str(i)
                    add_on_report   = 1 if request.POST.get('add_on_report_'+i) else 0
                    field_name      = request.POST.get('field_name_'+i)
                    label           = request.POST.get('label_'+i)
                    field_type      = request.POST.get('field_type_'+i)
                    model_name      = request.POST.get('model_name_'+i)
                    add_filter      = 1 if request.POST.get('add_filter_'+i) else 0
                    fkfield         = request.POST.get('fields_'+i)
                    filter          = request.POST.get('filter_'+i)
                    apply_sum       =1 if  request.POST.get('sum_'+i) else 0
                    
                    print(filter)
                    add_custom_reports_field    = custom_reports_fields(label=label,
                                                                                field_type  =field_type,
                                                                                field_name  =field_name,
                                                                                model_name  =model_name,
                                                                                fkfield     =fkfield,
                                                                                add_filter  =add_filter,
                                                                                add_on_report=add_on_report,
                                                                                custom_report= get_report[0],
                                                                                default_filter = filter,
                                                                                apply_sum   =apply_sum
                                                                                )
                    add_custom_reports_field.save()
                return redirect('list-custom-reports')

        else:
            get_id                  = request.GET['id']
            get_data                = custom_reports.objects.get(id=get_id)
            # get all related custom_reports_fields  to display
            fields_list             = list(get_data.get_fields.values())
            # this only conatin already choosen fkfield to display we need to give dropdown to select all fields in html.
            # for that create new [] below and append all columns of foreign key field to display those on dropdown.
            fields_list_to_pass     = []
            for field in fields_list:
                if field['field_type']=='ForeignKey':
                    fk_model_class         = apps.get_model('SpreeApp', field['model_name'])
                    fk_model_class_fields = [
                        field.name for field in fk_model_class._meta.get_fields()
                        if not (isinstance(field, models.ForeignKey) or field.auto_created or field.name == "id")
                    ]                    
                   
                    # add a new key to field dictionary with fieldnames of fk table
                    field['fk_colums']=fk_model_class_fields
                    
                fields_list_to_pass.append(field)
            voucher_types   = voucher_type_data.objects.all()

        return render(request,'users/pages/update_custom_reports.html',{'get_data':get_data,'fields_list':fields_list_to_pass,'len':len(fields_list_to_pass),'voucher_types':voucher_types})
   

from django.utils import timezone


def convert_datetime_to_string(obj):
    if isinstance(obj, timezone.datetime):
        return obj.strftime('%Y-%m-%d %H:%M:%S')
    else:
        return obj



def downloadexcel(report_name,labels,row_get_data):
        
        wb      = openpyxl.Workbook()
        ws      = wb.active
        print(report_name)
        print(labels)
        print(row_get_data)
        ws.append(labels)

        # Remove timezone.datetime objects
        cleaned_list = [[convert_datetime_to_string(item) for item in sublist] for sublist in row_get_data]

        print(cleaned_list)      

        for row in cleaned_list:
            
            ws.append(row)
        
        

        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter  # Get the column name
            for cell in col:
                try:  # Necessary to avoid error on empty cells
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except:
                    pass
            adjusted_width = (max_length + 2) * 1.2  # Adjusting width
            ws.column_dimensions[column].width = adjusted_width

        response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        response['Content-Disposition'] = f'attachment; filename={report_name}.xlsx'
        wb.save(response)
        return response

import pdfkit
def downloadpdf(report_name,labels,data_to_pass):
    html_content =  f"""
                    <!DOCTYPE html>
                    <html>
                    <head>
                        <title>HTML to PDF</title>
                    </head>
                    <body>
                        <h1>{report_name}!</h1>
                        <table border='1'><tr>
                        """

                    # Iterating over the list to include each item in HTML content
    for item in labels:
        html_content += f"<td>{item}</td>"

    html_content += """</tr>"""
    


    for row in data_to_pass:
        html_content += f"<tr>"
        for column in row:
            html_content += f"<td>{column}</td>"
        html_content += f"</tr>"
    # Closing HTML tags
    html_content += """
    </table>
        </body>
        </html>
        """
    
    path_wkhtmltopdf = r'C:\Program Files\wkhtmltopdf\bin\wkhtmltopdf.exe'

    # Generate PDF from HTML content
    pdf = pdfkit.from_string(html_content, False, configuration=pdfkit.configuration(wkhtmltopdf=path_wkhtmltopdf))

    # Create HTTP response with PDF content
    response = HttpResponse(pdf, content_type='application/pdf')
    response['Content-Disposition'] = 'attachment; filename=output.pdf'  # Force download
    return response


def view_custom_report(request):
    if request.session.has_key('userId'):
        if 'report_id' in request.GET:
            search_branch       = int(request.POST.get('branch_id',0))
            search_entity       = int(request.POST.get('entity_id',0))
            print(search_entity)
            
            user_id             = request.session.get('userId')
            get_user_data       = user_data.objects.get(id=user_id)
            
            report_id           = request.GET.get('report_id')
            get_report          = custom_reports.objects.get(pk=report_id)
            report_name         = get_report.name
            # get all custom_reports_fields with add on report = 1 because we only need to display those for report view page
            base_report_fields  = get_report.get_fields.filter(add_on_report=1)
            sum_fields_list     = []
            counter   = 0
            for i in list(base_report_fields.values()):
                if i['apply_sum']==1:
                    sum_fields_list.append({
                        'field_name':i['field_name'],
                        'label':i['label'],
                        'position':counter
                        })
                
                counter= counter+1

            print(sum_fields_list)
            # get label field name fkfield as list
            name_and_label_fk   =  list(base_report_fields.values('label','field_name','fkfield'))
            # set lables in separate list
            labels              = [i['label'] for i in name_and_label_fk]

            # set field name in list for use .values(fields_names) in model of report
            fields_names        = [i['field_name'] for i in name_and_label_fk]

            # get fileds with fkfiled ;it is a foreignkey field
            
            field_with_fk       = list(get_report.get_fields.filter(fkfield__isnull=False).values('field_name','fkfield'))

            default_filters = list(
                                get_report.get_fields.filter(~Q(default_filter='')).filter(default_filter__isnull=False).values('field_name', 'default_filter')
                            )
            # print(default_filters)


            query_default_filter    ={}
            if default_filters:
                for i in default_filters:
                    query_default_filter[i['field_name']]=i['default_filter']
            # print(query_default_filter)
            # print("##########")

            mathching   ={}
            fk_fields   =[]

            # create a matching disctionary to match foreignkey field and it's choosen field(fkfield) 
            for field in field_with_fk:

                mathching[field['field_name']]= field['fkfield']               
                fk_fields.append(field['field_name'])
            

            # get the model for querying for report
            model_class    = apps.get_model('SpreeApp', get_report.table_name)

            # get if user searched a anything to filter
            filters = request.POST.get('filter','')

            print(filters)
            if not filters:    
                filters = request.GET.get('filters','')
                print(filters)
            
            # take a backup variable to assign currently searched filter to pass back to html
            pass_filter_to_html = ''
            if filters:
                pass_filter_to_html = filters
                filters  =json.loads(filters)
                print(filters)
                if filters.get('entity_id'):
                    search_entity =filters.get('entity_id')
                if filters.get('branch_id'):
                    search_branch = filters.get('branch_id')
                # pass filter to model class
                datavalues =model_class.objects.filter(**filters)
                print(datavalues)

            else:
                datavalues =model_class.objects.all()

            if query_default_filter:
                datavalues= datavalues.filter(**query_default_filter)
            
            # default filter available for report
            if get_report.filter_voucher_type:
                datavalues  = datavalues.filter(voucher_type_id=get_report.filter_voucher_type)
            
            if get_report.filter_entity or get_report.filter_branch:
                
                if get_report.filter_entity:
                    if get_user_data.entity_id:
                        entity_list              = list(get_user_data.entity_id.split(','))
                        print(entity_list)
                        datavalues               = datavalues.filter(entity_id__in = entity_list)
                        print(datavalues)
                        if search_entity:
                            datavalues           = datavalues.filter(entity_id = search_entity)
                    else:
                        if search_entity:
                            datavalues           = datavalues.filter(entity_id = search_entity)

                if get_report.filter_branch:
                    if get_user_data.branch_id:
                        branch_list              = list(get_user_data.branch_id.split(','))
                        datavalues              = datavalues.filter(branch_id__in = branch_list)
                        if search_branch:
                            datavalues              = datavalues.filter(branch_id = search_branch)
                            if get_report.filter_financial_year:
                                financial    = financial_year_data.objects.filter(active=1,branch_id=search_branch).order_by('-id')
                                if financial:
                                    datavalues  = datavalues.filter(financial_year_id=financial[0])
                    else:
                        if search_branch:
                            datavalues              = datavalues.filter(branch_id = search_branch)
                            if get_report.filter_financial_year:
                                financial    = financial_year_data.objects.filter(active=1,branch_id=search_branch).order_by('-id')
                                if financial:
                                    datavalues  = datavalues.filter(financial_year_id=financial[0])

            # append id also to fields list to use on values
            # this is used to get the correct object in report model and get foreignkey values from that.
            fields_names.append('id')
            sum_to_display  = []
            print(sum_fields_list)
            
            if sum_fields_list:
                
                for i in sum_fields_list:
                    print(i['field_name'])
                    aggregated  = datavalues.aggregate(total=Sum(i['field_name']))['total']
                    sum_to_display.append(
                        {'total':aggregated,
                         'position':i['position'],
                         'label':i['label']
                         }
                    )
            print(sum_to_display)    

            values_to_display   = list(datavalues.values(*fields_names)) 

            # here only contain the values of pk field's object not it's value we want to display on page
            # so need to update list [] by append corresponding pk objects field we want to diplay.
            data_to_pass    = []
            for rowdisplay in values_to_display:
                
                pk=rowdisplay['id']
                # each row field data is added on list 
                updated_row =[]
                for key,value in rowdisplay.items():
                    
                    if not key=='id':
                        # check is the key is listed on our foreignkey fields stored list fk_fields
                        if key in fk_fields:
                            # check is this row have value associated with fk
                            if rowdisplay[key]:
                                # get the matching {} on which saved foreignkeyfield name and column to display from which fk table.
                                get_fk_field        = mathching[key]
                                # get the report table object
                                get_model_object    =model_class.objects.get(pk=pk)
                                # get the column value of fk field
                                value               = getattr(get_model_object, key)
                                field_value         = getattr(value, get_fk_field)
                                updated_row.append(field_value) 
                            else:
                                updated_row.append(None) 

                        else:
                            updated_row.append(value) 
                    
                data_to_pass.append(updated_row) 

            total_row   = []
            for i in range(counter):
                total_row= total_row+['']

            if sum_to_display:
                print(sum_to_display)
                for i in sum_to_display:
                    total_row[i['position']]    = i['total']
                    

            print(total_row)
            if total_row:
                data_to_pass.append(total_row)

            updated_filter_dictionary={}
            if filters:
                    # updated filter is passed to html to date value set use
                    # if filters passed remove like name__iststartswith:value > name:value
                    updated_filter_dictionary = {}
                    for key, value in filters.items():
                        # Remove "__istartswith" from the key if it exists
                        if '__istartswith' in key:
                            updated_key = key.replace("__istartswith", "")
                            updated_filter_dictionary[updated_key] = value

                        elif '__range' in key:
                            updated_key = key.replace("__range", "")
                        
                            updated_filter_dictionary[updated_key+"0"] = value[0]
                            updated_filter_dictionary[updated_key+"1"] = value[1]

                        elif '__gte' in key:
                            updated_key = key.replace("__gte", "")
                            updated_filter_dictionary[updated_key+"0"] = value

                        elif '__lte' in key:
                            updated_key = key.replace("__lte", "")
                            updated_filter_dictionary[updated_key+"1"] = value
                        else:
                            updated_filter_dictionary[key] = value


                    print(updated_filter_dictionary)
            # get filter fields
            filter_fields           = get_report.get_fields.filter(add_filter=1,add_on_report=1)
            filter_field_list       = list(filter_fields.values('label','field_name','field_type','fkfield','model_name'))

            # here just include fk field value.
            # here not include the list of columns values of fk fields.
            # so we want to update with values of fkobject.
            filter_to_pass          =[]

            for filter_fields   in filter_field_list:
                # add each filter in new {} with new keys for fk field column values save and currently filtered value.
                each_filter                 = {}
                each_filter['label']        =filter_fields['label']
                each_filter['field_name']   =filter_fields['field_name']
                each_filter['field_type']   =filter_fields['field_type']
                if filter_fields['fkfield']:
                    # if fk field? get the corresponing model 
                    fkmodel_class       = apps.get_model('SpreeApp', filter_fields['model_name'])
                    # if get the values of fkfield column from fk model
                    values_to_display   = list(fkmodel_class.objects.all().values('id',filter_fields['fkfield'])) 
                    
                    # rename the column name (fkfield) to 'name' to easy looping in html  because fkfield is vary.

                    updated_data = [{**d, 'name': d.pop(filter_fields['fkfield'])} for d in values_to_display]
                    each_filter['fkvalues']=updated_data

               

                # if filter already passed get the value from updated_filter_dictionary
                if filters:
                    # 
                    if updated_filter_dictionary.get(each_filter['field_name']):
                        each_filter['value'] = updated_filter_dictionary.get(each_filter['field_name'])
                        print(each_filter['value'])
                    
                # else just pass empty ""
                else:
                    each_filter['value'] = ""

                filter_to_pass.append(each_filter)
                

            if pass_filter_to_html:
                filters = pass_filter_to_html
               
            

            user_id             = request.session.get('userId')
            branch_list         = []
            entity_list         = []
            default_filter      = 0
            if get_report.filter_entity or get_report.filter_branch:
                default_filter      = 1
                if get_report.filter_entity:
                    if get_user_data.entity_id:
                        entity_list              = list(get_user_data.entity_id.split(','))
                        entity_list              = entity_data.objects.filter(pk__in = entity_list)        
                    else:
                        entity_list              = entity_data.objects.all()


                if get_report.filter_branch:
                    if get_user_data.branch_id:
                        branch_list              = list(get_user_data.branch_id.split(','))
                        branch_list              = branch_data.objects.filter(pk__in = branch_list)
                    else:
                        branch_list              = branch_data.objects.all()

            print(data_to_pass)
            if 'download' in request.POST:
                print(data_to_pass)
                responce        = downloadexcel(report_name,labels,data_to_pass)
                return responce

                # responce        = downloadpdf(report_name,labels,data_to_pass)
                # return responce

            page_number     = request.GET.get("page",1)

            paginator       = Paginator(data_to_pass, 10)
            data_to_pass    = paginator.get_page(page_number)
            print(filters)
            for i in data_to_pass:
                print(i)
            


        return render(request,'users/pages/view_custom_report.html',{'report_id':report_id,'search_entity':search_entity,'search_branch':search_branch,'report_name':report_name,'default_filter':default_filter,'row_get_data':data_to_pass,'labels':labels,'filter_to_pass':filter_to_pass,'filters':filters,'updated_filter_dictionary':updated_filter_dictionary,'entity_list':entity_list,'branch_list':branch_list,'sum_to_display':sum_to_display})
    
    else:
        return redirect('user-login')




@cache_control(no_cache=True, must_revalidate=True, no_store=True)
def get_table_fields(request):
    table_name          = "spreeapp_" + request.POST.get('model', '')
    with connection.cursor() as cursor:
        table_details   = []
        model           = apps.get_model(app_label='SpreeApp', model_name=request.POST.get('model', ''))
        if model:
            for field in model._meta.get_fields():
                if not field.auto_created:
                    if field.is_relation:
                        related_model               = field.related_model
                        # here it like customappname_table name we need to pass just table name
                        table_name_without_prefix   = related_model._meta.db_table.split('_', 1)[1]
                        table_details.append({
                            'field_name': field.name,
                            'label'     : field.name.replace("_"," ").capitalize(),
                            'field_type': field.get_internal_type(),
                            'model': table_name_without_prefix,
                            'fields': [related_field.name for related_field in related_model._meta.get_fields() if not related_field.auto_created]
                        })
                    else:
                        table_details.append({
                            'field_name': field.name,
                            'label'     : field.name.replace("_"," ").capitalize(),
                            'field_type': field.get_internal_type()
                        })
                        

    return JsonResponse({'table_details':table_details,'length':len(table_details)})



